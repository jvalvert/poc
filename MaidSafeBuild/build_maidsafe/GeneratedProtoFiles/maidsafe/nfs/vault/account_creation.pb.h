// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/nfs/vault/account_creation.proto

#ifndef PROTOBUF_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace nfs_vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto();
void protobuf_AssignDesc_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto();
void protobuf_ShutdownFile_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto();

class AccountCreation;

// ===================================================================

class AccountCreation : public ::google::protobuf::MessageLite {
 public:
  AccountCreation();
  virtual ~AccountCreation();

  AccountCreation(const AccountCreation& from);

  inline AccountCreation& operator=(const AccountCreation& from) {
    CopyFrom(from);
    return *this;
  }

  static const AccountCreation& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AccountCreation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AccountCreation* other);

  // implements Message ----------------------------------------------

  AccountCreation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AccountCreation& from);
  void MergeFrom(const AccountCreation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes public_maid_name = 1;
  inline bool has_public_maid_name() const;
  inline void clear_public_maid_name();
  static const int kPublicMaidNameFieldNumber = 1;
  inline const ::std::string& public_maid_name() const;
  inline void set_public_maid_name(const ::std::string& value);
  inline void set_public_maid_name(const char* value);
  inline void set_public_maid_name(const void* value, size_t size);
  inline ::std::string* mutable_public_maid_name();
  inline ::std::string* release_public_maid_name();
  inline void set_allocated_public_maid_name(::std::string* public_maid_name);

  // required bytes public_maid = 2;
  inline bool has_public_maid() const;
  inline void clear_public_maid();
  static const int kPublicMaidFieldNumber = 2;
  inline const ::std::string& public_maid() const;
  inline void set_public_maid(const ::std::string& value);
  inline void set_public_maid(const char* value);
  inline void set_public_maid(const void* value, size_t size);
  inline ::std::string* mutable_public_maid();
  inline ::std::string* release_public_maid();
  inline void set_allocated_public_maid(::std::string* public_maid);

  // required bytes public_anmaid_name = 3;
  inline bool has_public_anmaid_name() const;
  inline void clear_public_anmaid_name();
  static const int kPublicAnmaidNameFieldNumber = 3;
  inline const ::std::string& public_anmaid_name() const;
  inline void set_public_anmaid_name(const ::std::string& value);
  inline void set_public_anmaid_name(const char* value);
  inline void set_public_anmaid_name(const void* value, size_t size);
  inline ::std::string* mutable_public_anmaid_name();
  inline ::std::string* release_public_anmaid_name();
  inline void set_allocated_public_anmaid_name(::std::string* public_anmaid_name);

  // required bytes public_anmaid = 4;
  inline bool has_public_anmaid() const;
  inline void clear_public_anmaid();
  static const int kPublicAnmaidFieldNumber = 4;
  inline const ::std::string& public_anmaid() const;
  inline void set_public_anmaid(const ::std::string& value);
  inline void set_public_anmaid(const char* value);
  inline void set_public_anmaid(const void* value, size_t size);
  inline ::std::string* mutable_public_anmaid();
  inline ::std::string* release_public_anmaid();
  inline void set_allocated_public_anmaid(::std::string* public_anmaid);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_vault.protobuf.AccountCreation)
 private:
  inline void set_has_public_maid_name();
  inline void clear_has_public_maid_name();
  inline void set_has_public_maid();
  inline void clear_has_public_maid();
  inline void set_has_public_anmaid_name();
  inline void clear_has_public_anmaid_name();
  inline void set_has_public_anmaid();
  inline void clear_has_public_anmaid();

  ::std::string* public_maid_name_;
  ::std::string* public_maid_;
  ::std::string* public_anmaid_name_;
  ::std::string* public_anmaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto();

  void InitAsDefaultInstance();
  static AccountCreation* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountCreation

// required bytes public_maid_name = 1;
inline bool AccountCreation::has_public_maid_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountCreation::set_has_public_maid_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountCreation::clear_has_public_maid_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountCreation::clear_public_maid_name() {
  if (public_maid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    public_maid_name_->clear();
  }
  clear_has_public_maid_name();
}
inline const ::std::string& AccountCreation::public_maid_name() const {
  return *public_maid_name_;
}
inline void AccountCreation::set_public_maid_name(const ::std::string& value) {
  set_has_public_maid_name();
  if (public_maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    public_maid_name_ = new ::std::string;
  }
  public_maid_name_->assign(value);
}
inline void AccountCreation::set_public_maid_name(const char* value) {
  set_has_public_maid_name();
  if (public_maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    public_maid_name_ = new ::std::string;
  }
  public_maid_name_->assign(value);
}
inline void AccountCreation::set_public_maid_name(const void* value, size_t size) {
  set_has_public_maid_name();
  if (public_maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    public_maid_name_ = new ::std::string;
  }
  public_maid_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountCreation::mutable_public_maid_name() {
  set_has_public_maid_name();
  if (public_maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    public_maid_name_ = new ::std::string;
  }
  return public_maid_name_;
}
inline ::std::string* AccountCreation::release_public_maid_name() {
  clear_has_public_maid_name();
  if (public_maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = public_maid_name_;
    public_maid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AccountCreation::set_allocated_public_maid_name(::std::string* public_maid_name) {
  if (public_maid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete public_maid_name_;
  }
  if (public_maid_name) {
    set_has_public_maid_name();
    public_maid_name_ = public_maid_name;
  } else {
    clear_has_public_maid_name();
    public_maid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes public_maid = 2;
inline bool AccountCreation::has_public_maid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountCreation::set_has_public_maid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountCreation::clear_has_public_maid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountCreation::clear_public_maid() {
  if (public_maid_ != &::google::protobuf::internal::GetEmptyString()) {
    public_maid_->clear();
  }
  clear_has_public_maid();
}
inline const ::std::string& AccountCreation::public_maid() const {
  return *public_maid_;
}
inline void AccountCreation::set_public_maid(const ::std::string& value) {
  set_has_public_maid();
  if (public_maid_ == &::google::protobuf::internal::GetEmptyString()) {
    public_maid_ = new ::std::string;
  }
  public_maid_->assign(value);
}
inline void AccountCreation::set_public_maid(const char* value) {
  set_has_public_maid();
  if (public_maid_ == &::google::protobuf::internal::GetEmptyString()) {
    public_maid_ = new ::std::string;
  }
  public_maid_->assign(value);
}
inline void AccountCreation::set_public_maid(const void* value, size_t size) {
  set_has_public_maid();
  if (public_maid_ == &::google::protobuf::internal::GetEmptyString()) {
    public_maid_ = new ::std::string;
  }
  public_maid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountCreation::mutable_public_maid() {
  set_has_public_maid();
  if (public_maid_ == &::google::protobuf::internal::GetEmptyString()) {
    public_maid_ = new ::std::string;
  }
  return public_maid_;
}
inline ::std::string* AccountCreation::release_public_maid() {
  clear_has_public_maid();
  if (public_maid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = public_maid_;
    public_maid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AccountCreation::set_allocated_public_maid(::std::string* public_maid) {
  if (public_maid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete public_maid_;
  }
  if (public_maid) {
    set_has_public_maid();
    public_maid_ = public_maid;
  } else {
    clear_has_public_maid();
    public_maid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes public_anmaid_name = 3;
inline bool AccountCreation::has_public_anmaid_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountCreation::set_has_public_anmaid_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountCreation::clear_has_public_anmaid_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountCreation::clear_public_anmaid_name() {
  if (public_anmaid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_name_->clear();
  }
  clear_has_public_anmaid_name();
}
inline const ::std::string& AccountCreation::public_anmaid_name() const {
  return *public_anmaid_name_;
}
inline void AccountCreation::set_public_anmaid_name(const ::std::string& value) {
  set_has_public_anmaid_name();
  if (public_anmaid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_name_ = new ::std::string;
  }
  public_anmaid_name_->assign(value);
}
inline void AccountCreation::set_public_anmaid_name(const char* value) {
  set_has_public_anmaid_name();
  if (public_anmaid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_name_ = new ::std::string;
  }
  public_anmaid_name_->assign(value);
}
inline void AccountCreation::set_public_anmaid_name(const void* value, size_t size) {
  set_has_public_anmaid_name();
  if (public_anmaid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_name_ = new ::std::string;
  }
  public_anmaid_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountCreation::mutable_public_anmaid_name() {
  set_has_public_anmaid_name();
  if (public_anmaid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_name_ = new ::std::string;
  }
  return public_anmaid_name_;
}
inline ::std::string* AccountCreation::release_public_anmaid_name() {
  clear_has_public_anmaid_name();
  if (public_anmaid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = public_anmaid_name_;
    public_anmaid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AccountCreation::set_allocated_public_anmaid_name(::std::string* public_anmaid_name) {
  if (public_anmaid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete public_anmaid_name_;
  }
  if (public_anmaid_name) {
    set_has_public_anmaid_name();
    public_anmaid_name_ = public_anmaid_name;
  } else {
    clear_has_public_anmaid_name();
    public_anmaid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes public_anmaid = 4;
inline bool AccountCreation::has_public_anmaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountCreation::set_has_public_anmaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountCreation::clear_has_public_anmaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountCreation::clear_public_anmaid() {
  if (public_anmaid_ != &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_->clear();
  }
  clear_has_public_anmaid();
}
inline const ::std::string& AccountCreation::public_anmaid() const {
  return *public_anmaid_;
}
inline void AccountCreation::set_public_anmaid(const ::std::string& value) {
  set_has_public_anmaid();
  if (public_anmaid_ == &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_ = new ::std::string;
  }
  public_anmaid_->assign(value);
}
inline void AccountCreation::set_public_anmaid(const char* value) {
  set_has_public_anmaid();
  if (public_anmaid_ == &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_ = new ::std::string;
  }
  public_anmaid_->assign(value);
}
inline void AccountCreation::set_public_anmaid(const void* value, size_t size) {
  set_has_public_anmaid();
  if (public_anmaid_ == &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_ = new ::std::string;
  }
  public_anmaid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountCreation::mutable_public_anmaid() {
  set_has_public_anmaid();
  if (public_anmaid_ == &::google::protobuf::internal::GetEmptyString()) {
    public_anmaid_ = new ::std::string;
  }
  return public_anmaid_;
}
inline ::std::string* AccountCreation::release_public_anmaid() {
  clear_has_public_anmaid();
  if (public_anmaid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = public_anmaid_;
    public_anmaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AccountCreation::set_allocated_public_anmaid(::std::string* public_anmaid) {
  if (public_anmaid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete public_anmaid_;
  }
  if (public_anmaid) {
    set_has_public_anmaid();
    public_anmaid_ = public_anmaid;
  } else {
    clear_has_public_anmaid();
    public_anmaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace nfs_vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fnfs_2fvault_2faccount_5fcreation_2eproto__INCLUDED
