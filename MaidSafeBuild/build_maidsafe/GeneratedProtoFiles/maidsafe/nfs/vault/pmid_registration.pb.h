// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/nfs/vault/pmid_registration.proto

#ifndef PROTOBUF_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace nfs_vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();
void protobuf_AssignDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();
void protobuf_ShutdownFile_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();

class PmidRegistration;
class PmidRegistration_SignedDetails;
class PmidRegistration_SignedDetails_Details;

// ===================================================================

class PmidRegistration_SignedDetails_Details : public ::google::protobuf::MessageLite {
 public:
  PmidRegistration_SignedDetails_Details();
  virtual ~PmidRegistration_SignedDetails_Details();

  PmidRegistration_SignedDetails_Details(const PmidRegistration_SignedDetails_Details& from);

  inline PmidRegistration_SignedDetails_Details& operator=(const PmidRegistration_SignedDetails_Details& from) {
    CopyFrom(from);
    return *this;
  }

  static const PmidRegistration_SignedDetails_Details& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PmidRegistration_SignedDetails_Details* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PmidRegistration_SignedDetails_Details* other);

  // implements Message ----------------------------------------------

  PmidRegistration_SignedDetails_Details* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PmidRegistration_SignedDetails_Details& from);
  void MergeFrom(const PmidRegistration_SignedDetails_Details& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes maid_name = 1;
  inline bool has_maid_name() const;
  inline void clear_maid_name();
  static const int kMaidNameFieldNumber = 1;
  inline const ::std::string& maid_name() const;
  inline void set_maid_name(const ::std::string& value);
  inline void set_maid_name(const char* value);
  inline void set_maid_name(const void* value, size_t size);
  inline ::std::string* mutable_maid_name();
  inline ::std::string* release_maid_name();
  inline void set_allocated_maid_name(::std::string* maid_name);

  // required bytes pmid_name = 2;
  inline bool has_pmid_name() const;
  inline void clear_pmid_name();
  static const int kPmidNameFieldNumber = 2;
  inline const ::std::string& pmid_name() const;
  inline void set_pmid_name(const ::std::string& value);
  inline void set_pmid_name(const char* value);
  inline void set_pmid_name(const void* value, size_t size);
  inline ::std::string* mutable_pmid_name();
  inline ::std::string* release_pmid_name();
  inline void set_allocated_pmid_name(::std::string* pmid_name);

  // required bool unregister = 3;
  inline bool has_unregister() const;
  inline void clear_unregister();
  static const int kUnregisterFieldNumber = 3;
  inline bool unregister() const;
  inline void set_unregister(bool value);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_vault.protobuf.PmidRegistration.SignedDetails.Details)
 private:
  inline void set_has_maid_name();
  inline void clear_has_maid_name();
  inline void set_has_pmid_name();
  inline void clear_has_pmid_name();
  inline void set_has_unregister();
  inline void clear_has_unregister();

  ::std::string* maid_name_;
  ::std::string* pmid_name_;
  bool unregister_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();

  void InitAsDefaultInstance();
  static PmidRegistration_SignedDetails_Details* default_instance_;
};
// -------------------------------------------------------------------

class PmidRegistration_SignedDetails : public ::google::protobuf::MessageLite {
 public:
  PmidRegistration_SignedDetails();
  virtual ~PmidRegistration_SignedDetails();

  PmidRegistration_SignedDetails(const PmidRegistration_SignedDetails& from);

  inline PmidRegistration_SignedDetails& operator=(const PmidRegistration_SignedDetails& from) {
    CopyFrom(from);
    return *this;
  }

  static const PmidRegistration_SignedDetails& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PmidRegistration_SignedDetails* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PmidRegistration_SignedDetails* other);

  // implements Message ----------------------------------------------

  PmidRegistration_SignedDetails* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PmidRegistration_SignedDetails& from);
  void MergeFrom(const PmidRegistration_SignedDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PmidRegistration_SignedDetails_Details Details;

  // accessors -------------------------------------------------------

  // required bytes serialised_details = 1;
  inline bool has_serialised_details() const;
  inline void clear_serialised_details();
  static const int kSerialisedDetailsFieldNumber = 1;
  inline const ::std::string& serialised_details() const;
  inline void set_serialised_details(const ::std::string& value);
  inline void set_serialised_details(const char* value);
  inline void set_serialised_details(const void* value, size_t size);
  inline ::std::string* mutable_serialised_details();
  inline ::std::string* release_serialised_details();
  inline void set_allocated_serialised_details(::std::string* serialised_details);

  // required bytes pmid_signature = 2;
  inline bool has_pmid_signature() const;
  inline void clear_pmid_signature();
  static const int kPmidSignatureFieldNumber = 2;
  inline const ::std::string& pmid_signature() const;
  inline void set_pmid_signature(const ::std::string& value);
  inline void set_pmid_signature(const char* value);
  inline void set_pmid_signature(const void* value, size_t size);
  inline ::std::string* mutable_pmid_signature();
  inline ::std::string* release_pmid_signature();
  inline void set_allocated_pmid_signature(::std::string* pmid_signature);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_vault.protobuf.PmidRegistration.SignedDetails)
 private:
  inline void set_has_serialised_details();
  inline void clear_has_serialised_details();
  inline void set_has_pmid_signature();
  inline void clear_has_pmid_signature();

  ::std::string* serialised_details_;
  ::std::string* pmid_signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();

  void InitAsDefaultInstance();
  static PmidRegistration_SignedDetails* default_instance_;
};
// -------------------------------------------------------------------

class PmidRegistration : public ::google::protobuf::MessageLite {
 public:
  PmidRegistration();
  virtual ~PmidRegistration();

  PmidRegistration(const PmidRegistration& from);

  inline PmidRegistration& operator=(const PmidRegistration& from) {
    CopyFrom(from);
    return *this;
  }

  static const PmidRegistration& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PmidRegistration* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PmidRegistration* other);

  // implements Message ----------------------------------------------

  PmidRegistration* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PmidRegistration& from);
  void MergeFrom(const PmidRegistration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PmidRegistration_SignedDetails SignedDetails;

  // accessors -------------------------------------------------------

  // required bytes serialised_signed_details = 1;
  inline bool has_serialised_signed_details() const;
  inline void clear_serialised_signed_details();
  static const int kSerialisedSignedDetailsFieldNumber = 1;
  inline const ::std::string& serialised_signed_details() const;
  inline void set_serialised_signed_details(const ::std::string& value);
  inline void set_serialised_signed_details(const char* value);
  inline void set_serialised_signed_details(const void* value, size_t size);
  inline ::std::string* mutable_serialised_signed_details();
  inline ::std::string* release_serialised_signed_details();
  inline void set_allocated_serialised_signed_details(::std::string* serialised_signed_details);

  // required bytes maid_signature = 2;
  inline bool has_maid_signature() const;
  inline void clear_maid_signature();
  static const int kMaidSignatureFieldNumber = 2;
  inline const ::std::string& maid_signature() const;
  inline void set_maid_signature(const ::std::string& value);
  inline void set_maid_signature(const char* value);
  inline void set_maid_signature(const void* value, size_t size);
  inline ::std::string* mutable_maid_signature();
  inline ::std::string* release_maid_signature();
  inline void set_allocated_maid_signature(::std::string* maid_signature);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_vault.protobuf.PmidRegistration)
 private:
  inline void set_has_serialised_signed_details();
  inline void clear_has_serialised_signed_details();
  inline void set_has_maid_signature();
  inline void clear_has_maid_signature();

  ::std::string* serialised_signed_details_;
  ::std::string* maid_signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto();

  void InitAsDefaultInstance();
  static PmidRegistration* default_instance_;
};
// ===================================================================


// ===================================================================

// PmidRegistration_SignedDetails_Details

// required bytes maid_name = 1;
inline bool PmidRegistration_SignedDetails_Details::has_maid_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmidRegistration_SignedDetails_Details::set_has_maid_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmidRegistration_SignedDetails_Details::clear_has_maid_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmidRegistration_SignedDetails_Details::clear_maid_name() {
  if (maid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    maid_name_->clear();
  }
  clear_has_maid_name();
}
inline const ::std::string& PmidRegistration_SignedDetails_Details::maid_name() const {
  return *maid_name_;
}
inline void PmidRegistration_SignedDetails_Details::set_maid_name(const ::std::string& value) {
  set_has_maid_name();
  if (maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    maid_name_ = new ::std::string;
  }
  maid_name_->assign(value);
}
inline void PmidRegistration_SignedDetails_Details::set_maid_name(const char* value) {
  set_has_maid_name();
  if (maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    maid_name_ = new ::std::string;
  }
  maid_name_->assign(value);
}
inline void PmidRegistration_SignedDetails_Details::set_maid_name(const void* value, size_t size) {
  set_has_maid_name();
  if (maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    maid_name_ = new ::std::string;
  }
  maid_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidRegistration_SignedDetails_Details::mutable_maid_name() {
  set_has_maid_name();
  if (maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    maid_name_ = new ::std::string;
  }
  return maid_name_;
}
inline ::std::string* PmidRegistration_SignedDetails_Details::release_maid_name() {
  clear_has_maid_name();
  if (maid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = maid_name_;
    maid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidRegistration_SignedDetails_Details::set_allocated_maid_name(::std::string* maid_name) {
  if (maid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete maid_name_;
  }
  if (maid_name) {
    set_has_maid_name();
    maid_name_ = maid_name;
  } else {
    clear_has_maid_name();
    maid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes pmid_name = 2;
inline bool PmidRegistration_SignedDetails_Details::has_pmid_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PmidRegistration_SignedDetails_Details::set_has_pmid_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PmidRegistration_SignedDetails_Details::clear_has_pmid_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PmidRegistration_SignedDetails_Details::clear_pmid_name() {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_->clear();
  }
  clear_has_pmid_name();
}
inline const ::std::string& PmidRegistration_SignedDetails_Details::pmid_name() const {
  return *pmid_name_;
}
inline void PmidRegistration_SignedDetails_Details::set_pmid_name(const ::std::string& value) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(value);
}
inline void PmidRegistration_SignedDetails_Details::set_pmid_name(const char* value) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(value);
}
inline void PmidRegistration_SignedDetails_Details::set_pmid_name(const void* value, size_t size) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidRegistration_SignedDetails_Details::mutable_pmid_name() {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  return pmid_name_;
}
inline ::std::string* PmidRegistration_SignedDetails_Details::release_pmid_name() {
  clear_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pmid_name_;
    pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidRegistration_SignedDetails_Details::set_allocated_pmid_name(::std::string* pmid_name) {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_name_;
  }
  if (pmid_name) {
    set_has_pmid_name();
    pmid_name_ = pmid_name;
  } else {
    clear_has_pmid_name();
    pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bool unregister = 3;
inline bool PmidRegistration_SignedDetails_Details::has_unregister() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PmidRegistration_SignedDetails_Details::set_has_unregister() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PmidRegistration_SignedDetails_Details::clear_has_unregister() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PmidRegistration_SignedDetails_Details::clear_unregister() {
  unregister_ = false;
  clear_has_unregister();
}
inline bool PmidRegistration_SignedDetails_Details::unregister() const {
  return unregister_;
}
inline void PmidRegistration_SignedDetails_Details::set_unregister(bool value) {
  set_has_unregister();
  unregister_ = value;
}

// -------------------------------------------------------------------

// PmidRegistration_SignedDetails

// required bytes serialised_details = 1;
inline bool PmidRegistration_SignedDetails::has_serialised_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmidRegistration_SignedDetails::set_has_serialised_details() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmidRegistration_SignedDetails::clear_has_serialised_details() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmidRegistration_SignedDetails::clear_serialised_details() {
  if (serialised_details_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_details_->clear();
  }
  clear_has_serialised_details();
}
inline const ::std::string& PmidRegistration_SignedDetails::serialised_details() const {
  return *serialised_details_;
}
inline void PmidRegistration_SignedDetails::set_serialised_details(const ::std::string& value) {
  set_has_serialised_details();
  if (serialised_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_details_ = new ::std::string;
  }
  serialised_details_->assign(value);
}
inline void PmidRegistration_SignedDetails::set_serialised_details(const char* value) {
  set_has_serialised_details();
  if (serialised_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_details_ = new ::std::string;
  }
  serialised_details_->assign(value);
}
inline void PmidRegistration_SignedDetails::set_serialised_details(const void* value, size_t size) {
  set_has_serialised_details();
  if (serialised_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_details_ = new ::std::string;
  }
  serialised_details_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidRegistration_SignedDetails::mutable_serialised_details() {
  set_has_serialised_details();
  if (serialised_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_details_ = new ::std::string;
  }
  return serialised_details_;
}
inline ::std::string* PmidRegistration_SignedDetails::release_serialised_details() {
  clear_has_serialised_details();
  if (serialised_details_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_details_;
    serialised_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidRegistration_SignedDetails::set_allocated_serialised_details(::std::string* serialised_details) {
  if (serialised_details_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_details_;
  }
  if (serialised_details) {
    set_has_serialised_details();
    serialised_details_ = serialised_details;
  } else {
    clear_has_serialised_details();
    serialised_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes pmid_signature = 2;
inline bool PmidRegistration_SignedDetails::has_pmid_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PmidRegistration_SignedDetails::set_has_pmid_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PmidRegistration_SignedDetails::clear_has_pmid_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PmidRegistration_SignedDetails::clear_pmid_signature() {
  if (pmid_signature_ != &::google::protobuf::internal::GetEmptyString()) {
    pmid_signature_->clear();
  }
  clear_has_pmid_signature();
}
inline const ::std::string& PmidRegistration_SignedDetails::pmid_signature() const {
  return *pmid_signature_;
}
inline void PmidRegistration_SignedDetails::set_pmid_signature(const ::std::string& value) {
  set_has_pmid_signature();
  if (pmid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_signature_ = new ::std::string;
  }
  pmid_signature_->assign(value);
}
inline void PmidRegistration_SignedDetails::set_pmid_signature(const char* value) {
  set_has_pmid_signature();
  if (pmid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_signature_ = new ::std::string;
  }
  pmid_signature_->assign(value);
}
inline void PmidRegistration_SignedDetails::set_pmid_signature(const void* value, size_t size) {
  set_has_pmid_signature();
  if (pmid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_signature_ = new ::std::string;
  }
  pmid_signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidRegistration_SignedDetails::mutable_pmid_signature() {
  set_has_pmid_signature();
  if (pmid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_signature_ = new ::std::string;
  }
  return pmid_signature_;
}
inline ::std::string* PmidRegistration_SignedDetails::release_pmid_signature() {
  clear_has_pmid_signature();
  if (pmid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pmid_signature_;
    pmid_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidRegistration_SignedDetails::set_allocated_pmid_signature(::std::string* pmid_signature) {
  if (pmid_signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_signature_;
  }
  if (pmid_signature) {
    set_has_pmid_signature();
    pmid_signature_ = pmid_signature;
  } else {
    clear_has_pmid_signature();
    pmid_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// PmidRegistration

// required bytes serialised_signed_details = 1;
inline bool PmidRegistration::has_serialised_signed_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmidRegistration::set_has_serialised_signed_details() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmidRegistration::clear_has_serialised_signed_details() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmidRegistration::clear_serialised_signed_details() {
  if (serialised_signed_details_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_signed_details_->clear();
  }
  clear_has_serialised_signed_details();
}
inline const ::std::string& PmidRegistration::serialised_signed_details() const {
  return *serialised_signed_details_;
}
inline void PmidRegistration::set_serialised_signed_details(const ::std::string& value) {
  set_has_serialised_signed_details();
  if (serialised_signed_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_signed_details_ = new ::std::string;
  }
  serialised_signed_details_->assign(value);
}
inline void PmidRegistration::set_serialised_signed_details(const char* value) {
  set_has_serialised_signed_details();
  if (serialised_signed_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_signed_details_ = new ::std::string;
  }
  serialised_signed_details_->assign(value);
}
inline void PmidRegistration::set_serialised_signed_details(const void* value, size_t size) {
  set_has_serialised_signed_details();
  if (serialised_signed_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_signed_details_ = new ::std::string;
  }
  serialised_signed_details_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidRegistration::mutable_serialised_signed_details() {
  set_has_serialised_signed_details();
  if (serialised_signed_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_signed_details_ = new ::std::string;
  }
  return serialised_signed_details_;
}
inline ::std::string* PmidRegistration::release_serialised_signed_details() {
  clear_has_serialised_signed_details();
  if (serialised_signed_details_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_signed_details_;
    serialised_signed_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidRegistration::set_allocated_serialised_signed_details(::std::string* serialised_signed_details) {
  if (serialised_signed_details_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_signed_details_;
  }
  if (serialised_signed_details) {
    set_has_serialised_signed_details();
    serialised_signed_details_ = serialised_signed_details;
  } else {
    clear_has_serialised_signed_details();
    serialised_signed_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes maid_signature = 2;
inline bool PmidRegistration::has_maid_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PmidRegistration::set_has_maid_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PmidRegistration::clear_has_maid_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PmidRegistration::clear_maid_signature() {
  if (maid_signature_ != &::google::protobuf::internal::GetEmptyString()) {
    maid_signature_->clear();
  }
  clear_has_maid_signature();
}
inline const ::std::string& PmidRegistration::maid_signature() const {
  return *maid_signature_;
}
inline void PmidRegistration::set_maid_signature(const ::std::string& value) {
  set_has_maid_signature();
  if (maid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    maid_signature_ = new ::std::string;
  }
  maid_signature_->assign(value);
}
inline void PmidRegistration::set_maid_signature(const char* value) {
  set_has_maid_signature();
  if (maid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    maid_signature_ = new ::std::string;
  }
  maid_signature_->assign(value);
}
inline void PmidRegistration::set_maid_signature(const void* value, size_t size) {
  set_has_maid_signature();
  if (maid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    maid_signature_ = new ::std::string;
  }
  maid_signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidRegistration::mutable_maid_signature() {
  set_has_maid_signature();
  if (maid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    maid_signature_ = new ::std::string;
  }
  return maid_signature_;
}
inline ::std::string* PmidRegistration::release_maid_signature() {
  clear_has_maid_signature();
  if (maid_signature_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = maid_signature_;
    maid_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidRegistration::set_allocated_maid_signature(::std::string* maid_signature) {
  if (maid_signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete maid_signature_;
  }
  if (maid_signature) {
    set_has_maid_signature();
    maid_signature_ = maid_signature;
  } else {
    clear_has_maid_signature();
    maid_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace nfs_vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fnfs_2fvault_2fpmid_5fregistration_2eproto__INCLUDED
