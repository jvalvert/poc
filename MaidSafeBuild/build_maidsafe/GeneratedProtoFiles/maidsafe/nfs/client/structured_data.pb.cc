// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/nfs/client/structured_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/nfs/client/structured_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace nfs_client {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto() {
  delete StructuredData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  StructuredData::default_instance_ = new StructuredData();
  StructuredData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto {
  StaticDescriptorInitializer_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto() {
    protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int StructuredData::kSerialisedVersionsFieldNumber;
#endif  // !_MSC_VER

StructuredData::StructuredData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StructuredData::InitAsDefaultInstance() {
}

StructuredData::StructuredData(const StructuredData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StructuredData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StructuredData::~StructuredData() {
  SharedDtor();
}

void StructuredData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StructuredData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StructuredData& StructuredData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fstructured_5fdata_2eproto();
#endif
  return *default_instance_;
}

StructuredData* StructuredData::default_instance_ = NULL;

StructuredData* StructuredData::New() const {
  return new StructuredData;
}

void StructuredData::Clear() {
  serialised_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StructuredData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes serialised_versions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_serialised_versions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serialised_versions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StructuredData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes serialised_versions = 1;
  for (int i = 0; i < this->serialised_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serialised_versions(i), output);
  }

}

int StructuredData::ByteSize() const {
  int total_size = 0;

  // repeated bytes serialised_versions = 1;
  total_size += 1 * this->serialised_versions_size();
  for (int i = 0; i < this->serialised_versions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->serialised_versions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StructuredData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StructuredData*>(&from));
}

void StructuredData::MergeFrom(const StructuredData& from) {
  GOOGLE_CHECK_NE(&from, this);
  serialised_versions_.MergeFrom(from.serialised_versions_);
}

void StructuredData::CopyFrom(const StructuredData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredData::IsInitialized() const {

  return true;
}

void StructuredData::Swap(StructuredData* other) {
  if (other != this) {
    serialised_versions_.Swap(&other->serialised_versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StructuredData::GetTypeName() const {
  return "maidsafe.nfs_client.protobuf.StructuredData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace nfs_client
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
