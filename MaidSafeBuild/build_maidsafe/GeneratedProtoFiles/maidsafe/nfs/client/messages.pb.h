// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/nfs/client/messages.proto

#ifndef PROTOBUF_maidsafe_2fnfs_2fclient_2fmessages_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fnfs_2fclient_2fmessages_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace nfs_client {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

class ReturnCode;
class AvailableSizeAndReturnCode;
class DataNameAndReturnCode;
class DataNameAndSizeAndReturnCode;
class DataNamesAndReturnCode;
class DataNameVersionAndReturnCode;
class DataNameOldNewVersionAndReturnCode;
class DataAndReturnCode;
class DataNameAndContentOrReturnCode;
class StructuredDataNameAndContentOrReturnCode;
class DataNameAndSizeAndSpaceAndReturnCode;
class TipOfTreeAndReturnCode;

// ===================================================================

class ReturnCode : public ::google::protobuf::MessageLite {
 public:
  ReturnCode();
  virtual ~ReturnCode();

  ReturnCode(const ReturnCode& from);

  inline ReturnCode& operator=(const ReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ReturnCode* other);

  // implements Message ----------------------------------------------

  ReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ReturnCode& from);
  void MergeFrom(const ReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_value = 1;
  inline bool has_error_value() const;
  inline void clear_error_value();
  static const int kErrorValueFieldNumber = 1;
  inline ::google::protobuf::int32 error_value() const;
  inline void set_error_value(::google::protobuf::int32 value);

  // required bytes error_category_name = 2;
  inline bool has_error_category_name() const;
  inline void clear_error_category_name();
  static const int kErrorCategoryNameFieldNumber = 2;
  inline const ::std::string& error_category_name() const;
  inline void set_error_category_name(const ::std::string& value);
  inline void set_error_category_name(const char* value);
  inline void set_error_category_name(const void* value, size_t size);
  inline ::std::string* mutable_error_category_name();
  inline ::std::string* release_error_category_name();
  inline void set_allocated_error_category_name(::std::string* error_category_name);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.ReturnCode)
 private:
  inline void set_has_error_value();
  inline void clear_has_error_value();
  inline void set_has_error_category_name();
  inline void clear_has_error_category_name();

  ::std::string* error_category_name_;
  ::google::protobuf::int32 error_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class AvailableSizeAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  AvailableSizeAndReturnCode();
  virtual ~AvailableSizeAndReturnCode();

  AvailableSizeAndReturnCode(const AvailableSizeAndReturnCode& from);

  inline AvailableSizeAndReturnCode& operator=(const AvailableSizeAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const AvailableSizeAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AvailableSizeAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AvailableSizeAndReturnCode* other);

  // implements Message ----------------------------------------------

  AvailableSizeAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AvailableSizeAndReturnCode& from);
  void MergeFrom(const AvailableSizeAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_available_size = 1;
  inline bool has_serialised_available_size() const;
  inline void clear_serialised_available_size();
  static const int kSerialisedAvailableSizeFieldNumber = 1;
  inline const ::std::string& serialised_available_size() const;
  inline void set_serialised_available_size(const ::std::string& value);
  inline void set_serialised_available_size(const char* value);
  inline void set_serialised_available_size(const void* value, size_t size);
  inline ::std::string* mutable_serialised_available_size();
  inline ::std::string* release_serialised_available_size();
  inline void set_allocated_serialised_available_size(::std::string* serialised_available_size);

  // required bytes serialised_return_code = 2;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 2;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.AvailableSizeAndReturnCode)
 private:
  inline void set_has_serialised_available_size();
  inline void clear_has_serialised_available_size();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_available_size_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static AvailableSizeAndReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class DataNameAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  DataNameAndReturnCode();
  virtual ~DataNameAndReturnCode();

  DataNameAndReturnCode(const DataNameAndReturnCode& from);

  inline DataNameAndReturnCode& operator=(const DataNameAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataNameAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataNameAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataNameAndReturnCode* other);

  // implements Message ----------------------------------------------

  DataNameAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataNameAndReturnCode& from);
  void MergeFrom(const DataNameAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_name = 1;
  inline bool has_serialised_name() const;
  inline void clear_serialised_name();
  static const int kSerialisedNameFieldNumber = 1;
  inline const ::std::string& serialised_name() const;
  inline void set_serialised_name(const ::std::string& value);
  inline void set_serialised_name(const char* value);
  inline void set_serialised_name(const void* value, size_t size);
  inline ::std::string* mutable_serialised_name();
  inline ::std::string* release_serialised_name();
  inline void set_allocated_serialised_name(::std::string* serialised_name);

  // required bytes serialised_return_code = 2;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 2;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.DataNameAndReturnCode)
 private:
  inline void set_has_serialised_name();
  inline void clear_has_serialised_name();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_name_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DataNameAndReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class DataNameAndSizeAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  DataNameAndSizeAndReturnCode();
  virtual ~DataNameAndSizeAndReturnCode();

  DataNameAndSizeAndReturnCode(const DataNameAndSizeAndReturnCode& from);

  inline DataNameAndSizeAndReturnCode& operator=(const DataNameAndSizeAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataNameAndSizeAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataNameAndSizeAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataNameAndSizeAndReturnCode* other);

  // implements Message ----------------------------------------------

  DataNameAndSizeAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataNameAndSizeAndReturnCode& from);
  void MergeFrom(const DataNameAndSizeAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_name = 1;
  inline bool has_serialised_name() const;
  inline void clear_serialised_name();
  static const int kSerialisedNameFieldNumber = 1;
  inline const ::std::string& serialised_name() const;
  inline void set_serialised_name(const ::std::string& value);
  inline void set_serialised_name(const char* value);
  inline void set_serialised_name(const void* value, size_t size);
  inline ::std::string* mutable_serialised_name();
  inline ::std::string* release_serialised_name();
  inline void set_allocated_serialised_name(::std::string* serialised_name);

  // required uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // required bytes serialised_return_code = 3;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 3;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.DataNameAndSizeAndReturnCode)
 private:
  inline void set_has_serialised_name();
  inline void clear_has_serialised_name();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_name_;
  ::google::protobuf::uint64 size_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DataNameAndSizeAndReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class DataNamesAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  DataNamesAndReturnCode();
  virtual ~DataNamesAndReturnCode();

  DataNamesAndReturnCode(const DataNamesAndReturnCode& from);

  inline DataNamesAndReturnCode& operator=(const DataNamesAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataNamesAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataNamesAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataNamesAndReturnCode* other);

  // implements Message ----------------------------------------------

  DataNamesAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataNamesAndReturnCode& from);
  void MergeFrom(const DataNamesAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes serialised_name = 1;
  inline int serialised_name_size() const;
  inline void clear_serialised_name();
  static const int kSerialisedNameFieldNumber = 1;
  inline const ::std::string& serialised_name(int index) const;
  inline ::std::string* mutable_serialised_name(int index);
  inline void set_serialised_name(int index, const ::std::string& value);
  inline void set_serialised_name(int index, const char* value);
  inline void set_serialised_name(int index, const void* value, size_t size);
  inline ::std::string* add_serialised_name();
  inline void add_serialised_name(const ::std::string& value);
  inline void add_serialised_name(const char* value);
  inline void add_serialised_name(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& serialised_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serialised_name();

  // required bytes serialised_return_code = 2;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 2;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.DataNamesAndReturnCode)
 private:
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::google::protobuf::RepeatedPtrField< ::std::string> serialised_name_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DataNamesAndReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class DataNameVersionAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  DataNameVersionAndReturnCode();
  virtual ~DataNameVersionAndReturnCode();

  DataNameVersionAndReturnCode(const DataNameVersionAndReturnCode& from);

  inline DataNameVersionAndReturnCode& operator=(const DataNameVersionAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataNameVersionAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataNameVersionAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataNameVersionAndReturnCode* other);

  // implements Message ----------------------------------------------

  DataNameVersionAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataNameVersionAndReturnCode& from);
  void MergeFrom(const DataNameVersionAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_data_name_and_version = 1;
  inline bool has_serialised_data_name_and_version() const;
  inline void clear_serialised_data_name_and_version();
  static const int kSerialisedDataNameAndVersionFieldNumber = 1;
  inline const ::std::string& serialised_data_name_and_version() const;
  inline void set_serialised_data_name_and_version(const ::std::string& value);
  inline void set_serialised_data_name_and_version(const char* value);
  inline void set_serialised_data_name_and_version(const void* value, size_t size);
  inline ::std::string* mutable_serialised_data_name_and_version();
  inline ::std::string* release_serialised_data_name_and_version();
  inline void set_allocated_serialised_data_name_and_version(::std::string* serialised_data_name_and_version);

  // required bytes serialised_return_code = 2;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 2;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.DataNameVersionAndReturnCode)
 private:
  inline void set_has_serialised_data_name_and_version();
  inline void clear_has_serialised_data_name_and_version();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_data_name_and_version_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DataNameVersionAndReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class DataNameOldNewVersionAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  DataNameOldNewVersionAndReturnCode();
  virtual ~DataNameOldNewVersionAndReturnCode();

  DataNameOldNewVersionAndReturnCode(const DataNameOldNewVersionAndReturnCode& from);

  inline DataNameOldNewVersionAndReturnCode& operator=(const DataNameOldNewVersionAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataNameOldNewVersionAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataNameOldNewVersionAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataNameOldNewVersionAndReturnCode* other);

  // implements Message ----------------------------------------------

  DataNameOldNewVersionAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataNameOldNewVersionAndReturnCode& from);
  void MergeFrom(const DataNameOldNewVersionAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_data_name_old_new_version = 1;
  inline bool has_serialised_data_name_old_new_version() const;
  inline void clear_serialised_data_name_old_new_version();
  static const int kSerialisedDataNameOldNewVersionFieldNumber = 1;
  inline const ::std::string& serialised_data_name_old_new_version() const;
  inline void set_serialised_data_name_old_new_version(const ::std::string& value);
  inline void set_serialised_data_name_old_new_version(const char* value);
  inline void set_serialised_data_name_old_new_version(const void* value, size_t size);
  inline ::std::string* mutable_serialised_data_name_old_new_version();
  inline ::std::string* release_serialised_data_name_old_new_version();
  inline void set_allocated_serialised_data_name_old_new_version(::std::string* serialised_data_name_old_new_version);

  // required bytes serialised_return_code = 2;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 2;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.DataNameOldNewVersionAndReturnCode)
 private:
  inline void set_has_serialised_data_name_old_new_version();
  inline void clear_has_serialised_data_name_old_new_version();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_data_name_old_new_version_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DataNameOldNewVersionAndReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class DataAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  DataAndReturnCode();
  virtual ~DataAndReturnCode();

  DataAndReturnCode(const DataAndReturnCode& from);

  inline DataAndReturnCode& operator=(const DataAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataAndReturnCode* other);

  // implements Message ----------------------------------------------

  DataAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataAndReturnCode& from);
  void MergeFrom(const DataAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_data_name_and_content = 1;
  inline bool has_serialised_data_name_and_content() const;
  inline void clear_serialised_data_name_and_content();
  static const int kSerialisedDataNameAndContentFieldNumber = 1;
  inline const ::std::string& serialised_data_name_and_content() const;
  inline void set_serialised_data_name_and_content(const ::std::string& value);
  inline void set_serialised_data_name_and_content(const char* value);
  inline void set_serialised_data_name_and_content(const void* value, size_t size);
  inline ::std::string* mutable_serialised_data_name_and_content();
  inline ::std::string* release_serialised_data_name_and_content();
  inline void set_allocated_serialised_data_name_and_content(::std::string* serialised_data_name_and_content);

  // required bytes serialised_return_code = 2;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 2;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.DataAndReturnCode)
 private:
  inline void set_has_serialised_data_name_and_content();
  inline void clear_has_serialised_data_name_and_content();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_data_name_and_content_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DataAndReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class DataNameAndContentOrReturnCode : public ::google::protobuf::MessageLite {
 public:
  DataNameAndContentOrReturnCode();
  virtual ~DataNameAndContentOrReturnCode();

  DataNameAndContentOrReturnCode(const DataNameAndContentOrReturnCode& from);

  inline DataNameAndContentOrReturnCode& operator=(const DataNameAndContentOrReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataNameAndContentOrReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataNameAndContentOrReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataNameAndContentOrReturnCode* other);

  // implements Message ----------------------------------------------

  DataNameAndContentOrReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataNameAndContentOrReturnCode& from);
  void MergeFrom(const DataNameAndContentOrReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_name = 1;
  inline bool has_serialised_name() const;
  inline void clear_serialised_name();
  static const int kSerialisedNameFieldNumber = 1;
  inline const ::std::string& serialised_name() const;
  inline void set_serialised_name(const ::std::string& value);
  inline void set_serialised_name(const char* value);
  inline void set_serialised_name(const void* value, size_t size);
  inline ::std::string* mutable_serialised_name();
  inline ::std::string* release_serialised_name();
  inline void set_allocated_serialised_name(::std::string* serialised_name);

  // optional bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional bytes serialised_return_code = 3;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 3;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.DataNameAndContentOrReturnCode)
 private:
  inline void set_has_serialised_name();
  inline void clear_has_serialised_name();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_name_;
  ::std::string* content_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DataNameAndContentOrReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class StructuredDataNameAndContentOrReturnCode : public ::google::protobuf::MessageLite {
 public:
  StructuredDataNameAndContentOrReturnCode();
  virtual ~StructuredDataNameAndContentOrReturnCode();

  StructuredDataNameAndContentOrReturnCode(const StructuredDataNameAndContentOrReturnCode& from);

  inline StructuredDataNameAndContentOrReturnCode& operator=(const StructuredDataNameAndContentOrReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const StructuredDataNameAndContentOrReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StructuredDataNameAndContentOrReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StructuredDataNameAndContentOrReturnCode* other);

  // implements Message ----------------------------------------------

  StructuredDataNameAndContentOrReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StructuredDataNameAndContentOrReturnCode& from);
  void MergeFrom(const StructuredDataNameAndContentOrReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes serialised_structured_data = 1;
  inline bool has_serialised_structured_data() const;
  inline void clear_serialised_structured_data();
  static const int kSerialisedStructuredDataFieldNumber = 1;
  inline const ::std::string& serialised_structured_data() const;
  inline void set_serialised_structured_data(const ::std::string& value);
  inline void set_serialised_structured_data(const char* value);
  inline void set_serialised_structured_data(const void* value, size_t size);
  inline ::std::string* mutable_serialised_structured_data();
  inline ::std::string* release_serialised_structured_data();
  inline void set_allocated_serialised_structured_data(::std::string* serialised_structured_data);

  // optional bytes serialised_data_name_and_return_code = 2;
  inline bool has_serialised_data_name_and_return_code() const;
  inline void clear_serialised_data_name_and_return_code();
  static const int kSerialisedDataNameAndReturnCodeFieldNumber = 2;
  inline const ::std::string& serialised_data_name_and_return_code() const;
  inline void set_serialised_data_name_and_return_code(const ::std::string& value);
  inline void set_serialised_data_name_and_return_code(const char* value);
  inline void set_serialised_data_name_and_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_data_name_and_return_code();
  inline ::std::string* release_serialised_data_name_and_return_code();
  inline void set_allocated_serialised_data_name_and_return_code(::std::string* serialised_data_name_and_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.StructuredDataNameAndContentOrReturnCode)
 private:
  inline void set_has_serialised_structured_data();
  inline void clear_has_serialised_structured_data();
  inline void set_has_serialised_data_name_and_return_code();
  inline void clear_has_serialised_data_name_and_return_code();

  ::std::string* serialised_structured_data_;
  ::std::string* serialised_data_name_and_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static StructuredDataNameAndContentOrReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class DataNameAndSizeAndSpaceAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  DataNameAndSizeAndSpaceAndReturnCode();
  virtual ~DataNameAndSizeAndSpaceAndReturnCode();

  DataNameAndSizeAndSpaceAndReturnCode(const DataNameAndSizeAndSpaceAndReturnCode& from);

  inline DataNameAndSizeAndSpaceAndReturnCode& operator=(const DataNameAndSizeAndSpaceAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataNameAndSizeAndSpaceAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataNameAndSizeAndSpaceAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataNameAndSizeAndSpaceAndReturnCode* other);

  // implements Message ----------------------------------------------

  DataNameAndSizeAndSpaceAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataNameAndSizeAndSpaceAndReturnCode& from);
  void MergeFrom(const DataNameAndSizeAndSpaceAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_name = 1;
  inline bool has_serialised_name() const;
  inline void clear_serialised_name();
  static const int kSerialisedNameFieldNumber = 1;
  inline const ::std::string& serialised_name() const;
  inline void set_serialised_name(const ::std::string& value);
  inline void set_serialised_name(const char* value);
  inline void set_serialised_name(const void* value, size_t size);
  inline ::std::string* mutable_serialised_name();
  inline ::std::string* release_serialised_name();
  inline void set_allocated_serialised_name(::std::string* serialised_name);

  // required uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // required int64 space = 3;
  inline bool has_space() const;
  inline void clear_space();
  static const int kSpaceFieldNumber = 3;
  inline ::google::protobuf::int64 space() const;
  inline void set_space(::google::protobuf::int64 value);

  // required bytes serialised_return_code = 4;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 4;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.DataNameAndSizeAndSpaceAndReturnCode)
 private:
  inline void set_has_serialised_name();
  inline void clear_has_serialised_name();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_space();
  inline void clear_has_space();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_name_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int64 space_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DataNameAndSizeAndSpaceAndReturnCode* default_instance_;
};
// -------------------------------------------------------------------

class TipOfTreeAndReturnCode : public ::google::protobuf::MessageLite {
 public:
  TipOfTreeAndReturnCode();
  virtual ~TipOfTreeAndReturnCode();

  TipOfTreeAndReturnCode(const TipOfTreeAndReturnCode& from);

  inline TipOfTreeAndReturnCode& operator=(const TipOfTreeAndReturnCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const TipOfTreeAndReturnCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TipOfTreeAndReturnCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TipOfTreeAndReturnCode* other);

  // implements Message ----------------------------------------------

  TipOfTreeAndReturnCode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TipOfTreeAndReturnCode& from);
  void MergeFrom(const TipOfTreeAndReturnCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes serialised_tip_of_tree = 1;
  inline bool has_serialised_tip_of_tree() const;
  inline void clear_serialised_tip_of_tree();
  static const int kSerialisedTipOfTreeFieldNumber = 1;
  inline const ::std::string& serialised_tip_of_tree() const;
  inline void set_serialised_tip_of_tree(const ::std::string& value);
  inline void set_serialised_tip_of_tree(const char* value);
  inline void set_serialised_tip_of_tree(const void* value, size_t size);
  inline ::std::string* mutable_serialised_tip_of_tree();
  inline ::std::string* release_serialised_tip_of_tree();
  inline void set_allocated_serialised_tip_of_tree(::std::string* serialised_tip_of_tree);

  // required bytes serialised_return_code = 2;
  inline bool has_serialised_return_code() const;
  inline void clear_serialised_return_code();
  static const int kSerialisedReturnCodeFieldNumber = 2;
  inline const ::std::string& serialised_return_code() const;
  inline void set_serialised_return_code(const ::std::string& value);
  inline void set_serialised_return_code(const char* value);
  inline void set_serialised_return_code(const void* value, size_t size);
  inline ::std::string* mutable_serialised_return_code();
  inline ::std::string* release_serialised_return_code();
  inline void set_allocated_serialised_return_code(::std::string* serialised_return_code);

  // @@protoc_insertion_point(class_scope:maidsafe.nfs_client.protobuf.TipOfTreeAndReturnCode)
 private:
  inline void set_has_serialised_tip_of_tree();
  inline void clear_has_serialised_tip_of_tree();
  inline void set_has_serialised_return_code();
  inline void clear_has_serialised_return_code();

  ::std::string* serialised_tip_of_tree_;
  ::std::string* serialised_return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fclient_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fclient_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TipOfTreeAndReturnCode* default_instance_;
};
// ===================================================================


// ===================================================================

// ReturnCode

// required int32 error_value = 1;
inline bool ReturnCode::has_error_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReturnCode::set_has_error_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReturnCode::clear_has_error_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReturnCode::clear_error_value() {
  error_value_ = 0;
  clear_has_error_value();
}
inline ::google::protobuf::int32 ReturnCode::error_value() const {
  return error_value_;
}
inline void ReturnCode::set_error_value(::google::protobuf::int32 value) {
  set_has_error_value();
  error_value_ = value;
}

// required bytes error_category_name = 2;
inline bool ReturnCode::has_error_category_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReturnCode::set_has_error_category_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReturnCode::clear_has_error_category_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReturnCode::clear_error_category_name() {
  if (error_category_name_ != &::google::protobuf::internal::GetEmptyString()) {
    error_category_name_->clear();
  }
  clear_has_error_category_name();
}
inline const ::std::string& ReturnCode::error_category_name() const {
  return *error_category_name_;
}
inline void ReturnCode::set_error_category_name(const ::std::string& value) {
  set_has_error_category_name();
  if (error_category_name_ == &::google::protobuf::internal::GetEmptyString()) {
    error_category_name_ = new ::std::string;
  }
  error_category_name_->assign(value);
}
inline void ReturnCode::set_error_category_name(const char* value) {
  set_has_error_category_name();
  if (error_category_name_ == &::google::protobuf::internal::GetEmptyString()) {
    error_category_name_ = new ::std::string;
  }
  error_category_name_->assign(value);
}
inline void ReturnCode::set_error_category_name(const void* value, size_t size) {
  set_has_error_category_name();
  if (error_category_name_ == &::google::protobuf::internal::GetEmptyString()) {
    error_category_name_ = new ::std::string;
  }
  error_category_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReturnCode::mutable_error_category_name() {
  set_has_error_category_name();
  if (error_category_name_ == &::google::protobuf::internal::GetEmptyString()) {
    error_category_name_ = new ::std::string;
  }
  return error_category_name_;
}
inline ::std::string* ReturnCode::release_error_category_name() {
  clear_has_error_category_name();
  if (error_category_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = error_category_name_;
    error_category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ReturnCode::set_allocated_error_category_name(::std::string* error_category_name) {
  if (error_category_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete error_category_name_;
  }
  if (error_category_name) {
    set_has_error_category_name();
    error_category_name_ = error_category_name;
  } else {
    clear_has_error_category_name();
    error_category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// AvailableSizeAndReturnCode

// required bytes serialised_available_size = 1;
inline bool AvailableSizeAndReturnCode::has_serialised_available_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvailableSizeAndReturnCode::set_has_serialised_available_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AvailableSizeAndReturnCode::clear_has_serialised_available_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AvailableSizeAndReturnCode::clear_serialised_available_size() {
  if (serialised_available_size_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_available_size_->clear();
  }
  clear_has_serialised_available_size();
}
inline const ::std::string& AvailableSizeAndReturnCode::serialised_available_size() const {
  return *serialised_available_size_;
}
inline void AvailableSizeAndReturnCode::set_serialised_available_size(const ::std::string& value) {
  set_has_serialised_available_size();
  if (serialised_available_size_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_available_size_ = new ::std::string;
  }
  serialised_available_size_->assign(value);
}
inline void AvailableSizeAndReturnCode::set_serialised_available_size(const char* value) {
  set_has_serialised_available_size();
  if (serialised_available_size_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_available_size_ = new ::std::string;
  }
  serialised_available_size_->assign(value);
}
inline void AvailableSizeAndReturnCode::set_serialised_available_size(const void* value, size_t size) {
  set_has_serialised_available_size();
  if (serialised_available_size_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_available_size_ = new ::std::string;
  }
  serialised_available_size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AvailableSizeAndReturnCode::mutable_serialised_available_size() {
  set_has_serialised_available_size();
  if (serialised_available_size_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_available_size_ = new ::std::string;
  }
  return serialised_available_size_;
}
inline ::std::string* AvailableSizeAndReturnCode::release_serialised_available_size() {
  clear_has_serialised_available_size();
  if (serialised_available_size_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_available_size_;
    serialised_available_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AvailableSizeAndReturnCode::set_allocated_serialised_available_size(::std::string* serialised_available_size) {
  if (serialised_available_size_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_available_size_;
  }
  if (serialised_available_size) {
    set_has_serialised_available_size();
    serialised_available_size_ = serialised_available_size;
  } else {
    clear_has_serialised_available_size();
    serialised_available_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes serialised_return_code = 2;
inline bool AvailableSizeAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AvailableSizeAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AvailableSizeAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AvailableSizeAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& AvailableSizeAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void AvailableSizeAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void AvailableSizeAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void AvailableSizeAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AvailableSizeAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* AvailableSizeAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AvailableSizeAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataNameAndReturnCode

// required bytes serialised_name = 1;
inline bool DataNameAndReturnCode::has_serialised_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataNameAndReturnCode::set_has_serialised_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataNameAndReturnCode::clear_has_serialised_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataNameAndReturnCode::clear_serialised_name() {
  if (serialised_name_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_->clear();
  }
  clear_has_serialised_name();
}
inline const ::std::string& DataNameAndReturnCode::serialised_name() const {
  return *serialised_name_;
}
inline void DataNameAndReturnCode::set_serialised_name(const ::std::string& value) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(value);
}
inline void DataNameAndReturnCode::set_serialised_name(const char* value) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(value);
}
inline void DataNameAndReturnCode::set_serialised_name(const void* value, size_t size) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndReturnCode::mutable_serialised_name() {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  return serialised_name_;
}
inline ::std::string* DataNameAndReturnCode::release_serialised_name() {
  clear_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_name_;
    serialised_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndReturnCode::set_allocated_serialised_name(::std::string* serialised_name) {
  if (serialised_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_name_;
  }
  if (serialised_name) {
    set_has_serialised_name();
    serialised_name_ = serialised_name;
  } else {
    clear_has_serialised_name();
    serialised_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes serialised_return_code = 2;
inline bool DataNameAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataNameAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataNameAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataNameAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& DataNameAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void DataNameAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* DataNameAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataNameAndSizeAndReturnCode

// required bytes serialised_name = 1;
inline bool DataNameAndSizeAndReturnCode::has_serialised_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataNameAndSizeAndReturnCode::set_has_serialised_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataNameAndSizeAndReturnCode::clear_has_serialised_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataNameAndSizeAndReturnCode::clear_serialised_name() {
  if (serialised_name_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_->clear();
  }
  clear_has_serialised_name();
}
inline const ::std::string& DataNameAndSizeAndReturnCode::serialised_name() const {
  return *serialised_name_;
}
inline void DataNameAndSizeAndReturnCode::set_serialised_name(const ::std::string& value) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(value);
}
inline void DataNameAndSizeAndReturnCode::set_serialised_name(const char* value) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(value);
}
inline void DataNameAndSizeAndReturnCode::set_serialised_name(const void* value, size_t size) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndSizeAndReturnCode::mutable_serialised_name() {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  return serialised_name_;
}
inline ::std::string* DataNameAndSizeAndReturnCode::release_serialised_name() {
  clear_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_name_;
    serialised_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndSizeAndReturnCode::set_allocated_serialised_name(::std::string* serialised_name) {
  if (serialised_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_name_;
  }
  if (serialised_name) {
    set_has_serialised_name();
    serialised_name_ = serialised_name;
  } else {
    clear_has_serialised_name();
    serialised_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required uint64 size = 2;
inline bool DataNameAndSizeAndReturnCode::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataNameAndSizeAndReturnCode::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataNameAndSizeAndReturnCode::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataNameAndSizeAndReturnCode::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 DataNameAndSizeAndReturnCode::size() const {
  return size_;
}
inline void DataNameAndSizeAndReturnCode::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// required bytes serialised_return_code = 3;
inline bool DataNameAndSizeAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataNameAndSizeAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataNameAndSizeAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataNameAndSizeAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& DataNameAndSizeAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void DataNameAndSizeAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameAndSizeAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameAndSizeAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndSizeAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* DataNameAndSizeAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndSizeAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataNamesAndReturnCode

// repeated bytes serialised_name = 1;
inline int DataNamesAndReturnCode::serialised_name_size() const {
  return serialised_name_.size();
}
inline void DataNamesAndReturnCode::clear_serialised_name() {
  serialised_name_.Clear();
}
inline const ::std::string& DataNamesAndReturnCode::serialised_name(int index) const {
  return serialised_name_.Get(index);
}
inline ::std::string* DataNamesAndReturnCode::mutable_serialised_name(int index) {
  return serialised_name_.Mutable(index);
}
inline void DataNamesAndReturnCode::set_serialised_name(int index, const ::std::string& value) {
  serialised_name_.Mutable(index)->assign(value);
}
inline void DataNamesAndReturnCode::set_serialised_name(int index, const char* value) {
  serialised_name_.Mutable(index)->assign(value);
}
inline void DataNamesAndReturnCode::set_serialised_name(int index, const void* value, size_t size) {
  serialised_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNamesAndReturnCode::add_serialised_name() {
  return serialised_name_.Add();
}
inline void DataNamesAndReturnCode::add_serialised_name(const ::std::string& value) {
  serialised_name_.Add()->assign(value);
}
inline void DataNamesAndReturnCode::add_serialised_name(const char* value) {
  serialised_name_.Add()->assign(value);
}
inline void DataNamesAndReturnCode::add_serialised_name(const void* value, size_t size) {
  serialised_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataNamesAndReturnCode::serialised_name() const {
  return serialised_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataNamesAndReturnCode::mutable_serialised_name() {
  return &serialised_name_;
}

// required bytes serialised_return_code = 2;
inline bool DataNamesAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataNamesAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataNamesAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataNamesAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& DataNamesAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void DataNamesAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNamesAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNamesAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNamesAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* DataNamesAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNamesAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataNameVersionAndReturnCode

// required bytes serialised_data_name_and_version = 1;
inline bool DataNameVersionAndReturnCode::has_serialised_data_name_and_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataNameVersionAndReturnCode::set_has_serialised_data_name_and_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataNameVersionAndReturnCode::clear_has_serialised_data_name_and_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataNameVersionAndReturnCode::clear_serialised_data_name_and_version() {
  if (serialised_data_name_and_version_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_version_->clear();
  }
  clear_has_serialised_data_name_and_version();
}
inline const ::std::string& DataNameVersionAndReturnCode::serialised_data_name_and_version() const {
  return *serialised_data_name_and_version_;
}
inline void DataNameVersionAndReturnCode::set_serialised_data_name_and_version(const ::std::string& value) {
  set_has_serialised_data_name_and_version();
  if (serialised_data_name_and_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_version_ = new ::std::string;
  }
  serialised_data_name_and_version_->assign(value);
}
inline void DataNameVersionAndReturnCode::set_serialised_data_name_and_version(const char* value) {
  set_has_serialised_data_name_and_version();
  if (serialised_data_name_and_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_version_ = new ::std::string;
  }
  serialised_data_name_and_version_->assign(value);
}
inline void DataNameVersionAndReturnCode::set_serialised_data_name_and_version(const void* value, size_t size) {
  set_has_serialised_data_name_and_version();
  if (serialised_data_name_and_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_version_ = new ::std::string;
  }
  serialised_data_name_and_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameVersionAndReturnCode::mutable_serialised_data_name_and_version() {
  set_has_serialised_data_name_and_version();
  if (serialised_data_name_and_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_version_ = new ::std::string;
  }
  return serialised_data_name_and_version_;
}
inline ::std::string* DataNameVersionAndReturnCode::release_serialised_data_name_and_version() {
  clear_has_serialised_data_name_and_version();
  if (serialised_data_name_and_version_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_data_name_and_version_;
    serialised_data_name_and_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameVersionAndReturnCode::set_allocated_serialised_data_name_and_version(::std::string* serialised_data_name_and_version) {
  if (serialised_data_name_and_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_name_and_version_;
  }
  if (serialised_data_name_and_version) {
    set_has_serialised_data_name_and_version();
    serialised_data_name_and_version_ = serialised_data_name_and_version;
  } else {
    clear_has_serialised_data_name_and_version();
    serialised_data_name_and_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes serialised_return_code = 2;
inline bool DataNameVersionAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataNameVersionAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataNameVersionAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataNameVersionAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& DataNameVersionAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void DataNameVersionAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameVersionAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameVersionAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameVersionAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* DataNameVersionAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameVersionAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataNameOldNewVersionAndReturnCode

// required bytes serialised_data_name_old_new_version = 1;
inline bool DataNameOldNewVersionAndReturnCode::has_serialised_data_name_old_new_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataNameOldNewVersionAndReturnCode::set_has_serialised_data_name_old_new_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataNameOldNewVersionAndReturnCode::clear_has_serialised_data_name_old_new_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataNameOldNewVersionAndReturnCode::clear_serialised_data_name_old_new_version() {
  if (serialised_data_name_old_new_version_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_old_new_version_->clear();
  }
  clear_has_serialised_data_name_old_new_version();
}
inline const ::std::string& DataNameOldNewVersionAndReturnCode::serialised_data_name_old_new_version() const {
  return *serialised_data_name_old_new_version_;
}
inline void DataNameOldNewVersionAndReturnCode::set_serialised_data_name_old_new_version(const ::std::string& value) {
  set_has_serialised_data_name_old_new_version();
  if (serialised_data_name_old_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_old_new_version_ = new ::std::string;
  }
  serialised_data_name_old_new_version_->assign(value);
}
inline void DataNameOldNewVersionAndReturnCode::set_serialised_data_name_old_new_version(const char* value) {
  set_has_serialised_data_name_old_new_version();
  if (serialised_data_name_old_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_old_new_version_ = new ::std::string;
  }
  serialised_data_name_old_new_version_->assign(value);
}
inline void DataNameOldNewVersionAndReturnCode::set_serialised_data_name_old_new_version(const void* value, size_t size) {
  set_has_serialised_data_name_old_new_version();
  if (serialised_data_name_old_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_old_new_version_ = new ::std::string;
  }
  serialised_data_name_old_new_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameOldNewVersionAndReturnCode::mutable_serialised_data_name_old_new_version() {
  set_has_serialised_data_name_old_new_version();
  if (serialised_data_name_old_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_old_new_version_ = new ::std::string;
  }
  return serialised_data_name_old_new_version_;
}
inline ::std::string* DataNameOldNewVersionAndReturnCode::release_serialised_data_name_old_new_version() {
  clear_has_serialised_data_name_old_new_version();
  if (serialised_data_name_old_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_data_name_old_new_version_;
    serialised_data_name_old_new_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameOldNewVersionAndReturnCode::set_allocated_serialised_data_name_old_new_version(::std::string* serialised_data_name_old_new_version) {
  if (serialised_data_name_old_new_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_name_old_new_version_;
  }
  if (serialised_data_name_old_new_version) {
    set_has_serialised_data_name_old_new_version();
    serialised_data_name_old_new_version_ = serialised_data_name_old_new_version;
  } else {
    clear_has_serialised_data_name_old_new_version();
    serialised_data_name_old_new_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes serialised_return_code = 2;
inline bool DataNameOldNewVersionAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataNameOldNewVersionAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataNameOldNewVersionAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataNameOldNewVersionAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& DataNameOldNewVersionAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void DataNameOldNewVersionAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameOldNewVersionAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameOldNewVersionAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameOldNewVersionAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* DataNameOldNewVersionAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameOldNewVersionAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataAndReturnCode

// required bytes serialised_data_name_and_content = 1;
inline bool DataAndReturnCode::has_serialised_data_name_and_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataAndReturnCode::set_has_serialised_data_name_and_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataAndReturnCode::clear_has_serialised_data_name_and_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataAndReturnCode::clear_serialised_data_name_and_content() {
  if (serialised_data_name_and_content_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_content_->clear();
  }
  clear_has_serialised_data_name_and_content();
}
inline const ::std::string& DataAndReturnCode::serialised_data_name_and_content() const {
  return *serialised_data_name_and_content_;
}
inline void DataAndReturnCode::set_serialised_data_name_and_content(const ::std::string& value) {
  set_has_serialised_data_name_and_content();
  if (serialised_data_name_and_content_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_content_ = new ::std::string;
  }
  serialised_data_name_and_content_->assign(value);
}
inline void DataAndReturnCode::set_serialised_data_name_and_content(const char* value) {
  set_has_serialised_data_name_and_content();
  if (serialised_data_name_and_content_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_content_ = new ::std::string;
  }
  serialised_data_name_and_content_->assign(value);
}
inline void DataAndReturnCode::set_serialised_data_name_and_content(const void* value, size_t size) {
  set_has_serialised_data_name_and_content();
  if (serialised_data_name_and_content_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_content_ = new ::std::string;
  }
  serialised_data_name_and_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataAndReturnCode::mutable_serialised_data_name_and_content() {
  set_has_serialised_data_name_and_content();
  if (serialised_data_name_and_content_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_content_ = new ::std::string;
  }
  return serialised_data_name_and_content_;
}
inline ::std::string* DataAndReturnCode::release_serialised_data_name_and_content() {
  clear_has_serialised_data_name_and_content();
  if (serialised_data_name_and_content_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_data_name_and_content_;
    serialised_data_name_and_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataAndReturnCode::set_allocated_serialised_data_name_and_content(::std::string* serialised_data_name_and_content) {
  if (serialised_data_name_and_content_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_name_and_content_;
  }
  if (serialised_data_name_and_content) {
    set_has_serialised_data_name_and_content();
    serialised_data_name_and_content_ = serialised_data_name_and_content;
  } else {
    clear_has_serialised_data_name_and_content();
    serialised_data_name_and_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes serialised_return_code = 2;
inline bool DataAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& DataAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void DataAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* DataAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataNameAndContentOrReturnCode

// required bytes serialised_name = 1;
inline bool DataNameAndContentOrReturnCode::has_serialised_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataNameAndContentOrReturnCode::set_has_serialised_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataNameAndContentOrReturnCode::clear_has_serialised_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataNameAndContentOrReturnCode::clear_serialised_name() {
  if (serialised_name_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_->clear();
  }
  clear_has_serialised_name();
}
inline const ::std::string& DataNameAndContentOrReturnCode::serialised_name() const {
  return *serialised_name_;
}
inline void DataNameAndContentOrReturnCode::set_serialised_name(const ::std::string& value) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(value);
}
inline void DataNameAndContentOrReturnCode::set_serialised_name(const char* value) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(value);
}
inline void DataNameAndContentOrReturnCode::set_serialised_name(const void* value, size_t size) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndContentOrReturnCode::mutable_serialised_name() {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  return serialised_name_;
}
inline ::std::string* DataNameAndContentOrReturnCode::release_serialised_name() {
  clear_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_name_;
    serialised_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndContentOrReturnCode::set_allocated_serialised_name(::std::string* serialised_name) {
  if (serialised_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_name_;
  }
  if (serialised_name) {
    set_has_serialised_name();
    serialised_name_ = serialised_name;
  } else {
    clear_has_serialised_name();
    serialised_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bytes content = 2;
inline bool DataNameAndContentOrReturnCode::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataNameAndContentOrReturnCode::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataNameAndContentOrReturnCode::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataNameAndContentOrReturnCode::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyString()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DataNameAndContentOrReturnCode::content() const {
  return *content_;
}
inline void DataNameAndContentOrReturnCode::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DataNameAndContentOrReturnCode::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DataNameAndContentOrReturnCode::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndContentOrReturnCode::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* DataNameAndContentOrReturnCode::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndContentOrReturnCode::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyString()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bytes serialised_return_code = 3;
inline bool DataNameAndContentOrReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataNameAndContentOrReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataNameAndContentOrReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataNameAndContentOrReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& DataNameAndContentOrReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void DataNameAndContentOrReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameAndContentOrReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameAndContentOrReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndContentOrReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* DataNameAndContentOrReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndContentOrReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// StructuredDataNameAndContentOrReturnCode

// optional bytes serialised_structured_data = 1;
inline bool StructuredDataNameAndContentOrReturnCode::has_serialised_structured_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StructuredDataNameAndContentOrReturnCode::set_has_serialised_structured_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StructuredDataNameAndContentOrReturnCode::clear_has_serialised_structured_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StructuredDataNameAndContentOrReturnCode::clear_serialised_structured_data() {
  if (serialised_structured_data_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_->clear();
  }
  clear_has_serialised_structured_data();
}
inline const ::std::string& StructuredDataNameAndContentOrReturnCode::serialised_structured_data() const {
  return *serialised_structured_data_;
}
inline void StructuredDataNameAndContentOrReturnCode::set_serialised_structured_data(const ::std::string& value) {
  set_has_serialised_structured_data();
  if (serialised_structured_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_ = new ::std::string;
  }
  serialised_structured_data_->assign(value);
}
inline void StructuredDataNameAndContentOrReturnCode::set_serialised_structured_data(const char* value) {
  set_has_serialised_structured_data();
  if (serialised_structured_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_ = new ::std::string;
  }
  serialised_structured_data_->assign(value);
}
inline void StructuredDataNameAndContentOrReturnCode::set_serialised_structured_data(const void* value, size_t size) {
  set_has_serialised_structured_data();
  if (serialised_structured_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_ = new ::std::string;
  }
  serialised_structured_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StructuredDataNameAndContentOrReturnCode::mutable_serialised_structured_data() {
  set_has_serialised_structured_data();
  if (serialised_structured_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_ = new ::std::string;
  }
  return serialised_structured_data_;
}
inline ::std::string* StructuredDataNameAndContentOrReturnCode::release_serialised_structured_data() {
  clear_has_serialised_structured_data();
  if (serialised_structured_data_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_structured_data_;
    serialised_structured_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void StructuredDataNameAndContentOrReturnCode::set_allocated_serialised_structured_data(::std::string* serialised_structured_data) {
  if (serialised_structured_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_structured_data_;
  }
  if (serialised_structured_data) {
    set_has_serialised_structured_data();
    serialised_structured_data_ = serialised_structured_data;
  } else {
    clear_has_serialised_structured_data();
    serialised_structured_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bytes serialised_data_name_and_return_code = 2;
inline bool StructuredDataNameAndContentOrReturnCode::has_serialised_data_name_and_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StructuredDataNameAndContentOrReturnCode::set_has_serialised_data_name_and_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StructuredDataNameAndContentOrReturnCode::clear_has_serialised_data_name_and_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StructuredDataNameAndContentOrReturnCode::clear_serialised_data_name_and_return_code() {
  if (serialised_data_name_and_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_return_code_->clear();
  }
  clear_has_serialised_data_name_and_return_code();
}
inline const ::std::string& StructuredDataNameAndContentOrReturnCode::serialised_data_name_and_return_code() const {
  return *serialised_data_name_and_return_code_;
}
inline void StructuredDataNameAndContentOrReturnCode::set_serialised_data_name_and_return_code(const ::std::string& value) {
  set_has_serialised_data_name_and_return_code();
  if (serialised_data_name_and_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_return_code_ = new ::std::string;
  }
  serialised_data_name_and_return_code_->assign(value);
}
inline void StructuredDataNameAndContentOrReturnCode::set_serialised_data_name_and_return_code(const char* value) {
  set_has_serialised_data_name_and_return_code();
  if (serialised_data_name_and_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_return_code_ = new ::std::string;
  }
  serialised_data_name_and_return_code_->assign(value);
}
inline void StructuredDataNameAndContentOrReturnCode::set_serialised_data_name_and_return_code(const void* value, size_t size) {
  set_has_serialised_data_name_and_return_code();
  if (serialised_data_name_and_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_return_code_ = new ::std::string;
  }
  serialised_data_name_and_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StructuredDataNameAndContentOrReturnCode::mutable_serialised_data_name_and_return_code() {
  set_has_serialised_data_name_and_return_code();
  if (serialised_data_name_and_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_name_and_return_code_ = new ::std::string;
  }
  return serialised_data_name_and_return_code_;
}
inline ::std::string* StructuredDataNameAndContentOrReturnCode::release_serialised_data_name_and_return_code() {
  clear_has_serialised_data_name_and_return_code();
  if (serialised_data_name_and_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_data_name_and_return_code_;
    serialised_data_name_and_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void StructuredDataNameAndContentOrReturnCode::set_allocated_serialised_data_name_and_return_code(::std::string* serialised_data_name_and_return_code) {
  if (serialised_data_name_and_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_name_and_return_code_;
  }
  if (serialised_data_name_and_return_code) {
    set_has_serialised_data_name_and_return_code();
    serialised_data_name_and_return_code_ = serialised_data_name_and_return_code;
  } else {
    clear_has_serialised_data_name_and_return_code();
    serialised_data_name_and_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataNameAndSizeAndSpaceAndReturnCode

// required bytes serialised_name = 1;
inline bool DataNameAndSizeAndSpaceAndReturnCode::has_serialised_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_has_serialised_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::clear_has_serialised_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::clear_serialised_name() {
  if (serialised_name_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_->clear();
  }
  clear_has_serialised_name();
}
inline const ::std::string& DataNameAndSizeAndSpaceAndReturnCode::serialised_name() const {
  return *serialised_name_;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_serialised_name(const ::std::string& value) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(value);
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_serialised_name(const char* value) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(value);
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_serialised_name(const void* value, size_t size) {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  serialised_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndSizeAndSpaceAndReturnCode::mutable_serialised_name() {
  set_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_name_ = new ::std::string;
  }
  return serialised_name_;
}
inline ::std::string* DataNameAndSizeAndSpaceAndReturnCode::release_serialised_name() {
  clear_has_serialised_name();
  if (serialised_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_name_;
    serialised_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_allocated_serialised_name(::std::string* serialised_name) {
  if (serialised_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_name_;
  }
  if (serialised_name) {
    set_has_serialised_name();
    serialised_name_ = serialised_name;
  } else {
    clear_has_serialised_name();
    serialised_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required uint64 size = 2;
inline bool DataNameAndSizeAndSpaceAndReturnCode::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 DataNameAndSizeAndSpaceAndReturnCode::size() const {
  return size_;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// required int64 space = 3;
inline bool DataNameAndSizeAndSpaceAndReturnCode::has_space() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_has_space() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::clear_has_space() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::clear_space() {
  space_ = GOOGLE_LONGLONG(0);
  clear_has_space();
}
inline ::google::protobuf::int64 DataNameAndSizeAndSpaceAndReturnCode::space() const {
  return space_;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_space(::google::protobuf::int64 value) {
  set_has_space();
  space_ = value;
}

// required bytes serialised_return_code = 4;
inline bool DataNameAndSizeAndSpaceAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& DataNameAndSizeAndSpaceAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataNameAndSizeAndSpaceAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* DataNameAndSizeAndSpaceAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataNameAndSizeAndSpaceAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// TipOfTreeAndReturnCode

// optional bytes serialised_tip_of_tree = 1;
inline bool TipOfTreeAndReturnCode::has_serialised_tip_of_tree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TipOfTreeAndReturnCode::set_has_serialised_tip_of_tree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TipOfTreeAndReturnCode::clear_has_serialised_tip_of_tree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TipOfTreeAndReturnCode::clear_serialised_tip_of_tree() {
  if (serialised_tip_of_tree_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_tip_of_tree_->clear();
  }
  clear_has_serialised_tip_of_tree();
}
inline const ::std::string& TipOfTreeAndReturnCode::serialised_tip_of_tree() const {
  return *serialised_tip_of_tree_;
}
inline void TipOfTreeAndReturnCode::set_serialised_tip_of_tree(const ::std::string& value) {
  set_has_serialised_tip_of_tree();
  if (serialised_tip_of_tree_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_tip_of_tree_ = new ::std::string;
  }
  serialised_tip_of_tree_->assign(value);
}
inline void TipOfTreeAndReturnCode::set_serialised_tip_of_tree(const char* value) {
  set_has_serialised_tip_of_tree();
  if (serialised_tip_of_tree_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_tip_of_tree_ = new ::std::string;
  }
  serialised_tip_of_tree_->assign(value);
}
inline void TipOfTreeAndReturnCode::set_serialised_tip_of_tree(const void* value, size_t size) {
  set_has_serialised_tip_of_tree();
  if (serialised_tip_of_tree_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_tip_of_tree_ = new ::std::string;
  }
  serialised_tip_of_tree_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TipOfTreeAndReturnCode::mutable_serialised_tip_of_tree() {
  set_has_serialised_tip_of_tree();
  if (serialised_tip_of_tree_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_tip_of_tree_ = new ::std::string;
  }
  return serialised_tip_of_tree_;
}
inline ::std::string* TipOfTreeAndReturnCode::release_serialised_tip_of_tree() {
  clear_has_serialised_tip_of_tree();
  if (serialised_tip_of_tree_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_tip_of_tree_;
    serialised_tip_of_tree_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void TipOfTreeAndReturnCode::set_allocated_serialised_tip_of_tree(::std::string* serialised_tip_of_tree) {
  if (serialised_tip_of_tree_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_tip_of_tree_;
  }
  if (serialised_tip_of_tree) {
    set_has_serialised_tip_of_tree();
    serialised_tip_of_tree_ = serialised_tip_of_tree;
  } else {
    clear_has_serialised_tip_of_tree();
    serialised_tip_of_tree_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes serialised_return_code = 2;
inline bool TipOfTreeAndReturnCode::has_serialised_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TipOfTreeAndReturnCode::set_has_serialised_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TipOfTreeAndReturnCode::clear_has_serialised_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TipOfTreeAndReturnCode::clear_serialised_return_code() {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_->clear();
  }
  clear_has_serialised_return_code();
}
inline const ::std::string& TipOfTreeAndReturnCode::serialised_return_code() const {
  return *serialised_return_code_;
}
inline void TipOfTreeAndReturnCode::set_serialised_return_code(const ::std::string& value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void TipOfTreeAndReturnCode::set_serialised_return_code(const char* value) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(value);
}
inline void TipOfTreeAndReturnCode::set_serialised_return_code(const void* value, size_t size) {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  serialised_return_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TipOfTreeAndReturnCode::mutable_serialised_return_code() {
  set_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_return_code_ = new ::std::string;
  }
  return serialised_return_code_;
}
inline ::std::string* TipOfTreeAndReturnCode::release_serialised_return_code() {
  clear_has_serialised_return_code();
  if (serialised_return_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_return_code_;
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void TipOfTreeAndReturnCode::set_allocated_serialised_return_code(::std::string* serialised_return_code) {
  if (serialised_return_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_return_code_;
  }
  if (serialised_return_code) {
    set_has_serialised_return_code();
    serialised_return_code_ = serialised_return_code;
  } else {
    clear_has_serialised_return_code();
    serialised_return_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace nfs_client
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fnfs_2fclient_2fmessages_2eproto__INCLUDED
