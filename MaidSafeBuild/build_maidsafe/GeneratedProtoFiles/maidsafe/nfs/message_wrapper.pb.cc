// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/nfs/message_wrapper.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/nfs/message_wrapper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace nfs {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto() {
  delete MessageWrapper::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MessageWrapper::default_instance_ = new MessageWrapper();
  MessageWrapper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto {
  StaticDescriptorInitializer_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto() {
    protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MessageWrapper::kActionFieldNumber;
const int MessageWrapper::kSourcePersonaFieldNumber;
const int MessageWrapper::kDestinationPersonaFieldNumber;
const int MessageWrapper::kMessageIdFieldNumber;
const int MessageWrapper::kSerialisedContentsFieldNumber;
#endif  // !_MSC_VER

MessageWrapper::MessageWrapper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessageWrapper::InitAsDefaultInstance() {
}

MessageWrapper::MessageWrapper(const MessageWrapper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessageWrapper::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  source_persona_ = 0;
  destination_persona_ = 0;
  message_id_ = 0;
  serialised_contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageWrapper::~MessageWrapper() {
  SharedDtor();
}

void MessageWrapper::SharedDtor() {
  if (serialised_contents_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_contents_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessageWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageWrapper& MessageWrapper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5fwrapper_2eproto();
#endif
  return *default_instance_;
}

MessageWrapper* MessageWrapper::default_instance_ = NULL;

MessageWrapper* MessageWrapper::New() const {
  return new MessageWrapper;
}

void MessageWrapper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    source_persona_ = 0;
    destination_persona_ = 0;
    message_id_ = 0;
    if (has_serialised_contents()) {
      if (serialised_contents_ != &::google::protobuf::internal::GetEmptyString()) {
        serialised_contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessageWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_persona;
        break;
      }

      // required int32 source_persona = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_persona:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_persona_)));
          set_has_source_persona();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destination_persona;
        break;
      }

      // required int32 destination_persona = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_persona:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_persona_)));
          set_has_destination_persona();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_message_id;
        break;
      }

      // required int32 message_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serialised_contents;
        break;
      }

      // required bytes serialised_contents = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // required int32 source_persona = 2;
  if (has_source_persona()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source_persona(), output);
  }

  // required int32 destination_persona = 3;
  if (has_destination_persona()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->destination_persona(), output);
  }

  // required int32 message_id = 4;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->message_id(), output);
  }

  // required bytes serialised_contents = 5;
  if (has_serialised_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->serialised_contents(), output);
  }

}

int MessageWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // required int32 source_persona = 2;
    if (has_source_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_persona());
    }

    // required int32 destination_persona = 3;
    if (has_destination_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destination_persona());
    }

    // required int32 message_id = 4;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // required bytes serialised_contents = 5;
    if (has_serialised_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_contents());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageWrapper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageWrapper*>(&from));
}

void MessageWrapper::MergeFrom(const MessageWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_source_persona()) {
      set_source_persona(from.source_persona());
    }
    if (from.has_destination_persona()) {
      set_destination_persona(from.destination_persona());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_serialised_contents()) {
      set_serialised_contents(from.serialised_contents());
    }
  }
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MessageWrapper::Swap(MessageWrapper* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(source_persona_, other->source_persona_);
    std::swap(destination_persona_, other->destination_persona_);
    std::swap(message_id_, other->message_id_);
    std::swap(serialised_contents_, other->serialised_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessageWrapper::GetTypeName() const {
  return "maidsafe.nfs.protobuf.MessageWrapper";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace nfs
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
