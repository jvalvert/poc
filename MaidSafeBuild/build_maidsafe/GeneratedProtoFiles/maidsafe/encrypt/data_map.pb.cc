// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/encrypt/data_map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/encrypt/data_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace encrypt {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fencrypt_2fdata_5fmap_2eproto() {
  delete ChunkDetails::default_instance_;
  delete DataMap::default_instance_;
  delete EncryptedDataMap::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ChunkDetails::default_instance_ = new ChunkDetails();
  DataMap::default_instance_ = new DataMap();
  EncryptedDataMap::default_instance_ = new EncryptedDataMap();
  ChunkDetails::default_instance_->InitAsDefaultInstance();
  DataMap::default_instance_->InitAsDefaultInstance();
  EncryptedDataMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fencrypt_2fdata_5fmap_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fencrypt_2fdata_5fmap_2eproto {
  StaticDescriptorInitializer_maidsafe_2fencrypt_2fdata_5fmap_2eproto() {
    protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fencrypt_2fdata_5fmap_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ChunkDetails::kHashFieldNumber;
const int ChunkDetails::kPreHashFieldNumber;
const int ChunkDetails::kSizeFieldNumber;
const int ChunkDetails::kStorageStateFieldNumber;
#endif  // !_MSC_VER

ChunkDetails::ChunkDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChunkDetails::InitAsDefaultInstance() {
}

ChunkDetails::ChunkDetails(const ChunkDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkDetails::SharedCtor() {
  _cached_size_ = 0;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  pre_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  size_ = 0u;
  storage_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkDetails::~ChunkDetails() {
  SharedDtor();
}

void ChunkDetails::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete hash_;
  }
  if (pre_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pre_hash_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChunkDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChunkDetails& ChunkDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
#endif
  return *default_instance_;
}

ChunkDetails* ChunkDetails::default_instance_ = NULL;

ChunkDetails* ChunkDetails::New() const {
  return new ChunkDetails;
}

void ChunkDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::GetEmptyString()) {
        hash_->clear();
      }
    }
    if (has_pre_hash()) {
      if (pre_hash_ != &::google::protobuf::internal::GetEmptyString()) {
        pre_hash_->clear();
      }
    }
    size_ = 0u;
    storage_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ChunkDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pre_hash;
        break;
      }

      // required bytes pre_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pre_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required uint32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_storage_state;
        break;
      }

      // required uint32 storage_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_state_)));
          set_has_storage_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->hash(), output);
  }

  // required bytes pre_hash = 2;
  if (has_pre_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->pre_hash(), output);
  }

  // required uint32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  // required uint32 storage_state = 5;
  if (has_storage_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->storage_state(), output);
  }

}

int ChunkDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

    // required bytes pre_hash = 2;
    if (has_pre_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pre_hash());
    }

    // required uint32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // required uint32 storage_state = 5;
    if (has_storage_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_state());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChunkDetails*>(&from));
}

void ChunkDetails::MergeFrom(const ChunkDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_pre_hash()) {
      set_pre_hash(from.pre_hash());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_storage_state()) {
      set_storage_state(from.storage_state());
    }
  }
}

void ChunkDetails::CopyFrom(const ChunkDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ChunkDetails::Swap(ChunkDetails* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(pre_hash_, other->pre_hash_);
    std::swap(size_, other->size_);
    std::swap(storage_state_, other->storage_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChunkDetails::GetTypeName() const {
  return "maidsafe.encrypt.protobuf.ChunkDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int DataMap::kSelfEncryptionVersionFieldNumber;
const int DataMap::kChunkDetailsFieldNumber;
const int DataMap::kContentFieldNumber;
#endif  // !_MSC_VER

DataMap::DataMap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataMap::InitAsDefaultInstance() {
}

DataMap::DataMap(const DataMap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataMap::SharedCtor() {
  _cached_size_ = 0;
  self_encryption_version_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMap::~DataMap() {
  SharedDtor();
}

void DataMap::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyString()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataMap& DataMap::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
#endif
  return *default_instance_;
}

DataMap* DataMap::default_instance_ = NULL;

DataMap* DataMap::New() const {
  return new DataMap;
}

void DataMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    self_encryption_version_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyString()) {
        content_->clear();
      }
    }
  }
  chunk_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 self_encryption_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_encryption_version_)));
          set_has_self_encryption_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chunk_details;
        break;
      }

      // repeated .maidsafe.encrypt.protobuf.ChunkDetails chunk_details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunk_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunk_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chunk_details;
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 self_encryption_version = 1;
  if (has_self_encryption_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->self_encryption_version(), output);
  }

  // repeated .maidsafe.encrypt.protobuf.ChunkDetails chunk_details = 2;
  for (int i = 0; i < this->chunk_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->chunk_details(i), output);
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }

}

int DataMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 self_encryption_version = 1;
    if (has_self_encryption_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_encryption_version());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  // repeated .maidsafe.encrypt.protobuf.ChunkDetails chunk_details = 2;
  total_size += 1 * this->chunk_details_size();
  for (int i = 0; i < this->chunk_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunk_details(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataMap*>(&from));
}

void DataMap::MergeFrom(const DataMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunk_details_.MergeFrom(from.chunk_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_encryption_version()) {
      set_self_encryption_version(from.self_encryption_version());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void DataMap::CopyFrom(const DataMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < chunk_details_size(); i++) {
    if (!this->chunk_details(i).IsInitialized()) return false;
  }
  return true;
}

void DataMap::Swap(DataMap* other) {
  if (other != this) {
    std::swap(self_encryption_version_, other->self_encryption_version_);
    chunk_details_.Swap(&other->chunk_details_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataMap::GetTypeName() const {
  return "maidsafe.encrypt.protobuf.DataMap";
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptedDataMap::kDataMapEncryptionVersionFieldNumber;
const int EncryptedDataMap::kContentsFieldNumber;
#endif  // !_MSC_VER

EncryptedDataMap::EncryptedDataMap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EncryptedDataMap::InitAsDefaultInstance() {
}

EncryptedDataMap::EncryptedDataMap(const EncryptedDataMap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EncryptedDataMap::SharedCtor() {
  _cached_size_ = 0;
  data_map_encryption_version_ = 0u;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedDataMap::~EncryptedDataMap() {
  SharedDtor();
}

void EncryptedDataMap::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::GetEmptyString()) {
    delete contents_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EncryptedDataMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EncryptedDataMap& EncryptedDataMap::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
#endif
  return *default_instance_;
}

EncryptedDataMap* EncryptedDataMap::default_instance_ = NULL;

EncryptedDataMap* EncryptedDataMap::New() const {
  return new EncryptedDataMap;
}

void EncryptedDataMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_map_encryption_version_ = 0u;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::GetEmptyString()) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EncryptedDataMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_map_encryption_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_map_encryption_version_)));
          set_has_data_map_encryption_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // required bytes contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncryptedDataMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 data_map_encryption_version = 1;
  if (has_data_map_encryption_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_map_encryption_version(), output);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->contents(), output);
  }

}

int EncryptedDataMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_map_encryption_version = 1;
    if (has_data_map_encryption_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_map_encryption_version());
    }

    // required bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedDataMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncryptedDataMap*>(&from));
}

void EncryptedDataMap::MergeFrom(const EncryptedDataMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_map_encryption_version()) {
      set_data_map_encryption_version(from.data_map_encryption_version());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
}

void EncryptedDataMap::CopyFrom(const EncryptedDataMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedDataMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EncryptedDataMap::Swap(EncryptedDataMap* other) {
  if (other != this) {
    std::swap(data_map_encryption_version_, other->data_map_encryption_version_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EncryptedDataMap::GetTypeName() const {
  return "maidsafe.encrypt.protobuf.EncryptedDataMap";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace encrypt
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
