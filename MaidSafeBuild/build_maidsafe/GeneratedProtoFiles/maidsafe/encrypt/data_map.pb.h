// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/encrypt/data_map.proto

#ifndef PROTOBUF_maidsafe_2fencrypt_2fdata_5fmap_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fencrypt_2fdata_5fmap_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace encrypt {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
void protobuf_AssignDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
void protobuf_ShutdownFile_maidsafe_2fencrypt_2fdata_5fmap_2eproto();

class ChunkDetails;
class DataMap;
class EncryptedDataMap;

// ===================================================================

class ChunkDetails : public ::google::protobuf::MessageLite {
 public:
  ChunkDetails();
  virtual ~ChunkDetails();

  ChunkDetails(const ChunkDetails& from);

  inline ChunkDetails& operator=(const ChunkDetails& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChunkDetails& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChunkDetails* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChunkDetails* other);

  // implements Message ----------------------------------------------

  ChunkDetails* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChunkDetails& from);
  void MergeFrom(const ChunkDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes hash = 1;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 1;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const void* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  inline void set_allocated_hash(::std::string* hash);

  // required bytes pre_hash = 2;
  inline bool has_pre_hash() const;
  inline void clear_pre_hash();
  static const int kPreHashFieldNumber = 2;
  inline const ::std::string& pre_hash() const;
  inline void set_pre_hash(const ::std::string& value);
  inline void set_pre_hash(const char* value);
  inline void set_pre_hash(const void* value, size_t size);
  inline ::std::string* mutable_pre_hash();
  inline ::std::string* release_pre_hash();
  inline void set_allocated_pre_hash(::std::string* pre_hash);

  // required uint32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // required uint32 storage_state = 5;
  inline bool has_storage_state() const;
  inline void clear_storage_state();
  static const int kStorageStateFieldNumber = 5;
  inline ::google::protobuf::uint32 storage_state() const;
  inline void set_storage_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:maidsafe.encrypt.protobuf.ChunkDetails)
 private:
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_pre_hash();
  inline void clear_has_pre_hash();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_storage_state();
  inline void clear_has_storage_state();

  ::std::string* hash_;
  ::std::string* pre_hash_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 storage_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fencrypt_2fdata_5fmap_2eproto();

  void InitAsDefaultInstance();
  static ChunkDetails* default_instance_;
};
// -------------------------------------------------------------------

class DataMap : public ::google::protobuf::MessageLite {
 public:
  DataMap();
  virtual ~DataMap();

  DataMap(const DataMap& from);

  inline DataMap& operator=(const DataMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataMap& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataMap* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataMap* other);

  // implements Message ----------------------------------------------

  DataMap* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataMap& from);
  void MergeFrom(const DataMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 self_encryption_version = 1;
  inline bool has_self_encryption_version() const;
  inline void clear_self_encryption_version();
  static const int kSelfEncryptionVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 self_encryption_version() const;
  inline void set_self_encryption_version(::google::protobuf::uint32 value);

  // repeated .maidsafe.encrypt.protobuf.ChunkDetails chunk_details = 2;
  inline int chunk_details_size() const;
  inline void clear_chunk_details();
  static const int kChunkDetailsFieldNumber = 2;
  inline const ::maidsafe::encrypt::protobuf::ChunkDetails& chunk_details(int index) const;
  inline ::maidsafe::encrypt::protobuf::ChunkDetails* mutable_chunk_details(int index);
  inline ::maidsafe::encrypt::protobuf::ChunkDetails* add_chunk_details();
  inline const ::google::protobuf::RepeatedPtrField< ::maidsafe::encrypt::protobuf::ChunkDetails >&
      chunk_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::maidsafe::encrypt::protobuf::ChunkDetails >*
      mutable_chunk_details();

  // optional bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:maidsafe.encrypt.protobuf.DataMap)
 private:
  inline void set_has_self_encryption_version();
  inline void clear_has_self_encryption_version();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::RepeatedPtrField< ::maidsafe::encrypt::protobuf::ChunkDetails > chunk_details_;
  ::std::string* content_;
  ::google::protobuf::uint32 self_encryption_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fencrypt_2fdata_5fmap_2eproto();

  void InitAsDefaultInstance();
  static DataMap* default_instance_;
};
// -------------------------------------------------------------------

class EncryptedDataMap : public ::google::protobuf::MessageLite {
 public:
  EncryptedDataMap();
  virtual ~EncryptedDataMap();

  EncryptedDataMap(const EncryptedDataMap& from);

  inline EncryptedDataMap& operator=(const EncryptedDataMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const EncryptedDataMap& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EncryptedDataMap* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EncryptedDataMap* other);

  // implements Message ----------------------------------------------

  EncryptedDataMap* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EncryptedDataMap& from);
  void MergeFrom(const EncryptedDataMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 data_map_encryption_version = 1;
  inline bool has_data_map_encryption_version() const;
  inline void clear_data_map_encryption_version();
  static const int kDataMapEncryptionVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 data_map_encryption_version() const;
  inline void set_data_map_encryption_version(::google::protobuf::uint32 value);

  // required bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:maidsafe.encrypt.protobuf.EncryptedDataMap)
 private:
  inline void set_has_data_map_encryption_version();
  inline void clear_has_data_map_encryption_version();
  inline void set_has_contents();
  inline void clear_has_contents();

  ::std::string* contents_;
  ::google::protobuf::uint32 data_map_encryption_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fencrypt_2fdata_5fmap_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fencrypt_2fdata_5fmap_2eproto();

  void InitAsDefaultInstance();
  static EncryptedDataMap* default_instance_;
};
// ===================================================================


// ===================================================================

// ChunkDetails

// required bytes hash = 1;
inline bool ChunkDetails::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkDetails::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkDetails::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkDetails::clear_hash() {
  if (hash_ != &::google::protobuf::internal::GetEmptyString()) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& ChunkDetails::hash() const {
  return *hash_;
}
inline void ChunkDetails::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyString()) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void ChunkDetails::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyString()) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void ChunkDetails::set_hash(const void* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyString()) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChunkDetails::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyString()) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* ChunkDetails::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ChunkDetails::set_allocated_hash(::std::string* hash) {
  if (hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete hash_;
  }
  if (hash) {
    set_has_hash();
    hash_ = hash;
  } else {
    clear_has_hash();
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes pre_hash = 2;
inline bool ChunkDetails::has_pre_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkDetails::set_has_pre_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkDetails::clear_has_pre_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkDetails::clear_pre_hash() {
  if (pre_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    pre_hash_->clear();
  }
  clear_has_pre_hash();
}
inline const ::std::string& ChunkDetails::pre_hash() const {
  return *pre_hash_;
}
inline void ChunkDetails::set_pre_hash(const ::std::string& value) {
  set_has_pre_hash();
  if (pre_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    pre_hash_ = new ::std::string;
  }
  pre_hash_->assign(value);
}
inline void ChunkDetails::set_pre_hash(const char* value) {
  set_has_pre_hash();
  if (pre_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    pre_hash_ = new ::std::string;
  }
  pre_hash_->assign(value);
}
inline void ChunkDetails::set_pre_hash(const void* value, size_t size) {
  set_has_pre_hash();
  if (pre_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    pre_hash_ = new ::std::string;
  }
  pre_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChunkDetails::mutable_pre_hash() {
  set_has_pre_hash();
  if (pre_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    pre_hash_ = new ::std::string;
  }
  return pre_hash_;
}
inline ::std::string* ChunkDetails::release_pre_hash() {
  clear_has_pre_hash();
  if (pre_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pre_hash_;
    pre_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ChunkDetails::set_allocated_pre_hash(::std::string* pre_hash) {
  if (pre_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pre_hash_;
  }
  if (pre_hash) {
    set_has_pre_hash();
    pre_hash_ = pre_hash;
  } else {
    clear_has_pre_hash();
    pre_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required uint32 size = 3;
inline bool ChunkDetails::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkDetails::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkDetails::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkDetails::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 ChunkDetails::size() const {
  return size_;
}
inline void ChunkDetails::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// required uint32 storage_state = 5;
inline bool ChunkDetails::has_storage_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkDetails::set_has_storage_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChunkDetails::clear_has_storage_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChunkDetails::clear_storage_state() {
  storage_state_ = 0u;
  clear_has_storage_state();
}
inline ::google::protobuf::uint32 ChunkDetails::storage_state() const {
  return storage_state_;
}
inline void ChunkDetails::set_storage_state(::google::protobuf::uint32 value) {
  set_has_storage_state();
  storage_state_ = value;
}

// -------------------------------------------------------------------

// DataMap

// required uint32 self_encryption_version = 1;
inline bool DataMap::has_self_encryption_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataMap::set_has_self_encryption_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataMap::clear_has_self_encryption_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataMap::clear_self_encryption_version() {
  self_encryption_version_ = 0u;
  clear_has_self_encryption_version();
}
inline ::google::protobuf::uint32 DataMap::self_encryption_version() const {
  return self_encryption_version_;
}
inline void DataMap::set_self_encryption_version(::google::protobuf::uint32 value) {
  set_has_self_encryption_version();
  self_encryption_version_ = value;
}

// repeated .maidsafe.encrypt.protobuf.ChunkDetails chunk_details = 2;
inline int DataMap::chunk_details_size() const {
  return chunk_details_.size();
}
inline void DataMap::clear_chunk_details() {
  chunk_details_.Clear();
}
inline const ::maidsafe::encrypt::protobuf::ChunkDetails& DataMap::chunk_details(int index) const {
  return chunk_details_.Get(index);
}
inline ::maidsafe::encrypt::protobuf::ChunkDetails* DataMap::mutable_chunk_details(int index) {
  return chunk_details_.Mutable(index);
}
inline ::maidsafe::encrypt::protobuf::ChunkDetails* DataMap::add_chunk_details() {
  return chunk_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::maidsafe::encrypt::protobuf::ChunkDetails >&
DataMap::chunk_details() const {
  return chunk_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::maidsafe::encrypt::protobuf::ChunkDetails >*
DataMap::mutable_chunk_details() {
  return &chunk_details_;
}

// optional bytes content = 3;
inline bool DataMap::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataMap::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataMap::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataMap::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyString()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DataMap::content() const {
  return *content_;
}
inline void DataMap::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DataMap::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DataMap::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataMap::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* DataMap::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataMap::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyString()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// EncryptedDataMap

// required uint32 data_map_encryption_version = 1;
inline bool EncryptedDataMap::has_data_map_encryption_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedDataMap::set_has_data_map_encryption_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptedDataMap::clear_has_data_map_encryption_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptedDataMap::clear_data_map_encryption_version() {
  data_map_encryption_version_ = 0u;
  clear_has_data_map_encryption_version();
}
inline ::google::protobuf::uint32 EncryptedDataMap::data_map_encryption_version() const {
  return data_map_encryption_version_;
}
inline void EncryptedDataMap::set_data_map_encryption_version(::google::protobuf::uint32 value) {
  set_has_data_map_encryption_version();
  data_map_encryption_version_ = value;
}

// required bytes contents = 2;
inline bool EncryptedDataMap::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptedDataMap::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncryptedDataMap::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncryptedDataMap::clear_contents() {
  if (contents_ != &::google::protobuf::internal::GetEmptyString()) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& EncryptedDataMap::contents() const {
  return *contents_;
}
inline void EncryptedDataMap::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyString()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void EncryptedDataMap::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyString()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void EncryptedDataMap::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyString()) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EncryptedDataMap::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyString()) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* EncryptedDataMap::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void EncryptedDataMap::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::GetEmptyString()) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace encrypt
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fencrypt_2fdata_5fmap_2eproto__INCLUDED
