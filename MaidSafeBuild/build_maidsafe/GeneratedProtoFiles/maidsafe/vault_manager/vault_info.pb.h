// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault_manager/vault_info.proto

#ifndef PROTOBUF_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault_manager {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
void protobuf_AssignDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
void protobuf_ShutdownFile_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();

class VaultInfo;
class VaultManagerConfig;

// ===================================================================

class VaultInfo : public ::google::protobuf::MessageLite {
 public:
  VaultInfo();
  virtual ~VaultInfo();

  VaultInfo(const VaultInfo& from);

  inline VaultInfo& operator=(const VaultInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const VaultInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VaultInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VaultInfo* other);

  // implements Message ----------------------------------------------

  VaultInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VaultInfo& from);
  void MergeFrom(const VaultInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes pmid = 1;
  inline bool has_pmid() const;
  inline void clear_pmid();
  static const int kPmidFieldNumber = 1;
  inline const ::std::string& pmid() const;
  inline void set_pmid(const ::std::string& value);
  inline void set_pmid(const char* value);
  inline void set_pmid(const void* value, size_t size);
  inline ::std::string* mutable_pmid();
  inline ::std::string* release_pmid();
  inline void set_allocated_pmid(::std::string* pmid);

  // required bytes anpmid = 2;
  inline bool has_anpmid() const;
  inline void clear_anpmid();
  static const int kAnpmidFieldNumber = 2;
  inline const ::std::string& anpmid() const;
  inline void set_anpmid(const ::std::string& value);
  inline void set_anpmid(const char* value);
  inline void set_anpmid(const void* value, size_t size);
  inline ::std::string* mutable_anpmid();
  inline ::std::string* release_anpmid();
  inline void set_allocated_anpmid(::std::string* anpmid);

  // required bytes vault_dir = 3;
  inline bool has_vault_dir() const;
  inline void clear_vault_dir();
  static const int kVaultDirFieldNumber = 3;
  inline const ::std::string& vault_dir() const;
  inline void set_vault_dir(const ::std::string& value);
  inline void set_vault_dir(const char* value);
  inline void set_vault_dir(const void* value, size_t size);
  inline ::std::string* mutable_vault_dir();
  inline ::std::string* release_vault_dir();
  inline void set_allocated_vault_dir(::std::string* vault_dir);

  // required bytes label = 4;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 4;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const void* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // optional uint64 max_disk_usage = 5;
  inline bool has_max_disk_usage() const;
  inline void clear_max_disk_usage();
  static const int kMaxDiskUsageFieldNumber = 5;
  inline ::google::protobuf::uint64 max_disk_usage() const;
  inline void set_max_disk_usage(::google::protobuf::uint64 value);

  // optional bytes owner_name = 6;
  inline bool has_owner_name() const;
  inline void clear_owner_name();
  static const int kOwnerNameFieldNumber = 6;
  inline const ::std::string& owner_name() const;
  inline void set_owner_name(const ::std::string& value);
  inline void set_owner_name(const char* value);
  inline void set_owner_name(const void* value, size_t size);
  inline ::std::string* mutable_owner_name();
  inline ::std::string* release_owner_name();
  inline void set_allocated_owner_name(::std::string* owner_name);

  // @@protoc_insertion_point(class_scope:maidsafe.vault_manager.protobuf.VaultInfo)
 private:
  inline void set_has_pmid();
  inline void clear_has_pmid();
  inline void set_has_anpmid();
  inline void clear_has_anpmid();
  inline void set_has_vault_dir();
  inline void clear_has_vault_dir();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_max_disk_usage();
  inline void clear_has_max_disk_usage();
  inline void set_has_owner_name();
  inline void clear_has_owner_name();

  ::std::string* pmid_;
  ::std::string* anpmid_;
  ::std::string* vault_dir_;
  ::std::string* label_;
  ::google::protobuf::uint64 max_disk_usage_;
  ::std::string* owner_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();

  void InitAsDefaultInstance();
  static VaultInfo* default_instance_;
};
// -------------------------------------------------------------------

class VaultManagerConfig : public ::google::protobuf::MessageLite {
 public:
  VaultManagerConfig();
  virtual ~VaultManagerConfig();

  VaultManagerConfig(const VaultManagerConfig& from);

  inline VaultManagerConfig& operator=(const VaultManagerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const VaultManagerConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VaultManagerConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VaultManagerConfig* other);

  // implements Message ----------------------------------------------

  VaultManagerConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VaultManagerConfig& from);
  void MergeFrom(const VaultManagerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes AES256Key = 1;
  inline bool has_aes256key() const;
  inline void clear_aes256key();
  static const int kAES256KeyFieldNumber = 1;
  inline const ::std::string& aes256key() const;
  inline void set_aes256key(const ::std::string& value);
  inline void set_aes256key(const char* value);
  inline void set_aes256key(const void* value, size_t size);
  inline ::std::string* mutable_aes256key();
  inline ::std::string* release_aes256key();
  inline void set_allocated_aes256key(::std::string* aes256key);

  // required bytes AES256IV = 2;
  inline bool has_aes256iv() const;
  inline void clear_aes256iv();
  static const int kAES256IVFieldNumber = 2;
  inline const ::std::string& aes256iv() const;
  inline void set_aes256iv(const ::std::string& value);
  inline void set_aes256iv(const char* value);
  inline void set_aes256iv(const void* value, size_t size);
  inline ::std::string* mutable_aes256iv();
  inline ::std::string* release_aes256iv();
  inline void set_allocated_aes256iv(::std::string* aes256iv);

  // repeated .maidsafe.vault_manager.protobuf.VaultInfo vault_info = 3;
  inline int vault_info_size() const;
  inline void clear_vault_info();
  static const int kVaultInfoFieldNumber = 3;
  inline const ::maidsafe::vault_manager::protobuf::VaultInfo& vault_info(int index) const;
  inline ::maidsafe::vault_manager::protobuf::VaultInfo* mutable_vault_info(int index);
  inline ::maidsafe::vault_manager::protobuf::VaultInfo* add_vault_info();
  inline const ::google::protobuf::RepeatedPtrField< ::maidsafe::vault_manager::protobuf::VaultInfo >&
      vault_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::maidsafe::vault_manager::protobuf::VaultInfo >*
      mutable_vault_info();

  // optional bytes vault_permissions = 4;
  inline bool has_vault_permissions() const;
  inline void clear_vault_permissions();
  static const int kVaultPermissionsFieldNumber = 4;
  inline const ::std::string& vault_permissions() const;
  inline void set_vault_permissions(const ::std::string& value);
  inline void set_vault_permissions(const char* value);
  inline void set_vault_permissions(const void* value, size_t size);
  inline ::std::string* mutable_vault_permissions();
  inline ::std::string* release_vault_permissions();
  inline void set_allocated_vault_permissions(::std::string* vault_permissions);

  // @@protoc_insertion_point(class_scope:maidsafe.vault_manager.protobuf.VaultManagerConfig)
 private:
  inline void set_has_aes256key();
  inline void clear_has_aes256key();
  inline void set_has_aes256iv();
  inline void clear_has_aes256iv();
  inline void set_has_vault_permissions();
  inline void clear_has_vault_permissions();

  ::std::string* aes256key_;
  ::std::string* aes256iv_;
  ::google::protobuf::RepeatedPtrField< ::maidsafe::vault_manager::protobuf::VaultInfo > vault_info_;
  ::std::string* vault_permissions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();

  void InitAsDefaultInstance();
  static VaultManagerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// VaultInfo

// required bytes pmid = 1;
inline bool VaultInfo::has_pmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VaultInfo::set_has_pmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VaultInfo::clear_has_pmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VaultInfo::clear_pmid() {
  if (pmid_ != &::google::protobuf::internal::GetEmptyString()) {
    pmid_->clear();
  }
  clear_has_pmid();
}
inline const ::std::string& VaultInfo::pmid() const {
  return *pmid_;
}
inline void VaultInfo::set_pmid(const ::std::string& value) {
  set_has_pmid();
  if (pmid_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_ = new ::std::string;
  }
  pmid_->assign(value);
}
inline void VaultInfo::set_pmid(const char* value) {
  set_has_pmid();
  if (pmid_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_ = new ::std::string;
  }
  pmid_->assign(value);
}
inline void VaultInfo::set_pmid(const void* value, size_t size) {
  set_has_pmid();
  if (pmid_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_ = new ::std::string;
  }
  pmid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultInfo::mutable_pmid() {
  set_has_pmid();
  if (pmid_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_ = new ::std::string;
  }
  return pmid_;
}
inline ::std::string* VaultInfo::release_pmid() {
  clear_has_pmid();
  if (pmid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pmid_;
    pmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VaultInfo::set_allocated_pmid(::std::string* pmid) {
  if (pmid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_;
  }
  if (pmid) {
    set_has_pmid();
    pmid_ = pmid;
  } else {
    clear_has_pmid();
    pmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes anpmid = 2;
inline bool VaultInfo::has_anpmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VaultInfo::set_has_anpmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VaultInfo::clear_has_anpmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VaultInfo::clear_anpmid() {
  if (anpmid_ != &::google::protobuf::internal::GetEmptyString()) {
    anpmid_->clear();
  }
  clear_has_anpmid();
}
inline const ::std::string& VaultInfo::anpmid() const {
  return *anpmid_;
}
inline void VaultInfo::set_anpmid(const ::std::string& value) {
  set_has_anpmid();
  if (anpmid_ == &::google::protobuf::internal::GetEmptyString()) {
    anpmid_ = new ::std::string;
  }
  anpmid_->assign(value);
}
inline void VaultInfo::set_anpmid(const char* value) {
  set_has_anpmid();
  if (anpmid_ == &::google::protobuf::internal::GetEmptyString()) {
    anpmid_ = new ::std::string;
  }
  anpmid_->assign(value);
}
inline void VaultInfo::set_anpmid(const void* value, size_t size) {
  set_has_anpmid();
  if (anpmid_ == &::google::protobuf::internal::GetEmptyString()) {
    anpmid_ = new ::std::string;
  }
  anpmid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultInfo::mutable_anpmid() {
  set_has_anpmid();
  if (anpmid_ == &::google::protobuf::internal::GetEmptyString()) {
    anpmid_ = new ::std::string;
  }
  return anpmid_;
}
inline ::std::string* VaultInfo::release_anpmid() {
  clear_has_anpmid();
  if (anpmid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = anpmid_;
    anpmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VaultInfo::set_allocated_anpmid(::std::string* anpmid) {
  if (anpmid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete anpmid_;
  }
  if (anpmid) {
    set_has_anpmid();
    anpmid_ = anpmid;
  } else {
    clear_has_anpmid();
    anpmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes vault_dir = 3;
inline bool VaultInfo::has_vault_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VaultInfo::set_has_vault_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VaultInfo::clear_has_vault_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VaultInfo::clear_vault_dir() {
  if (vault_dir_ != &::google::protobuf::internal::GetEmptyString()) {
    vault_dir_->clear();
  }
  clear_has_vault_dir();
}
inline const ::std::string& VaultInfo::vault_dir() const {
  return *vault_dir_;
}
inline void VaultInfo::set_vault_dir(const ::std::string& value) {
  set_has_vault_dir();
  if (vault_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    vault_dir_ = new ::std::string;
  }
  vault_dir_->assign(value);
}
inline void VaultInfo::set_vault_dir(const char* value) {
  set_has_vault_dir();
  if (vault_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    vault_dir_ = new ::std::string;
  }
  vault_dir_->assign(value);
}
inline void VaultInfo::set_vault_dir(const void* value, size_t size) {
  set_has_vault_dir();
  if (vault_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    vault_dir_ = new ::std::string;
  }
  vault_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultInfo::mutable_vault_dir() {
  set_has_vault_dir();
  if (vault_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    vault_dir_ = new ::std::string;
  }
  return vault_dir_;
}
inline ::std::string* VaultInfo::release_vault_dir() {
  clear_has_vault_dir();
  if (vault_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = vault_dir_;
    vault_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VaultInfo::set_allocated_vault_dir(::std::string* vault_dir) {
  if (vault_dir_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vault_dir_;
  }
  if (vault_dir) {
    set_has_vault_dir();
    vault_dir_ = vault_dir;
  } else {
    clear_has_vault_dir();
    vault_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes label = 4;
inline bool VaultInfo::has_label() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VaultInfo::set_has_label() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VaultInfo::clear_has_label() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VaultInfo::clear_label() {
  if (label_ != &::google::protobuf::internal::GetEmptyString()) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& VaultInfo::label() const {
  return *label_;
}
inline void VaultInfo::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void VaultInfo::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void VaultInfo::set_label(const void* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultInfo::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* VaultInfo::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VaultInfo::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::GetEmptyString()) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional uint64 max_disk_usage = 5;
inline bool VaultInfo::has_max_disk_usage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VaultInfo::set_has_max_disk_usage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VaultInfo::clear_has_max_disk_usage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VaultInfo::clear_max_disk_usage() {
  max_disk_usage_ = GOOGLE_ULONGLONG(0);
  clear_has_max_disk_usage();
}
inline ::google::protobuf::uint64 VaultInfo::max_disk_usage() const {
  return max_disk_usage_;
}
inline void VaultInfo::set_max_disk_usage(::google::protobuf::uint64 value) {
  set_has_max_disk_usage();
  max_disk_usage_ = value;
}

// optional bytes owner_name = 6;
inline bool VaultInfo::has_owner_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VaultInfo::set_has_owner_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VaultInfo::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VaultInfo::clear_owner_name() {
  if (owner_name_ != &::google::protobuf::internal::GetEmptyString()) {
    owner_name_->clear();
  }
  clear_has_owner_name();
}
inline const ::std::string& VaultInfo::owner_name() const {
  return *owner_name_;
}
inline void VaultInfo::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::GetEmptyString()) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(value);
}
inline void VaultInfo::set_owner_name(const char* value) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::GetEmptyString()) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(value);
}
inline void VaultInfo::set_owner_name(const void* value, size_t size) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::GetEmptyString()) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultInfo::mutable_owner_name() {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::GetEmptyString()) {
    owner_name_ = new ::std::string;
  }
  return owner_name_;
}
inline ::std::string* VaultInfo::release_owner_name() {
  clear_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = owner_name_;
    owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VaultInfo::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete owner_name_;
  }
  if (owner_name) {
    set_has_owner_name();
    owner_name_ = owner_name;
  } else {
    clear_has_owner_name();
    owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// VaultManagerConfig

// required bytes AES256Key = 1;
inline bool VaultManagerConfig::has_aes256key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VaultManagerConfig::set_has_aes256key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VaultManagerConfig::clear_has_aes256key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VaultManagerConfig::clear_aes256key() {
  if (aes256key_ != &::google::protobuf::internal::GetEmptyString()) {
    aes256key_->clear();
  }
  clear_has_aes256key();
}
inline const ::std::string& VaultManagerConfig::aes256key() const {
  return *aes256key_;
}
inline void VaultManagerConfig::set_aes256key(const ::std::string& value) {
  set_has_aes256key();
  if (aes256key_ == &::google::protobuf::internal::GetEmptyString()) {
    aes256key_ = new ::std::string;
  }
  aes256key_->assign(value);
}
inline void VaultManagerConfig::set_aes256key(const char* value) {
  set_has_aes256key();
  if (aes256key_ == &::google::protobuf::internal::GetEmptyString()) {
    aes256key_ = new ::std::string;
  }
  aes256key_->assign(value);
}
inline void VaultManagerConfig::set_aes256key(const void* value, size_t size) {
  set_has_aes256key();
  if (aes256key_ == &::google::protobuf::internal::GetEmptyString()) {
    aes256key_ = new ::std::string;
  }
  aes256key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultManagerConfig::mutable_aes256key() {
  set_has_aes256key();
  if (aes256key_ == &::google::protobuf::internal::GetEmptyString()) {
    aes256key_ = new ::std::string;
  }
  return aes256key_;
}
inline ::std::string* VaultManagerConfig::release_aes256key() {
  clear_has_aes256key();
  if (aes256key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = aes256key_;
    aes256key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VaultManagerConfig::set_allocated_aes256key(::std::string* aes256key) {
  if (aes256key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete aes256key_;
  }
  if (aes256key) {
    set_has_aes256key();
    aes256key_ = aes256key;
  } else {
    clear_has_aes256key();
    aes256key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes AES256IV = 2;
inline bool VaultManagerConfig::has_aes256iv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VaultManagerConfig::set_has_aes256iv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VaultManagerConfig::clear_has_aes256iv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VaultManagerConfig::clear_aes256iv() {
  if (aes256iv_ != &::google::protobuf::internal::GetEmptyString()) {
    aes256iv_->clear();
  }
  clear_has_aes256iv();
}
inline const ::std::string& VaultManagerConfig::aes256iv() const {
  return *aes256iv_;
}
inline void VaultManagerConfig::set_aes256iv(const ::std::string& value) {
  set_has_aes256iv();
  if (aes256iv_ == &::google::protobuf::internal::GetEmptyString()) {
    aes256iv_ = new ::std::string;
  }
  aes256iv_->assign(value);
}
inline void VaultManagerConfig::set_aes256iv(const char* value) {
  set_has_aes256iv();
  if (aes256iv_ == &::google::protobuf::internal::GetEmptyString()) {
    aes256iv_ = new ::std::string;
  }
  aes256iv_->assign(value);
}
inline void VaultManagerConfig::set_aes256iv(const void* value, size_t size) {
  set_has_aes256iv();
  if (aes256iv_ == &::google::protobuf::internal::GetEmptyString()) {
    aes256iv_ = new ::std::string;
  }
  aes256iv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultManagerConfig::mutable_aes256iv() {
  set_has_aes256iv();
  if (aes256iv_ == &::google::protobuf::internal::GetEmptyString()) {
    aes256iv_ = new ::std::string;
  }
  return aes256iv_;
}
inline ::std::string* VaultManagerConfig::release_aes256iv() {
  clear_has_aes256iv();
  if (aes256iv_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = aes256iv_;
    aes256iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VaultManagerConfig::set_allocated_aes256iv(::std::string* aes256iv) {
  if (aes256iv_ != &::google::protobuf::internal::GetEmptyString()) {
    delete aes256iv_;
  }
  if (aes256iv) {
    set_has_aes256iv();
    aes256iv_ = aes256iv;
  } else {
    clear_has_aes256iv();
    aes256iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .maidsafe.vault_manager.protobuf.VaultInfo vault_info = 3;
inline int VaultManagerConfig::vault_info_size() const {
  return vault_info_.size();
}
inline void VaultManagerConfig::clear_vault_info() {
  vault_info_.Clear();
}
inline const ::maidsafe::vault_manager::protobuf::VaultInfo& VaultManagerConfig::vault_info(int index) const {
  return vault_info_.Get(index);
}
inline ::maidsafe::vault_manager::protobuf::VaultInfo* VaultManagerConfig::mutable_vault_info(int index) {
  return vault_info_.Mutable(index);
}
inline ::maidsafe::vault_manager::protobuf::VaultInfo* VaultManagerConfig::add_vault_info() {
  return vault_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::maidsafe::vault_manager::protobuf::VaultInfo >&
VaultManagerConfig::vault_info() const {
  return vault_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::maidsafe::vault_manager::protobuf::VaultInfo >*
VaultManagerConfig::mutable_vault_info() {
  return &vault_info_;
}

// optional bytes vault_permissions = 4;
inline bool VaultManagerConfig::has_vault_permissions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VaultManagerConfig::set_has_vault_permissions() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VaultManagerConfig::clear_has_vault_permissions() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VaultManagerConfig::clear_vault_permissions() {
  if (vault_permissions_ != &::google::protobuf::internal::GetEmptyString()) {
    vault_permissions_->clear();
  }
  clear_has_vault_permissions();
}
inline const ::std::string& VaultManagerConfig::vault_permissions() const {
  return *vault_permissions_;
}
inline void VaultManagerConfig::set_vault_permissions(const ::std::string& value) {
  set_has_vault_permissions();
  if (vault_permissions_ == &::google::protobuf::internal::GetEmptyString()) {
    vault_permissions_ = new ::std::string;
  }
  vault_permissions_->assign(value);
}
inline void VaultManagerConfig::set_vault_permissions(const char* value) {
  set_has_vault_permissions();
  if (vault_permissions_ == &::google::protobuf::internal::GetEmptyString()) {
    vault_permissions_ = new ::std::string;
  }
  vault_permissions_->assign(value);
}
inline void VaultManagerConfig::set_vault_permissions(const void* value, size_t size) {
  set_has_vault_permissions();
  if (vault_permissions_ == &::google::protobuf::internal::GetEmptyString()) {
    vault_permissions_ = new ::std::string;
  }
  vault_permissions_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VaultManagerConfig::mutable_vault_permissions() {
  set_has_vault_permissions();
  if (vault_permissions_ == &::google::protobuf::internal::GetEmptyString()) {
    vault_permissions_ = new ::std::string;
  }
  return vault_permissions_;
}
inline ::std::string* VaultManagerConfig::release_vault_permissions() {
  clear_has_vault_permissions();
  if (vault_permissions_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = vault_permissions_;
    vault_permissions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VaultManagerConfig::set_allocated_vault_permissions(::std::string* vault_permissions) {
  if (vault_permissions_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vault_permissions_;
  }
  if (vault_permissions) {
    set_has_vault_permissions();
    vault_permissions_ = vault_permissions;
  } else {
    clear_has_vault_permissions();
    vault_permissions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault_manager
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto__INCLUDED
