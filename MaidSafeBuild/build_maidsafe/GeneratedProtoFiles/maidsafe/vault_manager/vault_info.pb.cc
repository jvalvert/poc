// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault_manager/vault_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/vault_manager/vault_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault_manager {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto() {
  delete VaultInfo::default_instance_;
  delete VaultManagerConfig::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  VaultInfo::default_instance_ = new VaultInfo();
  VaultManagerConfig::default_instance_ = new VaultManagerConfig();
  VaultInfo::default_instance_->InitAsDefaultInstance();
  VaultManagerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto {
  StaticDescriptorInitializer_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto() {
    protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int VaultInfo::kPmidFieldNumber;
const int VaultInfo::kAnpmidFieldNumber;
const int VaultInfo::kVaultDirFieldNumber;
const int VaultInfo::kLabelFieldNumber;
const int VaultInfo::kMaxDiskUsageFieldNumber;
const int VaultInfo::kOwnerNameFieldNumber;
#endif  // !_MSC_VER

VaultInfo::VaultInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VaultInfo::InitAsDefaultInstance() {
}

VaultInfo::VaultInfo(const VaultInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VaultInfo::SharedCtor() {
  _cached_size_ = 0;
  pmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  anpmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vault_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  max_disk_usage_ = GOOGLE_ULONGLONG(0);
  owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultInfo::~VaultInfo() {
  SharedDtor();
}

void VaultInfo::SharedDtor() {
  if (pmid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_;
  }
  if (anpmid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete anpmid_;
  }
  if (vault_dir_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vault_dir_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyString()) {
    delete label_;
  }
  if (owner_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete owner_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VaultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VaultInfo& VaultInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
#endif
  return *default_instance_;
}

VaultInfo* VaultInfo::default_instance_ = NULL;

VaultInfo* VaultInfo::New() const {
  return new VaultInfo;
}

void VaultInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pmid()) {
      if (pmid_ != &::google::protobuf::internal::GetEmptyString()) {
        pmid_->clear();
      }
    }
    if (has_anpmid()) {
      if (anpmid_ != &::google::protobuf::internal::GetEmptyString()) {
        anpmid_->clear();
      }
    }
    if (has_vault_dir()) {
      if (vault_dir_ != &::google::protobuf::internal::GetEmptyString()) {
        vault_dir_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyString()) {
        label_->clear();
      }
    }
    max_disk_usage_ = GOOGLE_ULONGLONG(0);
    if (has_owner_name()) {
      if (owner_name_ != &::google::protobuf::internal::GetEmptyString()) {
        owner_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VaultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes pmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pmid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_anpmid;
        break;
      }

      // required bytes anpmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anpmid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_anpmid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vault_dir;
        break;
      }

      // required bytes vault_dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vault_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vault_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_label;
        break;
      }

      // required bytes label = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_disk_usage;
        break;
      }

      // optional uint64 max_disk_usage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_disk_usage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_disk_usage_)));
          set_has_max_disk_usage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_owner_name;
        break;
      }

      // optional bytes owner_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes pmid = 1;
  if (has_pmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->pmid(), output);
  }

  // required bytes anpmid = 2;
  if (has_anpmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->anpmid(), output);
  }

  // required bytes vault_dir = 3;
  if (has_vault_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->vault_dir(), output);
  }

  // required bytes label = 4;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->label(), output);
  }

  // optional uint64 max_disk_usage = 5;
  if (has_max_disk_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_disk_usage(), output);
  }

  // optional bytes owner_name = 6;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->owner_name(), output);
  }

}

int VaultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes pmid = 1;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pmid());
    }

    // required bytes anpmid = 2;
    if (has_anpmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->anpmid());
    }

    // required bytes vault_dir = 3;
    if (has_vault_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vault_dir());
    }

    // required bytes label = 4;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->label());
    }

    // optional uint64 max_disk_usage = 5;
    if (has_max_disk_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_disk_usage());
    }

    // optional bytes owner_name = 6;
    if (has_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->owner_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VaultInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VaultInfo*>(&from));
}

void VaultInfo::MergeFrom(const VaultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pmid()) {
      set_pmid(from.pmid());
    }
    if (from.has_anpmid()) {
      set_anpmid(from.anpmid());
    }
    if (from.has_vault_dir()) {
      set_vault_dir(from.vault_dir());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_max_disk_usage()) {
      set_max_disk_usage(from.max_disk_usage());
    }
    if (from.has_owner_name()) {
      set_owner_name(from.owner_name());
    }
  }
}

void VaultInfo::CopyFrom(const VaultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VaultInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void VaultInfo::Swap(VaultInfo* other) {
  if (other != this) {
    std::swap(pmid_, other->pmid_);
    std::swap(anpmid_, other->anpmid_);
    std::swap(vault_dir_, other->vault_dir_);
    std::swap(label_, other->label_);
    std::swap(max_disk_usage_, other->max_disk_usage_);
    std::swap(owner_name_, other->owner_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VaultInfo::GetTypeName() const {
  return "maidsafe.vault_manager.protobuf.VaultInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int VaultManagerConfig::kAES256KeyFieldNumber;
const int VaultManagerConfig::kAES256IVFieldNumber;
const int VaultManagerConfig::kVaultInfoFieldNumber;
const int VaultManagerConfig::kVaultPermissionsFieldNumber;
#endif  // !_MSC_VER

VaultManagerConfig::VaultManagerConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VaultManagerConfig::InitAsDefaultInstance() {
}

VaultManagerConfig::VaultManagerConfig(const VaultManagerConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VaultManagerConfig::SharedCtor() {
  _cached_size_ = 0;
  aes256key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  aes256iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vault_permissions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultManagerConfig::~VaultManagerConfig() {
  SharedDtor();
}

void VaultManagerConfig::SharedDtor() {
  if (aes256key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete aes256key_;
  }
  if (aes256iv_ != &::google::protobuf::internal::GetEmptyString()) {
    delete aes256iv_;
  }
  if (vault_permissions_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vault_permissions_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VaultManagerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VaultManagerConfig& VaultManagerConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_5fmanager_2fvault_5finfo_2eproto();
#endif
  return *default_instance_;
}

VaultManagerConfig* VaultManagerConfig::default_instance_ = NULL;

VaultManagerConfig* VaultManagerConfig::New() const {
  return new VaultManagerConfig;
}

void VaultManagerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_aes256key()) {
      if (aes256key_ != &::google::protobuf::internal::GetEmptyString()) {
        aes256key_->clear();
      }
    }
    if (has_aes256iv()) {
      if (aes256iv_ != &::google::protobuf::internal::GetEmptyString()) {
        aes256iv_->clear();
      }
    }
    if (has_vault_permissions()) {
      if (vault_permissions_ != &::google::protobuf::internal::GetEmptyString()) {
        vault_permissions_->clear();
      }
    }
  }
  vault_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VaultManagerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes AES256Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aes256key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AES256IV;
        break;
      }

      // required bytes AES256IV = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AES256IV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aes256iv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vault_info;
        break;
      }

      // repeated .maidsafe.vault_manager.protobuf.VaultInfo vault_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vault_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vault_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vault_info;
        if (input->ExpectTag(34)) goto parse_vault_permissions;
        break;
      }

      // optional bytes vault_permissions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vault_permissions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vault_permissions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultManagerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes AES256Key = 1;
  if (has_aes256key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->aes256key(), output);
  }

  // required bytes AES256IV = 2;
  if (has_aes256iv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->aes256iv(), output);
  }

  // repeated .maidsafe.vault_manager.protobuf.VaultInfo vault_info = 3;
  for (int i = 0; i < this->vault_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->vault_info(i), output);
  }

  // optional bytes vault_permissions = 4;
  if (has_vault_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->vault_permissions(), output);
  }

}

int VaultManagerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes AES256Key = 1;
    if (has_aes256key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->aes256key());
    }

    // required bytes AES256IV = 2;
    if (has_aes256iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->aes256iv());
    }

    // optional bytes vault_permissions = 4;
    if (has_vault_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vault_permissions());
    }

  }
  // repeated .maidsafe.vault_manager.protobuf.VaultInfo vault_info = 3;
  total_size += 1 * this->vault_info_size();
  for (int i = 0; i < this->vault_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vault_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VaultManagerConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VaultManagerConfig*>(&from));
}

void VaultManagerConfig::MergeFrom(const VaultManagerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  vault_info_.MergeFrom(from.vault_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aes256key()) {
      set_aes256key(from.aes256key());
    }
    if (from.has_aes256iv()) {
      set_aes256iv(from.aes256iv());
    }
    if (from.has_vault_permissions()) {
      set_vault_permissions(from.vault_permissions());
    }
  }
}

void VaultManagerConfig::CopyFrom(const VaultManagerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VaultManagerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < vault_info_size(); i++) {
    if (!this->vault_info(i).IsInitialized()) return false;
  }
  return true;
}

void VaultManagerConfig::Swap(VaultManagerConfig* other) {
  if (other != this) {
    std::swap(aes256key_, other->aes256key_);
    std::swap(aes256iv_, other->aes256iv_);
    vault_info_.Swap(&other->vault_info_);
    std::swap(vault_permissions_, other->vault_permissions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VaultManagerConfig::GetTypeName() const {
  return "maidsafe.vault_manager.protobuf.VaultManagerConfig";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault_manager
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
