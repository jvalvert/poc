// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/routing/routing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/routing/routing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace routing {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2frouting_2frouting_2eproto() {
  delete Layer::default_instance_;
  delete Endpoint::default_instance_;
  delete Contact::default_instance_;
  delete ConfigFile::default_instance_;
  delete Message::default_instance_;
  delete SignedMessage::default_instance_;
  delete ConnectRequest::default_instance_;
  delete ConnectResponse::default_instance_;
  delete ConnectSuccess::default_instance_;
  delete ConnectSuccessAcknowledgement::default_instance_;
  delete FindNodesRequest::default_instance_;
  delete FindNodesResponse::default_instance_;
  delete PingRequest::default_instance_;
  delete PingResponse::default_instance_;
  delete RemoveRequest::default_instance_;
  delete RemoveResponse::default_instance_;
  delete NodeIdList::default_instance_;
  delete NodeIdList_NodeId::default_instance_;
  delete BasicNodeInfo::default_instance_;
  delete ClosestNodesUpdate::default_instance_;
  delete InformClientOfhNewCloseNode::default_instance_;
  delete GetGroup::default_instance_;
  delete NodeInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Layer::default_instance_ = new Layer();
  Endpoint::default_instance_ = new Endpoint();
  Contact::default_instance_ = new Contact();
  ConfigFile::default_instance_ = new ConfigFile();
  Message::default_instance_ = new Message();
  SignedMessage::default_instance_ = new SignedMessage();
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectResponse::default_instance_ = new ConnectResponse();
  ConnectSuccess::default_instance_ = new ConnectSuccess();
  ConnectSuccessAcknowledgement::default_instance_ = new ConnectSuccessAcknowledgement();
  FindNodesRequest::default_instance_ = new FindNodesRequest();
  FindNodesResponse::default_instance_ = new FindNodesResponse();
  PingRequest::default_instance_ = new PingRequest();
  PingResponse::default_instance_ = new PingResponse();
  RemoveRequest::default_instance_ = new RemoveRequest();
  RemoveResponse::default_instance_ = new RemoveResponse();
  NodeIdList::default_instance_ = new NodeIdList();
  NodeIdList_NodeId::default_instance_ = new NodeIdList_NodeId();
  BasicNodeInfo::default_instance_ = new BasicNodeInfo();
  ClosestNodesUpdate::default_instance_ = new ClosestNodesUpdate();
  InformClientOfhNewCloseNode::default_instance_ = new InformClientOfhNewCloseNode();
  GetGroup::default_instance_ = new GetGroup();
  NodeInfo::default_instance_ = new NodeInfo();
  Layer::default_instance_->InitAsDefaultInstance();
  Endpoint::default_instance_->InitAsDefaultInstance();
  Contact::default_instance_->InitAsDefaultInstance();
  ConfigFile::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  SignedMessage::default_instance_->InitAsDefaultInstance();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectResponse::default_instance_->InitAsDefaultInstance();
  ConnectSuccess::default_instance_->InitAsDefaultInstance();
  ConnectSuccessAcknowledgement::default_instance_->InitAsDefaultInstance();
  FindNodesRequest::default_instance_->InitAsDefaultInstance();
  FindNodesResponse::default_instance_->InitAsDefaultInstance();
  PingRequest::default_instance_->InitAsDefaultInstance();
  PingResponse::default_instance_->InitAsDefaultInstance();
  RemoveRequest::default_instance_->InitAsDefaultInstance();
  RemoveResponse::default_instance_->InitAsDefaultInstance();
  NodeIdList::default_instance_->InitAsDefaultInstance();
  NodeIdList_NodeId::default_instance_->InitAsDefaultInstance();
  BasicNodeInfo::default_instance_->InitAsDefaultInstance();
  ClosestNodesUpdate::default_instance_->InitAsDefaultInstance();
  InformClientOfhNewCloseNode::default_instance_->InitAsDefaultInstance();
  GetGroup::default_instance_->InitAsDefaultInstance();
  NodeInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2frouting_2frouting_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto_once_);
void protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2frouting_2frouting_2eproto {
  StaticDescriptorInitializer_maidsafe_2frouting_2frouting_2eproto() {
    protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
  }
} static_descriptor_initializer_maidsafe_2frouting_2frouting_2eproto_;
#endif
bool NatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ConnectResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Layer::kIdentifierFieldNumber;
const int Layer::kMessageFieldNumber;
#endif  // !_MSC_VER

Layer::Layer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Layer::InitAsDefaultInstance() {
}

Layer::Layer(const Layer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Layer::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Layer::~Layer() {
  SharedDtor();
}

void Layer::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyString()) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Layer& Layer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

Layer* Layer::default_instance_ = NULL;

Layer* Layer::New() const {
  return new Layer;
}

void Layer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identifier_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyString()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identifier_)));
          set_has_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required bytes message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->identifier(), output);
  }

  // required bytes message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message(), output);
  }

}

int Layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identifier());
    }

    // required bytes message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Layer*>(&from));
}

void Layer::MergeFrom(const Layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
}

void Layer::CopyFrom(const Layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Layer::Swap(Layer* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Layer::GetTypeName() const {
  return "maidsafe.routing.protobuf.Layer";
}


// ===================================================================

#ifndef _MSC_VER
const int Endpoint::kIpFieldNumber;
const int Endpoint::kPortFieldNumber;
#endif  // !_MSC_VER

Endpoint::Endpoint()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Endpoint::InitAsDefaultInstance() {
}

Endpoint::Endpoint(const Endpoint& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Endpoint::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Endpoint::~Endpoint() {
  SharedDtor();
}

void Endpoint::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyString()) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Endpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Endpoint& Endpoint::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

Endpoint* Endpoint::default_instance_ = NULL;

Endpoint* Endpoint::New() const {
  return new Endpoint;
}

void Endpoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyString()) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Endpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Endpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

}

int Endpoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Endpoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Endpoint*>(&from));
}

void Endpoint::MergeFrom(const Endpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
}

void Endpoint::CopyFrom(const Endpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Endpoint::Swap(Endpoint* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Endpoint::GetTypeName() const {
  return "maidsafe.routing.protobuf.Endpoint";
}


// ===================================================================

#ifndef _MSC_VER
const int Contact::kNodeIdFieldNumber;
const int Contact::kConnectionIdFieldNumber;
const int Contact::kPrivateEndpointFieldNumber;
const int Contact::kPublicEndpointFieldNumber;
const int Contact::kNatTypeFieldNumber;
const int Contact::kTcpFieldNumber;
#endif  // !_MSC_VER

Contact::Contact()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Contact::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  private_endpoint_ = const_cast< ::maidsafe::routing::protobuf::Endpoint*>(
      ::maidsafe::routing::protobuf::Endpoint::internal_default_instance());
#else
  private_endpoint_ = const_cast< ::maidsafe::routing::protobuf::Endpoint*>(&::maidsafe::routing::protobuf::Endpoint::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  public_endpoint_ = const_cast< ::maidsafe::routing::protobuf::Endpoint*>(
      ::maidsafe::routing::protobuf::Endpoint::internal_default_instance());
#else
  public_endpoint_ = const_cast< ::maidsafe::routing::protobuf::Endpoint*>(&::maidsafe::routing::protobuf::Endpoint::default_instance());
#endif
}

Contact::Contact(const Contact& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Contact::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  connection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  private_endpoint_ = NULL;
  public_endpoint_ = NULL;
  nat_type_ = 0;
  tcp_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contact::~Contact() {
  SharedDtor();
}

void Contact::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  if (connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete connection_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete private_endpoint_;
    delete public_endpoint_;
  }
}

void Contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Contact& Contact::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

Contact* Contact::default_instance_ = NULL;

Contact* Contact::New() const {
  return new Contact;
}

void Contact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
    if (has_connection_id()) {
      if (connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
        connection_id_->clear();
      }
    }
    if (has_private_endpoint()) {
      if (private_endpoint_ != NULL) private_endpoint_->::maidsafe::routing::protobuf::Endpoint::Clear();
    }
    if (has_public_endpoint()) {
      if (public_endpoint_ != NULL) public_endpoint_->::maidsafe::routing::protobuf::Endpoint::Clear();
    }
    nat_type_ = 0;
    tcp_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection_id;
        break;
      }

      // required bytes connection_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_private_endpoint;
        break;
      }

      // required .maidsafe.routing.protobuf.Endpoint private_endpoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_public_endpoint;
        break;
      }

      // required .maidsafe.routing.protobuf.Endpoint public_endpoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nat_type;
        break;
      }

      // optional .maidsafe.routing.protobuf.NatType nat_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maidsafe::routing::protobuf::NatType_IsValid(value)) {
            set_nat_type(static_cast< ::maidsafe::routing::protobuf::NatType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tcp;
        break;
      }

      // optional bool tcp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tcp_)));
          set_has_tcp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

  // required bytes connection_id = 2;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->connection_id(), output);
  }

  // required .maidsafe.routing.protobuf.Endpoint private_endpoint = 3;
  if (has_private_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->private_endpoint(), output);
  }

  // required .maidsafe.routing.protobuf.Endpoint public_endpoint = 4;
  if (has_public_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->public_endpoint(), output);
  }

  // optional .maidsafe.routing.protobuf.NatType nat_type = 5;
  if (has_nat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->nat_type(), output);
  }

  // optional bool tcp = 6;
  if (has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tcp(), output);
  }

}

int Contact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // required bytes connection_id = 2;
    if (has_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connection_id());
    }

    // required .maidsafe.routing.protobuf.Endpoint private_endpoint = 3;
    if (has_private_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_endpoint());
    }

    // required .maidsafe.routing.protobuf.Endpoint public_endpoint = 4;
    if (has_public_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_endpoint());
    }

    // optional .maidsafe.routing.protobuf.NatType nat_type = 5;
    if (has_nat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nat_type());
    }

    // optional bool tcp = 6;
    if (has_tcp()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contact::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Contact*>(&from));
}

void Contact::MergeFrom(const Contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_private_endpoint()) {
      mutable_private_endpoint()->::maidsafe::routing::protobuf::Endpoint::MergeFrom(from.private_endpoint());
    }
    if (from.has_public_endpoint()) {
      mutable_public_endpoint()->::maidsafe::routing::protobuf::Endpoint::MergeFrom(from.public_endpoint());
    }
    if (from.has_nat_type()) {
      set_nat_type(from.nat_type());
    }
    if (from.has_tcp()) {
      set_tcp(from.tcp());
    }
  }
}

void Contact::CopyFrom(const Contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_private_endpoint()) {
    if (!this->private_endpoint().IsInitialized()) return false;
  }
  if (has_public_endpoint()) {
    if (!this->public_endpoint().IsInitialized()) return false;
  }
  return true;
}

void Contact::Swap(Contact* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(connection_id_, other->connection_id_);
    std::swap(private_endpoint_, other->private_endpoint_);
    std::swap(public_endpoint_, other->public_endpoint_);
    std::swap(nat_type_, other->nat_type_);
    std::swap(tcp_, other->tcp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Contact::GetTypeName() const {
  return "maidsafe.routing.protobuf.Contact";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigFile::kNodeIdFieldNumber;
const int ConfigFile::kPrivateKeyFieldNumber;
#endif  // !_MSC_VER

ConfigFile::ConfigFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfigFile::InitAsDefaultInstance() {
}

ConfigFile::ConfigFile(const ConfigFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigFile::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigFile::~ConfigFile() {
  SharedDtor();
}

void ConfigFile::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  if (private_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete private_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfigFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfigFile& ConfigFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

ConfigFile* ConfigFile::default_instance_ = NULL;

ConfigFile* ConfigFile::New() const {
  return new ConfigFile;
}

void ConfigFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::GetEmptyString()) {
        private_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfigFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_private_key;
        break;
      }

      // optional bytes private_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

  // optional bytes private_key = 2;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->private_key(), output);
  }

}

int ConfigFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // optional bytes private_key = 2;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfigFile*>(&from));
}

void ConfigFile::MergeFrom(const ConfigFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
  }
}

void ConfigFile::CopyFrom(const ConfigFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFile::IsInitialized() const {

  return true;
}

void ConfigFile::Swap(ConfigFile* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(private_key_, other->private_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfigFile::GetTypeName() const {
  return "maidsafe.routing.protobuf.ConfigFile";
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kSourceIdFieldNumber;
const int Message::kDestinationIdFieldNumber;
const int Message::kRoutingMessageFieldNumber;
const int Message::kLastIdFieldNumber;
const int Message::kRelayIdFieldNumber;
const int Message::kDataFieldNumber;
const int Message::kSignatureFieldNumber;
const int Message::kDirectFieldNumber;
const int Message::kReplicationFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kCacheableFieldNumber;
const int Message::kIdFieldNumber;
const int Message::kClientNodeFieldNumber;
const int Message::kRelayConnectionIdFieldNumber;
const int Message::kClosestToThisNodeFieldNumber;
const int Message::kCloseToThisNodeFieldNumber;
const int Message::kRouteHistoryFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kHopsToLiveFieldNumber;
const int Message::kVisitedFieldNumber;
const int Message::kAverageDistaceFieldNumber;
const int Message::kGroupSourceFieldNumber;
const int Message::kGroupDestinationFieldNumber;
const int Message::kActualDestinationIsRelayIdFieldNumber;
const int Message::kAckIdFieldNumber;
const int Message::kAckNodeIdsFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  source_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  destination_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  routing_message_ = false;
  last_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  relay_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  direct_ = false;
  replication_ = 0;
  type_ = 0;
  cacheable_ = 0;
  id_ = 0;
  client_node_ = false;
  relay_connection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  closest_to_this_node_ = false;
  close_to_this_node_ = false;
  request_ = false;
  hops_to_live_ = 0;
  visited_ = false;
  average_distace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  group_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  group_destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  actual_destination_is_relay_id_ = false;
  ack_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (source_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete source_id_;
  }
  if (destination_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete destination_id_;
  }
  if (last_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete last_id_;
  }
  if (relay_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete relay_id_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete signature_;
  }
  if (relay_connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete relay_connection_id_;
  }
  if (average_distace_ != &::google::protobuf::internal::GetEmptyString()) {
    delete average_distace_;
  }
  if (group_source_ != &::google::protobuf::internal::GetEmptyString()) {
    delete group_source_;
  }
  if (group_destination_ != &::google::protobuf::internal::GetEmptyString()) {
    delete group_destination_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Message& Message::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source_id()) {
      if (source_id_ != &::google::protobuf::internal::GetEmptyString()) {
        source_id_->clear();
      }
    }
    if (has_destination_id()) {
      if (destination_id_ != &::google::protobuf::internal::GetEmptyString()) {
        destination_id_->clear();
      }
    }
    routing_message_ = false;
    if (has_last_id()) {
      if (last_id_ != &::google::protobuf::internal::GetEmptyString()) {
        last_id_->clear();
      }
    }
    if (has_relay_id()) {
      if (relay_id_ != &::google::protobuf::internal::GetEmptyString()) {
        relay_id_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyString()) {
        signature_->clear();
      }
    }
    direct_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    replication_ = 0;
    type_ = 0;
    cacheable_ = 0;
    id_ = 0;
    client_node_ = false;
    if (has_relay_connection_id()) {
      if (relay_connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
        relay_connection_id_->clear();
      }
    }
    closest_to_this_node_ = false;
    close_to_this_node_ = false;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    request_ = false;
    hops_to_live_ = 0;
    visited_ = false;
    if (has_average_distace()) {
      if (average_distace_ != &::google::protobuf::internal::GetEmptyString()) {
        average_distace_->clear();
      }
    }
    if (has_group_source()) {
      if (group_source_ != &::google::protobuf::internal::GetEmptyString()) {
        group_source_->clear();
      }
    }
    if (has_group_destination()) {
      if (group_destination_ != &::google::protobuf::internal::GetEmptyString()) {
        group_destination_->clear();
      }
    }
    actual_destination_is_relay_id_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ack_id_ = 0;
  }
  data_.Clear();
  route_history_.Clear();
  ack_node_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes source_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_destination_id;
        break;
      }

      // optional bytes destination_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_destination_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_routing_message;
        break;
      }

      // required bool routing_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routing_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &routing_message_)));
          set_has_routing_message();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_last_id;
        break;
      }

      // optional bytes last_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_relay_id;
        break;
      }

      // optional bytes relay_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relay_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_relay_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectTag(58)) goto parse_signature;
        break;
      }

      // optional bytes signature = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_direct;
        break;
      }

      // required bool direct = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_replication;
        break;
      }

      // optional int32 replication = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replication_)));
          set_has_replication();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional sint32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cacheable;
        break;
      }

      // optional int32 cacheable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cacheable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cacheable_)));
          set_has_cacheable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_id;
        break;
      }

      // optional int32 id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_client_node;
        break;
      }

      // required bool client_node = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_node_)));
          set_has_client_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_relay_connection_id;
        break;
      }

      // optional bytes relay_connection_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relay_connection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_relay_connection_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_closest_to_this_node;
        break;
      }

      // optional bool closest_to_this_node = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closest_to_this_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closest_to_this_node_)));
          set_has_closest_to_this_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_close_to_this_node;
        break;
      }

      // optional bool close_to_this_node = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_to_this_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_to_this_node_)));
          set_has_close_to_this_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_route_history;
        break;
      }

      // repeated bytes route_history = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_route_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_route_history;
        if (input->ExpectTag(144)) goto parse_request;
        break;
      }

      // required bool request = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_hops_to_live;
        break;
      }

      // required int32 hops_to_live = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hops_to_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hops_to_live_)));
          set_has_hops_to_live();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_visited;
        break;
      }

      // optional bool visited = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visited_)));
          set_has_visited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_average_distace;
        break;
      }

      // optional bytes average_distace = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_average_distace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_average_distace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_group_source;
        break;
      }

      // optional bytes group_source = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_group_destination;
        break;
      }

      // optional bytes group_destination = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_destination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_actual_destination_is_relay_id;
        break;
      }

      // optional bool actual_destination_is_relay_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actual_destination_is_relay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &actual_destination_is_relay_id_)));
          set_has_actual_destination_is_relay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_ack_id;
        break;
      }

      // optional int32 ack_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_id_)));
          set_has_ack_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_ack_node_ids;
        break;
      }

      // repeated bytes ack_node_ids = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack_node_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_ack_node_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_ack_node_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes source_id = 1;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->source_id(), output);
  }

  // optional bytes destination_id = 2;
  if (has_destination_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->destination_id(), output);
  }

  // required bool routing_message = 3;
  if (has_routing_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->routing_message(), output);
  }

  // optional bytes last_id = 4;
  if (has_last_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->last_id(), output);
  }

  // optional bytes relay_id = 5;
  if (has_relay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->relay_id(), output);
  }

  // repeated bytes data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(i), output);
  }

  // optional bytes signature = 7;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->signature(), output);
  }

  // required bool direct = 8;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->direct(), output);
  }

  // optional int32 replication = 9;
  if (has_replication()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->replication(), output);
  }

  // optional sint32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->type(), output);
  }

  // optional int32 cacheable = 11;
  if (has_cacheable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cacheable(), output);
  }

  // optional int32 id = 12;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->id(), output);
  }

  // required bool client_node = 13;
  if (has_client_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->client_node(), output);
  }

  // optional bytes relay_connection_id = 14;
  if (has_relay_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->relay_connection_id(), output);
  }

  // optional bool closest_to_this_node = 15;
  if (has_closest_to_this_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->closest_to_this_node(), output);
  }

  // optional bool close_to_this_node = 16;
  if (has_close_to_this_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->close_to_this_node(), output);
  }

  // repeated bytes route_history = 17;
  for (int i = 0; i < this->route_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->route_history(i), output);
  }

  // required bool request = 18;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->request(), output);
  }

  // required int32 hops_to_live = 19;
  if (has_hops_to_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->hops_to_live(), output);
  }

  // optional bool visited = 20;
  if (has_visited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->visited(), output);
  }

  // optional bytes average_distace = 21;
  if (has_average_distace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      21, this->average_distace(), output);
  }

  // optional bytes group_source = 22;
  if (has_group_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      22, this->group_source(), output);
  }

  // optional bytes group_destination = 23;
  if (has_group_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->group_destination(), output);
  }

  // optional bool actual_destination_is_relay_id = 24;
  if (has_actual_destination_is_relay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->actual_destination_is_relay_id(), output);
  }

  // optional int32 ack_id = 25;
  if (has_ack_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ack_id(), output);
  }

  // repeated bytes ack_node_ids = 26;
  for (int i = 0; i < this->ack_node_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      26, this->ack_node_ids(i), output);
  }

}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes source_id = 1;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->source_id());
    }

    // optional bytes destination_id = 2;
    if (has_destination_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->destination_id());
    }

    // required bool routing_message = 3;
    if (has_routing_message()) {
      total_size += 1 + 1;
    }

    // optional bytes last_id = 4;
    if (has_last_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_id());
    }

    // optional bytes relay_id = 5;
    if (has_relay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->relay_id());
    }

    // optional bytes signature = 7;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // required bool direct = 8;
    if (has_direct()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 replication = 9;
    if (has_replication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replication());
    }

    // optional sint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional int32 cacheable = 11;
    if (has_cacheable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cacheable());
    }

    // optional int32 id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool client_node = 13;
    if (has_client_node()) {
      total_size += 1 + 1;
    }

    // optional bytes relay_connection_id = 14;
    if (has_relay_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->relay_connection_id());
    }

    // optional bool closest_to_this_node = 15;
    if (has_closest_to_this_node()) {
      total_size += 1 + 1;
    }

    // optional bool close_to_this_node = 16;
    if (has_close_to_this_node()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // required bool request = 18;
    if (has_request()) {
      total_size += 2 + 1;
    }

    // required int32 hops_to_live = 19;
    if (has_hops_to_live()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hops_to_live());
    }

    // optional bool visited = 20;
    if (has_visited()) {
      total_size += 2 + 1;
    }

    // optional bytes average_distace = 21;
    if (has_average_distace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->average_distace());
    }

    // optional bytes group_source = 22;
    if (has_group_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_source());
    }

    // optional bytes group_destination = 23;
    if (has_group_destination()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_destination());
    }

    // optional bool actual_destination_is_relay_id = 24;
    if (has_actual_destination_is_relay_id()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 ack_id = 25;
    if (has_ack_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ack_id());
    }

  }
  // repeated bytes data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  // repeated bytes route_history = 17;
  total_size += 2 * this->route_history_size();
  for (int i = 0; i < this->route_history_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->route_history(i));
  }

  // repeated bytes ack_node_ids = 26;
  total_size += 2 * this->ack_node_ids_size();
  for (int i = 0; i < this->ack_node_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->ack_node_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Message*>(&from));
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  route_history_.MergeFrom(from.route_history_);
  ack_node_ids_.MergeFrom(from.ack_node_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_destination_id()) {
      set_destination_id(from.destination_id());
    }
    if (from.has_routing_message()) {
      set_routing_message(from.routing_message());
    }
    if (from.has_last_id()) {
      set_last_id(from.last_id());
    }
    if (from.has_relay_id()) {
      set_relay_id(from.relay_id());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_replication()) {
      set_replication(from.replication());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cacheable()) {
      set_cacheable(from.cacheable());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_client_node()) {
      set_client_node(from.client_node());
    }
    if (from.has_relay_connection_id()) {
      set_relay_connection_id(from.relay_connection_id());
    }
    if (from.has_closest_to_this_node()) {
      set_closest_to_this_node(from.closest_to_this_node());
    }
    if (from.has_close_to_this_node()) {
      set_close_to_this_node(from.close_to_this_node());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_hops_to_live()) {
      set_hops_to_live(from.hops_to_live());
    }
    if (from.has_visited()) {
      set_visited(from.visited());
    }
    if (from.has_average_distace()) {
      set_average_distace(from.average_distace());
    }
    if (from.has_group_source()) {
      set_group_source(from.group_source());
    }
    if (from.has_group_destination()) {
      set_group_destination(from.group_destination());
    }
    if (from.has_actual_destination_is_relay_id()) {
      set_actual_destination_is_relay_id(from.actual_destination_is_relay_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ack_id()) {
      set_ack_id(from.ack_id());
    }
  }
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00061084) != 0x00061084) return false;

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(source_id_, other->source_id_);
    std::swap(destination_id_, other->destination_id_);
    std::swap(routing_message_, other->routing_message_);
    std::swap(last_id_, other->last_id_);
    std::swap(relay_id_, other->relay_id_);
    data_.Swap(&other->data_);
    std::swap(signature_, other->signature_);
    std::swap(direct_, other->direct_);
    std::swap(replication_, other->replication_);
    std::swap(type_, other->type_);
    std::swap(cacheable_, other->cacheable_);
    std::swap(id_, other->id_);
    std::swap(client_node_, other->client_node_);
    std::swap(relay_connection_id_, other->relay_connection_id_);
    std::swap(closest_to_this_node_, other->closest_to_this_node_);
    std::swap(close_to_this_node_, other->close_to_this_node_);
    route_history_.Swap(&other->route_history_);
    std::swap(request_, other->request_);
    std::swap(hops_to_live_, other->hops_to_live_);
    std::swap(visited_, other->visited_);
    std::swap(average_distace_, other->average_distace_);
    std::swap(group_source_, other->group_source_);
    std::swap(group_destination_, other->group_destination_);
    std::swap(actual_destination_is_relay_id_, other->actual_destination_is_relay_id_);
    std::swap(ack_id_, other->ack_id_);
    ack_node_ids_.Swap(&other->ack_node_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Message::GetTypeName() const {
  return "maidsafe.routing.protobuf.Message";
}


// ===================================================================

#ifndef _MSC_VER
const int SignedMessage::kMessageFieldNumber;
const int SignedMessage::kSignatureFieldNumber;
const int SignedMessage::kIdFieldNumber;
#endif  // !_MSC_VER

SignedMessage::SignedMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SignedMessage::InitAsDefaultInstance() {
}

SignedMessage::SignedMessage(const SignedMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SignedMessage::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedMessage::~SignedMessage() {
  SharedDtor();
}

void SignedMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyString()) {
    delete message_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete signature_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SignedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SignedMessage& SignedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

SignedMessage* SignedMessage::default_instance_ = NULL;

SignedMessage* SignedMessage::New() const {
  return new SignedMessage;
}

void SignedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyString()) {
        message_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyString()) {
        signature_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyString()) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SignedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // required bytes id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message(), output);
  }

  // required bytes signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }

  // required bytes id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->id(), output);
  }

}

int SignedMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // required bytes id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SignedMessage*>(&from));
}

void SignedMessage::MergeFrom(const SignedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void SignedMessage::CopyFrom(const SignedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SignedMessage::Swap(SignedMessage* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(signature_, other->signature_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SignedMessage::GetTypeName() const {
  return "maidsafe.routing.protobuf.SignedMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRequest::kContactFieldNumber;
const int ConnectRequest::kPeerIdFieldNumber;
const int ConnectRequest::kBootstrapFieldNumber;
const int ConnectRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

ConnectRequest::ConnectRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConnectRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  contact_ = const_cast< ::maidsafe::routing::protobuf::Contact*>(
      ::maidsafe::routing::protobuf::Contact::internal_default_instance());
#else
  contact_ = const_cast< ::maidsafe::routing::protobuf::Contact*>(&::maidsafe::routing::protobuf::Contact::default_instance());
#endif
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  contact_ = NULL;
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  bootstrap_ = false;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRequest::~ConnectRequest() {
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (peer_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete peer_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete contact_;
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnectRequest& ConnectRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New() const {
  return new ConnectRequest;
}

void ConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contact()) {
      if (contact_ != NULL) contact_->::maidsafe::routing::protobuf::Contact::Clear();
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::GetEmptyString()) {
        peer_id_->clear();
      }
    }
    bootstrap_ = false;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.routing.protobuf.Contact contact = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_id;
        break;
      }

      // required bytes peer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bootstrap;
        break;
      }

      // optional bool bootstrap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bootstrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bootstrap_)));
          set_has_bootstrap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.routing.protobuf.Contact contact = 1;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->contact(), output);
  }

  // required bytes peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->peer_id(), output);
  }

  // optional bool bootstrap = 3;
  if (has_bootstrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bootstrap(), output);
  }

  // optional uint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

}

int ConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.routing.protobuf.Contact contact = 1;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact());
    }

    // required bytes peer_id = 2;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->peer_id());
    }

    // optional bool bootstrap = 3;
    if (has_bootstrap()) {
      total_size += 1 + 1;
    }

    // optional uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnectRequest*>(&from));
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contact()) {
      mutable_contact()->::maidsafe::routing::protobuf::Contact::MergeFrom(from.contact());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_bootstrap()) {
      set_bootstrap(from.bootstrap());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_contact()) {
    if (!this->contact().IsInitialized()) return false;
  }
  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other != this) {
    std::swap(contact_, other->contact_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(bootstrap_, other->bootstrap_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConnectRequest::GetTypeName() const {
  return "maidsafe.routing.protobuf.ConnectRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectResponse::kAnswerFieldNumber;
const int ConnectResponse::kContactFieldNumber;
const int ConnectResponse::kConnectionIdFieldNumber;
const int ConnectResponse::kSeenEndpointFieldNumber;
const int ConnectResponse::kTimestampFieldNumber;
const int ConnectResponse::kOriginalRequestFieldNumber;
const int ConnectResponse::kOriginalSignatureFieldNumber;
#endif  // !_MSC_VER

ConnectResponse::ConnectResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConnectResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  contact_ = const_cast< ::maidsafe::routing::protobuf::Contact*>(
      ::maidsafe::routing::protobuf::Contact::internal_default_instance());
#else
  contact_ = const_cast< ::maidsafe::routing::protobuf::Contact*>(&::maidsafe::routing::protobuf::Contact::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  seen_endpoint_ = const_cast< ::maidsafe::routing::protobuf::Endpoint*>(
      ::maidsafe::routing::protobuf::Endpoint::internal_default_instance());
#else
  seen_endpoint_ = const_cast< ::maidsafe::routing::protobuf::Endpoint*>(&::maidsafe::routing::protobuf::Endpoint::default_instance());
#endif
}

ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  answer_ = 0;
  contact_ = NULL;
  connection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  seen_endpoint_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  original_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  original_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectResponse::~ConnectResponse() {
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
  if (connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete connection_id_;
  }
  if (original_request_ != &::google::protobuf::internal::GetEmptyString()) {
    delete original_request_;
  }
  if (original_signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete original_signature_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete contact_;
    delete seen_endpoint_;
  }
}

void ConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnectResponse& ConnectResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

ConnectResponse* ConnectResponse::default_instance_ = NULL;

ConnectResponse* ConnectResponse::New() const {
  return new ConnectResponse;
}

void ConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answer_ = 0;
    if (has_contact()) {
      if (contact_ != NULL) contact_->::maidsafe::routing::protobuf::Contact::Clear();
    }
    if (has_connection_id()) {
      if (connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
        connection_id_->clear();
      }
    }
    if (has_seen_endpoint()) {
      if (seen_endpoint_ != NULL) seen_endpoint_->::maidsafe::routing::protobuf::Endpoint::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_original_request()) {
      if (original_request_ != &::google::protobuf::internal::GetEmptyString()) {
        original_request_->clear();
      }
    }
    if (has_original_signature()) {
      if (original_signature_ != &::google::protobuf::internal::GetEmptyString()) {
        original_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.routing.protobuf.ConnectResponseType answer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maidsafe::routing::protobuf::ConnectResponseType_IsValid(value)) {
            set_answer(static_cast< ::maidsafe::routing::protobuf::ConnectResponseType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contact;
        break;
      }

      // optional .maidsafe.routing.protobuf.Contact contact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connection_id;
        break;
      }

      // optional bytes connection_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seen_endpoint;
        break;
      }

      // optional .maidsafe.routing.protobuf.Endpoint seen_endpoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seen_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seen_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_original_request;
        break;
      }

      // required bytes original_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_original_signature;
        break;
      }

      // required bytes original_signature = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.routing.protobuf.ConnectResponseType answer = 1;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->answer(), output);
  }

  // optional .maidsafe.routing.protobuf.Contact contact = 2;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->contact(), output);
  }

  // optional bytes connection_id = 3;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->connection_id(), output);
  }

  // optional .maidsafe.routing.protobuf.Endpoint seen_endpoint = 4;
  if (has_seen_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->seen_endpoint(), output);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // required bytes original_request = 6;
  if (has_original_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->original_request(), output);
  }

  // required bytes original_signature = 7;
  if (has_original_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->original_signature(), output);
  }

}

int ConnectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.routing.protobuf.ConnectResponseType answer = 1;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer());
    }

    // optional .maidsafe.routing.protobuf.Contact contact = 2;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact());
    }

    // optional bytes connection_id = 3;
    if (has_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connection_id());
    }

    // optional .maidsafe.routing.protobuf.Endpoint seen_endpoint = 4;
    if (has_seen_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seen_endpoint());
    }

    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required bytes original_request = 6;
    if (has_original_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_request());
    }

    // required bytes original_signature = 7;
    if (has_original_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_signature());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnectResponse*>(&from));
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_contact()) {
      mutable_contact()->::maidsafe::routing::protobuf::Contact::MergeFrom(from.contact());
    }
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_seen_endpoint()) {
      mutable_seen_endpoint()->::maidsafe::routing::protobuf::Endpoint::MergeFrom(from.seen_endpoint());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_original_request()) {
      set_original_request(from.original_request());
    }
    if (from.has_original_signature()) {
      set_original_signature(from.original_signature());
    }
  }
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;

  if (has_contact()) {
    if (!this->contact().IsInitialized()) return false;
  }
  if (has_seen_endpoint()) {
    if (!this->seen_endpoint().IsInitialized()) return false;
  }
  return true;
}

void ConnectResponse::Swap(ConnectResponse* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(contact_, other->contact_);
    std::swap(connection_id_, other->connection_id_);
    std::swap(seen_endpoint_, other->seen_endpoint_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(original_request_, other->original_request_);
    std::swap(original_signature_, other->original_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConnectResponse::GetTypeName() const {
  return "maidsafe.routing.protobuf.ConnectResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectSuccess::kNodeIdFieldNumber;
const int ConnectSuccess::kConnectionIdFieldNumber;
const int ConnectSuccess::kRequestorFieldNumber;
#endif  // !_MSC_VER

ConnectSuccess::ConnectSuccess()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConnectSuccess::InitAsDefaultInstance() {
}

ConnectSuccess::ConnectSuccess(const ConnectSuccess& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectSuccess::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  connection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  requestor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectSuccess::~ConnectSuccess() {
  SharedDtor();
}

void ConnectSuccess::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  if (connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete connection_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConnectSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnectSuccess& ConnectSuccess::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

ConnectSuccess* ConnectSuccess::default_instance_ = NULL;

ConnectSuccess* ConnectSuccess::New() const {
  return new ConnectSuccess;
}

void ConnectSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
    if (has_connection_id()) {
      if (connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
        connection_id_->clear();
      }
    }
    requestor_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConnectSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection_id;
        break;
      }

      // required bytes connection_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestor;
        break;
      }

      // required bool requestor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requestor_)));
          set_has_requestor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

  // required bytes connection_id = 2;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->connection_id(), output);
  }

  // required bool requestor = 3;
  if (has_requestor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->requestor(), output);
  }

}

int ConnectSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // required bytes connection_id = 2;
    if (has_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connection_id());
    }

    // required bool requestor = 3;
    if (has_requestor()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectSuccess::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnectSuccess*>(&from));
}

void ConnectSuccess::MergeFrom(const ConnectSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_requestor()) {
      set_requestor(from.requestor());
    }
  }
}

void ConnectSuccess::CopyFrom(const ConnectSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConnectSuccess::Swap(ConnectSuccess* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(connection_id_, other->connection_id_);
    std::swap(requestor_, other->requestor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConnectSuccess::GetTypeName() const {
  return "maidsafe.routing.protobuf.ConnectSuccess";
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectSuccessAcknowledgement::kNodeIdFieldNumber;
const int ConnectSuccessAcknowledgement::kConnectionIdFieldNumber;
const int ConnectSuccessAcknowledgement::kCloseIdsFieldNumber;
const int ConnectSuccessAcknowledgement::kRequestorFieldNumber;
#endif  // !_MSC_VER

ConnectSuccessAcknowledgement::ConnectSuccessAcknowledgement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConnectSuccessAcknowledgement::InitAsDefaultInstance() {
}

ConnectSuccessAcknowledgement::ConnectSuccessAcknowledgement(const ConnectSuccessAcknowledgement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectSuccessAcknowledgement::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  connection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  requestor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectSuccessAcknowledgement::~ConnectSuccessAcknowledgement() {
  SharedDtor();
}

void ConnectSuccessAcknowledgement::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  if (connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete connection_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConnectSuccessAcknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnectSuccessAcknowledgement& ConnectSuccessAcknowledgement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

ConnectSuccessAcknowledgement* ConnectSuccessAcknowledgement::default_instance_ = NULL;

ConnectSuccessAcknowledgement* ConnectSuccessAcknowledgement::New() const {
  return new ConnectSuccessAcknowledgement;
}

void ConnectSuccessAcknowledgement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
    if (has_connection_id()) {
      if (connection_id_ != &::google::protobuf::internal::GetEmptyString()) {
        connection_id_->clear();
      }
    }
    requestor_ = false;
  }
  close_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConnectSuccessAcknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection_id;
        break;
      }

      // required bytes connection_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_close_ids;
        break;
      }

      // repeated bytes close_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_close_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_close_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_close_ids;
        if (input->ExpectTag(32)) goto parse_requestor;
        break;
      }

      // required bool requestor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requestor_)));
          set_has_requestor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectSuccessAcknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

  // required bytes connection_id = 2;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->connection_id(), output);
  }

  // repeated bytes close_ids = 3;
  for (int i = 0; i < this->close_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->close_ids(i), output);
  }

  // required bool requestor = 4;
  if (has_requestor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->requestor(), output);
  }

}

int ConnectSuccessAcknowledgement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // required bytes connection_id = 2;
    if (has_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connection_id());
    }

    // required bool requestor = 4;
    if (has_requestor()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes close_ids = 3;
  total_size += 1 * this->close_ids_size();
  for (int i = 0; i < this->close_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->close_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectSuccessAcknowledgement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnectSuccessAcknowledgement*>(&from));
}

void ConnectSuccessAcknowledgement::MergeFrom(const ConnectSuccessAcknowledgement& from) {
  GOOGLE_CHECK_NE(&from, this);
  close_ids_.MergeFrom(from.close_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_requestor()) {
      set_requestor(from.requestor());
    }
  }
}

void ConnectSuccessAcknowledgement::CopyFrom(const ConnectSuccessAcknowledgement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectSuccessAcknowledgement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void ConnectSuccessAcknowledgement::Swap(ConnectSuccessAcknowledgement* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(connection_id_, other->connection_id_);
    close_ids_.Swap(&other->close_ids_);
    std::swap(requestor_, other->requestor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConnectSuccessAcknowledgement::GetTypeName() const {
  return "maidsafe.routing.protobuf.ConnectSuccessAcknowledgement";
}


// ===================================================================

#ifndef _MSC_VER
const int FindNodesRequest::kNumNodesRequestedFieldNumber;
const int FindNodesRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

FindNodesRequest::FindNodesRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FindNodesRequest::InitAsDefaultInstance() {
}

FindNodesRequest::FindNodesRequest(const FindNodesRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FindNodesRequest::SharedCtor() {
  _cached_size_ = 0;
  num_nodes_requested_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindNodesRequest::~FindNodesRequest() {
  SharedDtor();
}

void FindNodesRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FindNodesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FindNodesRequest& FindNodesRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

FindNodesRequest* FindNodesRequest::default_instance_ = NULL;

FindNodesRequest* FindNodesRequest::New() const {
  return new FindNodesRequest;
}

void FindNodesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_nodes_requested_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FindNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_nodes_requested = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_nodes_requested_)));
          set_has_num_nodes_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num_nodes_requested = 1;
  if (has_num_nodes_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_nodes_requested(), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

}

int FindNodesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_nodes_requested = 1;
    if (has_num_nodes_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_nodes_requested());
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindNodesRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FindNodesRequest*>(&from));
}

void FindNodesRequest::MergeFrom(const FindNodesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_nodes_requested()) {
      set_num_nodes_requested(from.num_nodes_requested());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void FindNodesRequest::CopyFrom(const FindNodesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNodesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FindNodesRequest::Swap(FindNodesRequest* other) {
  if (other != this) {
    std::swap(num_nodes_requested_, other->num_nodes_requested_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FindNodesRequest::GetTypeName() const {
  return "maidsafe.routing.protobuf.FindNodesRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FindNodesResponse::kNodesFieldNumber;
const int FindNodesResponse::kTimestampFieldNumber;
const int FindNodesResponse::kOriginalRequestFieldNumber;
const int FindNodesResponse::kOriginalSignatureFieldNumber;
#endif  // !_MSC_VER

FindNodesResponse::FindNodesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FindNodesResponse::InitAsDefaultInstance() {
}

FindNodesResponse::FindNodesResponse(const FindNodesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FindNodesResponse::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  original_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  original_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindNodesResponse::~FindNodesResponse() {
  SharedDtor();
}

void FindNodesResponse::SharedDtor() {
  if (original_request_ != &::google::protobuf::internal::GetEmptyString()) {
    delete original_request_;
  }
  if (original_signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete original_signature_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FindNodesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FindNodesResponse& FindNodesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

FindNodesResponse* FindNodesResponse::default_instance_ = NULL;

FindNodesResponse* FindNodesResponse::New() const {
  return new FindNodesResponse;
}

void FindNodesResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_original_request()) {
      if (original_request_ != &::google::protobuf::internal::GetEmptyString()) {
        original_request_->clear();
      }
    }
    if (has_original_signature()) {
      if (original_signature_ != &::google::protobuf::internal::GetEmptyString()) {
        original_signature_->clear();
      }
    }
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FindNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_original_request;
        break;
      }

      // required bytes original_request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_original_signature;
        break;
      }

      // required bytes original_signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->nodes(i), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // required bytes original_request = 3;
  if (has_original_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->original_request(), output);
  }

  // required bytes original_signature = 4;
  if (has_original_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->original_signature(), output);
  }

}

int FindNodesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required bytes original_request = 3;
    if (has_original_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_request());
    }

    // required bytes original_signature = 4;
    if (has_original_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_signature());
    }

  }
  // repeated bytes nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindNodesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FindNodesResponse*>(&from));
}

void FindNodesResponse::MergeFrom(const FindNodesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_original_request()) {
      set_original_request(from.original_request());
    }
    if (from.has_original_signature()) {
      set_original_signature(from.original_signature());
    }
  }
}

void FindNodesResponse::CopyFrom(const FindNodesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNodesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void FindNodesResponse::Swap(FindNodesResponse* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(original_request_, other->original_request_);
    std::swap(original_signature_, other->original_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FindNodesResponse::GetTypeName() const {
  return "maidsafe.routing.protobuf.FindNodesResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PingRequest::kPingFieldNumber;
const int PingRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

PingRequest::PingRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PingRequest::InitAsDefaultInstance() {
}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PingRequest::SharedCtor() {
  _cached_size_ = 0;
  ping_ = false;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRequest::~PingRequest() {
  SharedDtor();
}

void PingRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PingRequest& PingRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New() const {
  return new PingRequest;
}

void PingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ping_ = false;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ping = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ping_)));
          set_has_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ping = 1;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ping(), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

}

int PingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ping = 1;
    if (has_ping()) {
      total_size += 1 + 1;
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PingRequest*>(&from));
}

void PingRequest::MergeFrom(const PingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ping()) {
      set_ping(from.ping());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void PingRequest::CopyFrom(const PingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other != this) {
    std::swap(ping_, other->ping_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PingRequest::GetTypeName() const {
  return "maidsafe.routing.protobuf.PingRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PingResponse::kPongFieldNumber;
const int PingResponse::kTimestampFieldNumber;
const int PingResponse::kOriginalRequestFieldNumber;
const int PingResponse::kOriginalSignatureFieldNumber;
#endif  // !_MSC_VER

PingResponse::PingResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PingResponse::InitAsDefaultInstance() {
}

PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PingResponse::SharedCtor() {
  _cached_size_ = 0;
  pong_ = false;
  timestamp_ = GOOGLE_ULONGLONG(0);
  original_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  original_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingResponse::~PingResponse() {
  SharedDtor();
}

void PingResponse::SharedDtor() {
  if (original_request_ != &::google::protobuf::internal::GetEmptyString()) {
    delete original_request_;
  }
  if (original_signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete original_signature_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PingResponse& PingResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

PingResponse* PingResponse::default_instance_ = NULL;

PingResponse* PingResponse::New() const {
  return new PingResponse;
}

void PingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pong_ = false;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_original_request()) {
      if (original_request_ != &::google::protobuf::internal::GetEmptyString()) {
        original_request_->clear();
      }
    }
    if (has_original_signature()) {
      if (original_signature_ != &::google::protobuf::internal::GetEmptyString()) {
        original_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool pong = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pong_)));
          set_has_pong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_original_request;
        break;
      }

      // required bytes original_request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_original_signature;
        break;
      }

      // required bytes original_signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool pong = 1;
  if (has_pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pong(), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // required bytes original_request = 3;
  if (has_original_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->original_request(), output);
  }

  // required bytes original_signature = 4;
  if (has_original_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->original_signature(), output);
  }

}

int PingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool pong = 1;
    if (has_pong()) {
      total_size += 1 + 1;
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required bytes original_request = 3;
    if (has_original_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_request());
    }

    // required bytes original_signature = 4;
    if (has_original_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_signature());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PingResponse*>(&from));
}

void PingResponse::MergeFrom(const PingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pong()) {
      set_pong(from.pong());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_original_request()) {
      set_original_request(from.original_request());
    }
    if (from.has_original_signature()) {
      set_original_signature(from.original_signature());
    }
  }
}

void PingResponse::CopyFrom(const PingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void PingResponse::Swap(PingResponse* other) {
  if (other != this) {
    std::swap(pong_, other->pong_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(original_request_, other->original_request_);
    std::swap(original_signature_, other->original_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PingResponse::GetTypeName() const {
  return "maidsafe.routing.protobuf.PingResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRequest::kPeerIdFieldNumber;
const int RemoveRequest::kAttemptedNodesFieldNumber;
#endif  // !_MSC_VER

RemoveRequest::RemoveRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RemoveRequest::InitAsDefaultInstance() {
}

RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveRequest::SharedCtor() {
  _cached_size_ = 0;
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRequest::~RemoveRequest() {
  SharedDtor();
}

void RemoveRequest::SharedDtor() {
  if (peer_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete peer_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveRequest& RemoveRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

RemoveRequest* RemoveRequest::default_instance_ = NULL;

RemoveRequest* RemoveRequest::New() const {
  return new RemoveRequest;
}

void RemoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::GetEmptyString()) {
        peer_id_->clear();
      }
    }
  }
  attempted_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes peer_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attempted_nodes;
        break;
      }

      // repeated bytes attempted_nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attempted_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attempted_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attempted_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes peer_id = 1;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->peer_id(), output);
  }

  // repeated bytes attempted_nodes = 2;
  for (int i = 0; i < this->attempted_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->attempted_nodes(i), output);
  }

}

int RemoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes peer_id = 1;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->peer_id());
    }

  }
  // repeated bytes attempted_nodes = 2;
  total_size += 1 * this->attempted_nodes_size();
  for (int i = 0; i < this->attempted_nodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attempted_nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveRequest*>(&from));
}

void RemoveRequest::MergeFrom(const RemoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attempted_nodes_.MergeFrom(from.attempted_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
  }
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveRequest::Swap(RemoveRequest* other) {
  if (other != this) {
    std::swap(peer_id_, other->peer_id_);
    attempted_nodes_.Swap(&other->attempted_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveRequest::GetTypeName() const {
  return "maidsafe.routing.protobuf.RemoveRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveResponse::kSuccessFieldNumber;
const int RemoveResponse::kPeerIdFieldNumber;
const int RemoveResponse::kOriginalRequestFieldNumber;
#endif  // !_MSC_VER

RemoveResponse::RemoveResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RemoveResponse::InitAsDefaultInstance() {
}

RemoveResponse::RemoveResponse(const RemoveResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  original_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveResponse::~RemoveResponse() {
  SharedDtor();
}

void RemoveResponse::SharedDtor() {
  if (peer_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete peer_id_;
  }
  if (original_request_ != &::google::protobuf::internal::GetEmptyString()) {
    delete original_request_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveResponse& RemoveResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

RemoveResponse* RemoveResponse::default_instance_ = NULL;

RemoveResponse* RemoveResponse::New() const {
  return new RemoveResponse;
}

void RemoveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::GetEmptyString()) {
        peer_id_->clear();
      }
    }
    if (has_original_request()) {
      if (original_request_ != &::google::protobuf::internal::GetEmptyString()) {
        original_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_id;
        break;
      }

      // required bytes peer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_original_request;
        break;
      }

      // required bytes original_request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required bytes peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->peer_id(), output);
  }

  // required bytes original_request = 3;
  if (has_original_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->original_request(), output);
  }

}

int RemoveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // required bytes peer_id = 2;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->peer_id());
    }

    // required bytes original_request = 3;
    if (has_original_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_request());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveResponse*>(&from));
}

void RemoveResponse::MergeFrom(const RemoveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_original_request()) {
      set_original_request(from.original_request());
    }
  }
}

void RemoveResponse::CopyFrom(const RemoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RemoveResponse::Swap(RemoveResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(original_request_, other->original_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveResponse::GetTypeName() const {
  return "maidsafe.routing.protobuf.RemoveResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int NodeIdList_NodeId::kNodeIdFieldNumber;
#endif  // !_MSC_VER

NodeIdList_NodeId::NodeIdList_NodeId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NodeIdList_NodeId::InitAsDefaultInstance() {
}

NodeIdList_NodeId::NodeIdList_NodeId(const NodeIdList_NodeId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NodeIdList_NodeId::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeIdList_NodeId::~NodeIdList_NodeId() {
  SharedDtor();
}

void NodeIdList_NodeId::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NodeIdList_NodeId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeIdList_NodeId& NodeIdList_NodeId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

NodeIdList_NodeId* NodeIdList_NodeId::default_instance_ = NULL;

NodeIdList_NodeId* NodeIdList_NodeId::New() const {
  return new NodeIdList_NodeId;
}

void NodeIdList_NodeId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NodeIdList_NodeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeIdList_NodeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

}

int NodeIdList_NodeId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeIdList_NodeId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeIdList_NodeId*>(&from));
}

void NodeIdList_NodeId::MergeFrom(const NodeIdList_NodeId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
}

void NodeIdList_NodeId::CopyFrom(const NodeIdList_NodeId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeIdList_NodeId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeIdList_NodeId::Swap(NodeIdList_NodeId* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NodeIdList_NodeId::GetTypeName() const {
  return "maidsafe.routing.protobuf.NodeIdList.NodeId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeIdList::kNodeIdListFieldNumber;
#endif  // !_MSC_VER

NodeIdList::NodeIdList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NodeIdList::InitAsDefaultInstance() {
}

NodeIdList::NodeIdList(const NodeIdList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NodeIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeIdList::~NodeIdList() {
  SharedDtor();
}

void NodeIdList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NodeIdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeIdList& NodeIdList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

NodeIdList* NodeIdList::default_instance_ = NULL;

NodeIdList* NodeIdList::New() const {
  return new NodeIdList;
}

void NodeIdList::Clear() {
  node_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NodeIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .maidsafe.routing.protobuf.NodeIdList.NodeId node_id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_id_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_node_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .maidsafe.routing.protobuf.NodeIdList.NodeId node_id_list = 1;
  for (int i = 0; i < this->node_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->node_id_list(i), output);
  }

}

int NodeIdList::ByteSize() const {
  int total_size = 0;

  // repeated .maidsafe.routing.protobuf.NodeIdList.NodeId node_id_list = 1;
  total_size += 1 * this->node_id_list_size();
  for (int i = 0; i < this->node_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_id_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeIdList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeIdList*>(&from));
}

void NodeIdList::MergeFrom(const NodeIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_list_.MergeFrom(from.node_id_list_);
}

void NodeIdList::CopyFrom(const NodeIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeIdList::IsInitialized() const {

  for (int i = 0; i < node_id_list_size(); i++) {
    if (!this->node_id_list(i).IsInitialized()) return false;
  }
  return true;
}

void NodeIdList::Swap(NodeIdList* other) {
  if (other != this) {
    node_id_list_.Swap(&other->node_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NodeIdList::GetTypeName() const {
  return "maidsafe.routing.protobuf.NodeIdList";
}


// ===================================================================

#ifndef _MSC_VER
const int BasicNodeInfo::kNodeIdFieldNumber;
const int BasicNodeInfo::kRankFieldNumber;
#endif  // !_MSC_VER

BasicNodeInfo::BasicNodeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BasicNodeInfo::InitAsDefaultInstance() {
}

BasicNodeInfo::BasicNodeInfo(const BasicNodeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BasicNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicNodeInfo::~BasicNodeInfo() {
  SharedDtor();
}

void BasicNodeInfo::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BasicNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BasicNodeInfo& BasicNodeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

BasicNodeInfo* BasicNodeInfo::default_instance_ = NULL;

BasicNodeInfo* BasicNodeInfo::New() const {
  return new BasicNodeInfo;
}

void BasicNodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BasicNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

}

int BasicNodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicNodeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BasicNodeInfo*>(&from));
}

void BasicNodeInfo::MergeFrom(const BasicNodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
}

void BasicNodeInfo::CopyFrom(const BasicNodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicNodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BasicNodeInfo::Swap(BasicNodeInfo* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BasicNodeInfo::GetTypeName() const {
  return "maidsafe.routing.protobuf.BasicNodeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ClosestNodesUpdate::kNodeFieldNumber;
const int ClosestNodesUpdate::kNodesInfoFieldNumber;
#endif  // !_MSC_VER

ClosestNodesUpdate::ClosestNodesUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClosestNodesUpdate::InitAsDefaultInstance() {
}

ClosestNodesUpdate::ClosestNodesUpdate(const ClosestNodesUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClosestNodesUpdate::SharedCtor() {
  _cached_size_ = 0;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClosestNodesUpdate::~ClosestNodesUpdate() {
  SharedDtor();
}

void ClosestNodesUpdate::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClosestNodesUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClosestNodesUpdate& ClosestNodesUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

ClosestNodesUpdate* ClosestNodesUpdate::default_instance_ = NULL;

ClosestNodesUpdate* ClosestNodesUpdate::New() const {
  return new ClosestNodesUpdate;
}

void ClosestNodesUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyString()) {
        node_->clear();
      }
    }
  }
  nodes_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClosestNodesUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes_info;
        break;
      }

      // repeated .maidsafe.routing.protobuf.BasicNodeInfo nodes_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClosestNodesUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node(), output);
  }

  // repeated .maidsafe.routing.protobuf.BasicNodeInfo nodes_info = 2;
  for (int i = 0; i < this->nodes_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->nodes_info(i), output);
  }

}

int ClosestNodesUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node());
    }

  }
  // repeated .maidsafe.routing.protobuf.BasicNodeInfo nodes_info = 2;
  total_size += 1 * this->nodes_info_size();
  for (int i = 0; i < this->nodes_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClosestNodesUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClosestNodesUpdate*>(&from));
}

void ClosestNodesUpdate::MergeFrom(const ClosestNodesUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_info_.MergeFrom(from.nodes_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
  }
}

void ClosestNodesUpdate::CopyFrom(const ClosestNodesUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosestNodesUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < nodes_info_size(); i++) {
    if (!this->nodes_info(i).IsInitialized()) return false;
  }
  return true;
}

void ClosestNodesUpdate::Swap(ClosestNodesUpdate* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    nodes_info_.Swap(&other->nodes_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClosestNodesUpdate::GetTypeName() const {
  return "maidsafe.routing.protobuf.ClosestNodesUpdate";
}


// ===================================================================

#ifndef _MSC_VER
const int InformClientOfhNewCloseNode::kNodeIdFieldNumber;
#endif  // !_MSC_VER

InformClientOfhNewCloseNode::InformClientOfhNewCloseNode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InformClientOfhNewCloseNode::InitAsDefaultInstance() {
}

InformClientOfhNewCloseNode::InformClientOfhNewCloseNode(const InformClientOfhNewCloseNode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InformClientOfhNewCloseNode::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InformClientOfhNewCloseNode::~InformClientOfhNewCloseNode() {
  SharedDtor();
}

void InformClientOfhNewCloseNode::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InformClientOfhNewCloseNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InformClientOfhNewCloseNode& InformClientOfhNewCloseNode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

InformClientOfhNewCloseNode* InformClientOfhNewCloseNode::default_instance_ = NULL;

InformClientOfhNewCloseNode* InformClientOfhNewCloseNode::New() const {
  return new InformClientOfhNewCloseNode;
}

void InformClientOfhNewCloseNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InformClientOfhNewCloseNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InformClientOfhNewCloseNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

}

int InformClientOfhNewCloseNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InformClientOfhNewCloseNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InformClientOfhNewCloseNode*>(&from));
}

void InformClientOfhNewCloseNode::MergeFrom(const InformClientOfhNewCloseNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
}

void InformClientOfhNewCloseNode::CopyFrom(const InformClientOfhNewCloseNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InformClientOfhNewCloseNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InformClientOfhNewCloseNode::Swap(InformClientOfhNewCloseNode* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InformClientOfhNewCloseNode::GetTypeName() const {
  return "maidsafe.routing.protobuf.InformClientOfhNewCloseNode";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroup::kNodeIdFieldNumber;
const int GetGroup::kGroupNodesIdFieldNumber;
#endif  // !_MSC_VER

GetGroup::GetGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetGroup::InitAsDefaultInstance() {
}

GetGroup::GetGroup(const GetGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetGroup::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroup::~GetGroup() {
  SharedDtor();
}

void GetGroup::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGroup& GetGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

GetGroup* GetGroup::default_instance_ = NULL;

GetGroup* GetGroup::New() const {
  return new GetGroup;
}

void GetGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
  }
  group_nodes_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_nodes_id;
        break;
      }

      // repeated bytes group_nodes_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_nodes_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_group_nodes_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_nodes_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

  // repeated bytes group_nodes_id = 2;
  for (int i = 0; i < this->group_nodes_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->group_nodes_id(i), output);
  }

}

int GetGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

  }
  // repeated bytes group_nodes_id = 2;
  total_size += 1 * this->group_nodes_id_size();
  for (int i = 0; i < this->group_nodes_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->group_nodes_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGroup*>(&from));
}

void GetGroup::MergeFrom(const GetGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_nodes_id_.MergeFrom(from.group_nodes_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
}

void GetGroup::CopyFrom(const GetGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetGroup::Swap(GetGroup* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    group_nodes_id_.Swap(&other->group_nodes_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGroup::GetTypeName() const {
  return "maidsafe.routing.protobuf.GetGroup";
}


// ===================================================================

#ifndef _MSC_VER
const int NodeInfo::kNodeIdFieldNumber;
const int NodeInfo::kRankFieldNumber;
const int NodeInfo::kDimensionListFieldNumber;
#endif  // !_MSC_VER

NodeInfo::NodeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NodeInfo::InitAsDefaultInstance() {
}

NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo::~NodeInfo() {
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeInfo& NodeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2frouting_2frouting_2eproto();
#endif
  return *default_instance_;
}

NodeInfo* NodeInfo::default_instance_ = NULL;

NodeInfo* NodeInfo::New() const {
  return new NodeInfo;
}

void NodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
    rank_ = 0;
  }
  dimension_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dimension_list;
        break;
      }

      // repeated int32 dimension_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_dimension_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dimension_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dimension_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // repeated int32 dimension_list = 3;
  for (int i = 0; i < this->dimension_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->dimension_list(i), output);
  }

}

int NodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated int32 dimension_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dimension_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dimension_list(i));
    }
    total_size += 1 * this->dimension_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeInfo*>(&from));
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dimension_list_.MergeFrom(from.dimension_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(rank_, other->rank_);
    dimension_list_.Swap(&other->dimension_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NodeInfo::GetTypeName() const {
  return "maidsafe.routing.protobuf.NodeInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace routing
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
