// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/drive/proto_structs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/drive/proto_structs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace drive {
namespace detail {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fdrive_2fproto_5fstructs_2eproto() {
  delete AttributesArchive::default_instance_;
  delete MetaData::default_instance_;
  delete Directory::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AttributesArchive::default_instance_ = new AttributesArchive();
  MetaData::default_instance_ = new MetaData();
  Directory::default_instance_ = new Directory();
  AttributesArchive::default_instance_->InitAsDefaultInstance();
  MetaData::default_instance_->InitAsDefaultInstance();
  Directory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fdrive_2fproto_5fstructs_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fdrive_2fproto_5fstructs_2eproto {
  StaticDescriptorInitializer_maidsafe_2fdrive_2fproto_5fstructs_2eproto() {
    protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fdrive_2fproto_5fstructs_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int AttributesArchive::kStSizeFieldNumber;
const int AttributesArchive::kCreationTimeFieldNumber;
const int AttributesArchive::kLastAccessTimeFieldNumber;
const int AttributesArchive::kLastWriteTimeFieldNumber;
const int AttributesArchive::kStModeFieldNumber;
const int AttributesArchive::kWinAttributesFieldNumber;
const int AttributesArchive::kLinkToFieldNumber;
const int AttributesArchive::kStDevFieldNumber;
const int AttributesArchive::kStInoFieldNumber;
const int AttributesArchive::kStNlinkFieldNumber;
const int AttributesArchive::kStUidFieldNumber;
const int AttributesArchive::kStGidFieldNumber;
const int AttributesArchive::kStRdevFieldNumber;
const int AttributesArchive::kStBlksizeFieldNumber;
const int AttributesArchive::kStBlocksFieldNumber;
#endif  // !_MSC_VER

AttributesArchive::AttributesArchive()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AttributesArchive::InitAsDefaultInstance() {
}

AttributesArchive::AttributesArchive(const AttributesArchive& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AttributesArchive::SharedCtor() {
  _cached_size_ = 0;
  st_size_ = GOOGLE_ULONGLONG(0);
  creation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  last_access_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  last_write_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  st_mode_ = 0u;
  win_attributes_ = GOOGLE_ULONGLONG(0);
  link_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  st_dev_ = 0u;
  st_ino_ = 0u;
  st_nlink_ = 0u;
  st_uid_ = 0u;
  st_gid_ = 0u;
  st_rdev_ = 0u;
  st_blksize_ = 0u;
  st_blocks_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttributesArchive::~AttributesArchive() {
  SharedDtor();
}

void AttributesArchive::SharedDtor() {
  if (creation_time_ != &::google::protobuf::internal::GetEmptyString()) {
    delete creation_time_;
  }
  if (last_access_time_ != &::google::protobuf::internal::GetEmptyString()) {
    delete last_access_time_;
  }
  if (last_write_time_ != &::google::protobuf::internal::GetEmptyString()) {
    delete last_write_time_;
  }
  if (link_to_ != &::google::protobuf::internal::GetEmptyString()) {
    delete link_to_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AttributesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttributesArchive& AttributesArchive::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto();
#endif
  return *default_instance_;
}

AttributesArchive* AttributesArchive::default_instance_ = NULL;

AttributesArchive* AttributesArchive::New() const {
  return new AttributesArchive;
}

void AttributesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    st_size_ = GOOGLE_ULONGLONG(0);
    if (has_creation_time()) {
      if (creation_time_ != &::google::protobuf::internal::GetEmptyString()) {
        creation_time_->clear();
      }
    }
    if (has_last_access_time()) {
      if (last_access_time_ != &::google::protobuf::internal::GetEmptyString()) {
        last_access_time_->clear();
      }
    }
    if (has_last_write_time()) {
      if (last_write_time_ != &::google::protobuf::internal::GetEmptyString()) {
        last_write_time_->clear();
      }
    }
    st_mode_ = 0u;
    win_attributes_ = GOOGLE_ULONGLONG(0);
    if (has_link_to()) {
      if (link_to_ != &::google::protobuf::internal::GetEmptyString()) {
        link_to_->clear();
      }
    }
    st_dev_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    st_ino_ = 0u;
    st_nlink_ = 0u;
    st_uid_ = 0u;
    st_gid_ = 0u;
    st_rdev_ = 0u;
    st_blksize_ = 0u;
    st_blocks_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AttributesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 st_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_size_)));
          set_has_st_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creation_time;
        break;
      }

      // required bytes creation_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creation_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_creation_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_last_access_time;
        break;
      }

      // required bytes last_access_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_access_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_access_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_last_write_time;
        break;
      }

      // required bytes last_write_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_write_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_write_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_st_mode;
        break;
      }

      // required uint32 st_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_mode_)));
          set_has_st_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_attributes;
        break;
      }

      // optional uint64 win_attributes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_attributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &win_attributes_)));
          set_has_win_attributes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_link_to;
        break;
      }

      // optional bytes link_to = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_link_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_st_dev;
        break;
      }

      // optional uint32 st_dev = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_dev_)));
          set_has_st_dev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_st_ino;
        break;
      }

      // optional uint32 st_ino = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_ino:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_ino_)));
          set_has_st_ino();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_st_nlink;
        break;
      }

      // optional uint32 st_nlink = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_nlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_nlink_)));
          set_has_st_nlink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_st_uid;
        break;
      }

      // optional uint32 st_uid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_uid_)));
          set_has_st_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_st_gid;
        break;
      }

      // optional uint32 st_gid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_gid_)));
          set_has_st_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_st_rdev;
        break;
      }

      // optional uint32 st_rdev = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_rdev_)));
          set_has_st_rdev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_st_blksize;
        break;
      }

      // optional uint32 st_blksize = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_blksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_blksize_)));
          set_has_st_blksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_st_blocks;
        break;
      }

      // optional uint32 st_blocks = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_blocks_)));
          set_has_st_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttributesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 st_size = 1;
  if (has_st_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->st_size(), output);
  }

  // required bytes creation_time = 2;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->creation_time(), output);
  }

  // required bytes last_access_time = 3;
  if (has_last_access_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->last_access_time(), output);
  }

  // required bytes last_write_time = 4;
  if (has_last_write_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->last_write_time(), output);
  }

  // required uint32 st_mode = 5;
  if (has_st_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->st_mode(), output);
  }

  // optional uint64 win_attributes = 6;
  if (has_win_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->win_attributes(), output);
  }

  // optional bytes link_to = 7;
  if (has_link_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->link_to(), output);
  }

  // optional uint32 st_dev = 8;
  if (has_st_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->st_dev(), output);
  }

  // optional uint32 st_ino = 9;
  if (has_st_ino()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->st_ino(), output);
  }

  // optional uint32 st_nlink = 10;
  if (has_st_nlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->st_nlink(), output);
  }

  // optional uint32 st_uid = 11;
  if (has_st_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->st_uid(), output);
  }

  // optional uint32 st_gid = 12;
  if (has_st_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->st_gid(), output);
  }

  // optional uint32 st_rdev = 13;
  if (has_st_rdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->st_rdev(), output);
  }

  // optional uint32 st_blksize = 14;
  if (has_st_blksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->st_blksize(), output);
  }

  // optional uint32 st_blocks = 15;
  if (has_st_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->st_blocks(), output);
  }

}

int AttributesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 st_size = 1;
    if (has_st_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->st_size());
    }

    // required bytes creation_time = 2;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->creation_time());
    }

    // required bytes last_access_time = 3;
    if (has_last_access_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_access_time());
    }

    // required bytes last_write_time = 4;
    if (has_last_write_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_write_time());
    }

    // required uint32 st_mode = 5;
    if (has_st_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_mode());
    }

    // optional uint64 win_attributes = 6;
    if (has_win_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->win_attributes());
    }

    // optional bytes link_to = 7;
    if (has_link_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->link_to());
    }

    // optional uint32 st_dev = 8;
    if (has_st_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_dev());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 st_ino = 9;
    if (has_st_ino()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_ino());
    }

    // optional uint32 st_nlink = 10;
    if (has_st_nlink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_nlink());
    }

    // optional uint32 st_uid = 11;
    if (has_st_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_uid());
    }

    // optional uint32 st_gid = 12;
    if (has_st_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_gid());
    }

    // optional uint32 st_rdev = 13;
    if (has_st_rdev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_rdev());
    }

    // optional uint32 st_blksize = 14;
    if (has_st_blksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_blksize());
    }

    // optional uint32 st_blocks = 15;
    if (has_st_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_blocks());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributesArchive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AttributesArchive*>(&from));
}

void AttributesArchive::MergeFrom(const AttributesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_st_size()) {
      set_st_size(from.st_size());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_last_access_time()) {
      set_last_access_time(from.last_access_time());
    }
    if (from.has_last_write_time()) {
      set_last_write_time(from.last_write_time());
    }
    if (from.has_st_mode()) {
      set_st_mode(from.st_mode());
    }
    if (from.has_win_attributes()) {
      set_win_attributes(from.win_attributes());
    }
    if (from.has_link_to()) {
      set_link_to(from.link_to());
    }
    if (from.has_st_dev()) {
      set_st_dev(from.st_dev());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_st_ino()) {
      set_st_ino(from.st_ino());
    }
    if (from.has_st_nlink()) {
      set_st_nlink(from.st_nlink());
    }
    if (from.has_st_uid()) {
      set_st_uid(from.st_uid());
    }
    if (from.has_st_gid()) {
      set_st_gid(from.st_gid());
    }
    if (from.has_st_rdev()) {
      set_st_rdev(from.st_rdev());
    }
    if (from.has_st_blksize()) {
      set_st_blksize(from.st_blksize());
    }
    if (from.has_st_blocks()) {
      set_st_blocks(from.st_blocks());
    }
  }
}

void AttributesArchive::CopyFrom(const AttributesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AttributesArchive::Swap(AttributesArchive* other) {
  if (other != this) {
    std::swap(st_size_, other->st_size_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(last_access_time_, other->last_access_time_);
    std::swap(last_write_time_, other->last_write_time_);
    std::swap(st_mode_, other->st_mode_);
    std::swap(win_attributes_, other->win_attributes_);
    std::swap(link_to_, other->link_to_);
    std::swap(st_dev_, other->st_dev_);
    std::swap(st_ino_, other->st_ino_);
    std::swap(st_nlink_, other->st_nlink_);
    std::swap(st_uid_, other->st_uid_);
    std::swap(st_gid_, other->st_gid_);
    std::swap(st_rdev_, other->st_rdev_);
    std::swap(st_blksize_, other->st_blksize_);
    std::swap(st_blocks_, other->st_blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AttributesArchive::GetTypeName() const {
  return "maidsafe.drive.detail.protobuf.AttributesArchive";
}


// ===================================================================

#ifndef _MSC_VER
const int MetaData::kNameFieldNumber;
const int MetaData::kAttributesArchiveFieldNumber;
const int MetaData::kSerialisedDataMapFieldNumber;
const int MetaData::kDirectoryIdFieldNumber;
#endif  // !_MSC_VER

MetaData::MetaData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MetaData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attributes_archive_ = const_cast< ::maidsafe::drive::detail::protobuf::AttributesArchive*>(
      ::maidsafe::drive::detail::protobuf::AttributesArchive::internal_default_instance());
#else
  attributes_archive_ = const_cast< ::maidsafe::drive::detail::protobuf::AttributesArchive*>(&::maidsafe::drive::detail::protobuf::AttributesArchive::default_instance());
#endif
}

MetaData::MetaData(const MetaData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MetaData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  attributes_archive_ = NULL;
  serialised_data_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  directory_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaData::~MetaData() {
  SharedDtor();
}

void MetaData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (serialised_data_map_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_map_;
  }
  if (directory_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete directory_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attributes_archive_;
  }
}

void MetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MetaData& MetaData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto();
#endif
  return *default_instance_;
}

MetaData* MetaData::default_instance_ = NULL;

MetaData* MetaData::New() const {
  return new MetaData;
}

void MetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_attributes_archive()) {
      if (attributes_archive_ != NULL) attributes_archive_->::maidsafe::drive::detail::protobuf::AttributesArchive::Clear();
    }
    if (has_serialised_data_map()) {
      if (serialised_data_map_ != &::google::protobuf::internal::GetEmptyString()) {
        serialised_data_map_->clear();
      }
    }
    if (has_directory_id()) {
      if (directory_id_ != &::google::protobuf::internal::GetEmptyString()) {
        directory_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes_archive;
        break;
      }

      // required .maidsafe.drive.detail.protobuf.AttributesArchive attributes_archive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes_archive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes_archive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serialised_data_map;
        break;
      }

      // optional bytes serialised_data_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_data_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_data_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_directory_id;
        break;
      }

      // optional bytes directory_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directory_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_directory_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // required .maidsafe.drive.detail.protobuf.AttributesArchive attributes_archive = 2;
  if (has_attributes_archive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->attributes_archive(), output);
  }

  // optional bytes serialised_data_map = 3;
  if (has_serialised_data_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->serialised_data_map(), output);
  }

  // optional bytes directory_id = 4;
  if (has_directory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->directory_id(), output);
  }

}

int MetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required .maidsafe.drive.detail.protobuf.AttributesArchive attributes_archive = 2;
    if (has_attributes_archive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes_archive());
    }

    // optional bytes serialised_data_map = 3;
    if (has_serialised_data_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_data_map());
    }

    // optional bytes directory_id = 4;
    if (has_directory_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->directory_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MetaData*>(&from));
}

void MetaData::MergeFrom(const MetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_attributes_archive()) {
      mutable_attributes_archive()->::maidsafe::drive::detail::protobuf::AttributesArchive::MergeFrom(from.attributes_archive());
    }
    if (from.has_serialised_data_map()) {
      set_serialised_data_map(from.serialised_data_map());
    }
    if (from.has_directory_id()) {
      set_directory_id(from.directory_id());
    }
  }
}

void MetaData::CopyFrom(const MetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attributes_archive()) {
    if (!this->attributes_archive().IsInitialized()) return false;
  }
  return true;
}

void MetaData::Swap(MetaData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(attributes_archive_, other->attributes_archive_);
    std::swap(serialised_data_map_, other->serialised_data_map_);
    std::swap(directory_id_, other->directory_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MetaData::GetTypeName() const {
  return "maidsafe.drive.detail.protobuf.MetaData";
}


// ===================================================================

#ifndef _MSC_VER
const int Directory::kDirectoryIdFieldNumber;
const int Directory::kMaxVersionsFieldNumber;
const int Directory::kChildrenFieldNumber;
#endif  // !_MSC_VER

Directory::Directory()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Directory::InitAsDefaultInstance() {
}

Directory::Directory(const Directory& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Directory::SharedCtor() {
  _cached_size_ = 0;
  directory_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  max_versions_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Directory::~Directory() {
  SharedDtor();
}

void Directory::SharedDtor() {
  if (directory_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete directory_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Directory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Directory& Directory::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdrive_2fproto_5fstructs_2eproto();
#endif
  return *default_instance_;
}

Directory* Directory::default_instance_ = NULL;

Directory* Directory::New() const {
  return new Directory;
}

void Directory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_directory_id()) {
      if (directory_id_ != &::google::protobuf::internal::GetEmptyString()) {
        directory_id_->clear();
      }
    }
    max_versions_ = 0u;
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Directory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes directory_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_directory_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_versions;
        break;
      }

      // required uint32 max_versions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_versions_)));
          set_has_max_versions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }

      // repeated .maidsafe.drive.detail.protobuf.MetaData children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Directory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes directory_id = 1;
  if (has_directory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->directory_id(), output);
  }

  // required uint32 max_versions = 2;
  if (has_max_versions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_versions(), output);
  }

  // repeated .maidsafe.drive.detail.protobuf.MetaData children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->children(i), output);
  }

}

int Directory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes directory_id = 1;
    if (has_directory_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->directory_id());
    }

    // required uint32 max_versions = 2;
    if (has_max_versions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_versions());
    }

  }
  // repeated .maidsafe.drive.detail.protobuf.MetaData children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Directory::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Directory*>(&from));
}

void Directory::MergeFrom(const Directory& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_directory_id()) {
      set_directory_id(from.directory_id());
    }
    if (from.has_max_versions()) {
      set_max_versions(from.max_versions());
    }
  }
}

void Directory::CopyFrom(const Directory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Directory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void Directory::Swap(Directory* other) {
  if (other != this) {
    std::swap(directory_id_, other->directory_id_);
    std::swap(max_versions_, other->max_versions_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Directory::GetTypeName() const {
  return "maidsafe.drive.detail.protobuf.Directory";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace detail
}  // namespace drive
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
