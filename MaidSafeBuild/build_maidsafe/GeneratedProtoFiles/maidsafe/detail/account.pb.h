// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/detail/account.proto

#ifndef PROTOBUF_maidsafe_2fdetail_2faccount_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fdetail_2faccount_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace detail {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto();
void protobuf_AssignDesc_maidsafe_2fdetail_2faccount_2eproto();
void protobuf_ShutdownFile_maidsafe_2fdetail_2faccount_2eproto();

class Account;

// ===================================================================

class Account : public ::google::protobuf::MessageLite {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }

  static const Account& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Account* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Account* other);

  // implements Message ----------------------------------------------

  Account* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_passport = 1;
  inline bool has_serialised_passport() const;
  inline void clear_serialised_passport();
  static const int kSerialisedPassportFieldNumber = 1;
  inline const ::std::string& serialised_passport() const;
  inline void set_serialised_passport(const ::std::string& value);
  inline void set_serialised_passport(const char* value);
  inline void set_serialised_passport(const void* value, size_t size);
  inline ::std::string* mutable_serialised_passport();
  inline ::std::string* release_serialised_passport();
  inline void set_allocated_serialised_passport(::std::string* serialised_passport);

  // required uint64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required bytes ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional bytes unique_user_id = 5;
  inline bool has_unique_user_id() const;
  inline void clear_unique_user_id();
  static const int kUniqueUserIdFieldNumber = 5;
  inline const ::std::string& unique_user_id() const;
  inline void set_unique_user_id(const ::std::string& value);
  inline void set_unique_user_id(const char* value);
  inline void set_unique_user_id(const void* value, size_t size);
  inline ::std::string* mutable_unique_user_id();
  inline ::std::string* release_unique_user_id();
  inline void set_allocated_unique_user_id(::std::string* unique_user_id);

  // optional bytes root_parent_id = 6;
  inline bool has_root_parent_id() const;
  inline void clear_root_parent_id();
  static const int kRootParentIdFieldNumber = 6;
  inline const ::std::string& root_parent_id() const;
  inline void set_root_parent_id(const ::std::string& value);
  inline void set_root_parent_id(const char* value);
  inline void set_root_parent_id(const void* value, size_t size);
  inline ::std::string* mutable_root_parent_id();
  inline ::std::string* release_root_parent_id();
  inline void set_allocated_root_parent_id(::std::string* root_parent_id);

  // @@protoc_insertion_point(class_scope:maidsafe.detail.protobuf.Account)
 private:
  inline void set_has_serialised_passport();
  inline void clear_has_serialised_passport();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_unique_user_id();
  inline void clear_has_unique_user_id();
  inline void set_has_root_parent_id();
  inline void clear_has_root_parent_id();

  ::std::string* serialised_passport_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* ip_;
  ::std::string* unique_user_id_;
  ::std::string* root_parent_id_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fdetail_2faccount_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fdetail_2faccount_2eproto();

  void InitAsDefaultInstance();
  static Account* default_instance_;
};
// ===================================================================


// ===================================================================

// Account

// required bytes serialised_passport = 1;
inline bool Account::has_serialised_passport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account::set_has_serialised_passport() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account::clear_has_serialised_passport() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account::clear_serialised_passport() {
  if (serialised_passport_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_passport_->clear();
  }
  clear_has_serialised_passport();
}
inline const ::std::string& Account::serialised_passport() const {
  return *serialised_passport_;
}
inline void Account::set_serialised_passport(const ::std::string& value) {
  set_has_serialised_passport();
  if (serialised_passport_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_passport_ = new ::std::string;
  }
  serialised_passport_->assign(value);
}
inline void Account::set_serialised_passport(const char* value) {
  set_has_serialised_passport();
  if (serialised_passport_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_passport_ = new ::std::string;
  }
  serialised_passport_->assign(value);
}
inline void Account::set_serialised_passport(const void* value, size_t size) {
  set_has_serialised_passport();
  if (serialised_passport_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_passport_ = new ::std::string;
  }
  serialised_passport_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Account::mutable_serialised_passport() {
  set_has_serialised_passport();
  if (serialised_passport_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_passport_ = new ::std::string;
  }
  return serialised_passport_;
}
inline ::std::string* Account::release_serialised_passport() {
  clear_has_serialised_passport();
  if (serialised_passport_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_passport_;
    serialised_passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Account::set_allocated_serialised_passport(::std::string* serialised_passport) {
  if (serialised_passport_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_passport_;
  }
  if (serialised_passport) {
    set_has_serialised_passport();
    serialised_passport_ = serialised_passport;
  } else {
    clear_has_serialised_passport();
    serialised_passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required uint64 timestamp = 2;
inline bool Account::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Account::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Account::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Account::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Account::timestamp() const {
  return timestamp_;
}
inline void Account::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required bytes ip = 3;
inline bool Account::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Account::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Account::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Account::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyString()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Account::ip() const {
  return *ip_;
}
inline void Account::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyString()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Account::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyString()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Account::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyString()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Account::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyString()) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Account::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Account::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyString()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required int32 port = 4;
inline bool Account::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Account::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Account::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Account::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Account::port() const {
  return port_;
}
inline void Account::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional bytes unique_user_id = 5;
inline bool Account::has_unique_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Account::set_has_unique_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Account::clear_has_unique_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Account::clear_unique_user_id() {
  if (unique_user_id_ != &::google::protobuf::internal::GetEmptyString()) {
    unique_user_id_->clear();
  }
  clear_has_unique_user_id();
}
inline const ::std::string& Account::unique_user_id() const {
  return *unique_user_id_;
}
inline void Account::set_unique_user_id(const ::std::string& value) {
  set_has_unique_user_id();
  if (unique_user_id_ == &::google::protobuf::internal::GetEmptyString()) {
    unique_user_id_ = new ::std::string;
  }
  unique_user_id_->assign(value);
}
inline void Account::set_unique_user_id(const char* value) {
  set_has_unique_user_id();
  if (unique_user_id_ == &::google::protobuf::internal::GetEmptyString()) {
    unique_user_id_ = new ::std::string;
  }
  unique_user_id_->assign(value);
}
inline void Account::set_unique_user_id(const void* value, size_t size) {
  set_has_unique_user_id();
  if (unique_user_id_ == &::google::protobuf::internal::GetEmptyString()) {
    unique_user_id_ = new ::std::string;
  }
  unique_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Account::mutable_unique_user_id() {
  set_has_unique_user_id();
  if (unique_user_id_ == &::google::protobuf::internal::GetEmptyString()) {
    unique_user_id_ = new ::std::string;
  }
  return unique_user_id_;
}
inline ::std::string* Account::release_unique_user_id() {
  clear_has_unique_user_id();
  if (unique_user_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = unique_user_id_;
    unique_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Account::set_allocated_unique_user_id(::std::string* unique_user_id) {
  if (unique_user_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete unique_user_id_;
  }
  if (unique_user_id) {
    set_has_unique_user_id();
    unique_user_id_ = unique_user_id;
  } else {
    clear_has_unique_user_id();
    unique_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bytes root_parent_id = 6;
inline bool Account::has_root_parent_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Account::set_has_root_parent_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Account::clear_has_root_parent_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Account::clear_root_parent_id() {
  if (root_parent_id_ != &::google::protobuf::internal::GetEmptyString()) {
    root_parent_id_->clear();
  }
  clear_has_root_parent_id();
}
inline const ::std::string& Account::root_parent_id() const {
  return *root_parent_id_;
}
inline void Account::set_root_parent_id(const ::std::string& value) {
  set_has_root_parent_id();
  if (root_parent_id_ == &::google::protobuf::internal::GetEmptyString()) {
    root_parent_id_ = new ::std::string;
  }
  root_parent_id_->assign(value);
}
inline void Account::set_root_parent_id(const char* value) {
  set_has_root_parent_id();
  if (root_parent_id_ == &::google::protobuf::internal::GetEmptyString()) {
    root_parent_id_ = new ::std::string;
  }
  root_parent_id_->assign(value);
}
inline void Account::set_root_parent_id(const void* value, size_t size) {
  set_has_root_parent_id();
  if (root_parent_id_ == &::google::protobuf::internal::GetEmptyString()) {
    root_parent_id_ = new ::std::string;
  }
  root_parent_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Account::mutable_root_parent_id() {
  set_has_root_parent_id();
  if (root_parent_id_ == &::google::protobuf::internal::GetEmptyString()) {
    root_parent_id_ = new ::std::string;
  }
  return root_parent_id_;
}
inline ::std::string* Account::release_root_parent_id() {
  clear_has_root_parent_id();
  if (root_parent_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = root_parent_id_;
    root_parent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Account::set_allocated_root_parent_id(::std::string* root_parent_id) {
  if (root_parent_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete root_parent_id_;
  }
  if (root_parent_id) {
    set_has_root_parent_id();
    root_parent_id_ = root_parent_id;
  } else {
    clear_has_root_parent_id();
    root_parent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace detail
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fdetail_2faccount_2eproto__INCLUDED
