// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/detail/account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/detail/account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace detail {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fdetail_2faccount_2eproto() {
  delete Account::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Account::default_instance_ = new Account();
  Account::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fdetail_2faccount_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fdetail_2faccount_2eproto {
  StaticDescriptorInitializer_maidsafe_2fdetail_2faccount_2eproto() {
    protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fdetail_2faccount_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Account::kSerialisedPassportFieldNumber;
const int Account::kTimestampFieldNumber;
const int Account::kIpFieldNumber;
const int Account::kPortFieldNumber;
const int Account::kUniqueUserIdFieldNumber;
const int Account::kRootParentIdFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Account::InitAsDefaultInstance() {
}

Account::Account(const Account& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  serialised_passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  timestamp_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  port_ = 0;
  unique_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  root_parent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  SharedDtor();
}

void Account::SharedDtor() {
  if (serialised_passport_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_passport_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyString()) {
    delete ip_;
  }
  if (unique_user_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete unique_user_id_;
  }
  if (root_parent_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete root_parent_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Account& Account::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdetail_2faccount_2eproto();
#endif
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serialised_passport()) {
      if (serialised_passport_ != &::google::protobuf::internal::GetEmptyString()) {
        serialised_passport_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyString()) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_unique_user_id()) {
      if (unique_user_id_ != &::google::protobuf::internal::GetEmptyString()) {
        unique_user_id_->clear();
      }
    }
    if (has_root_parent_id()) {
      if (root_parent_id_ != &::google::protobuf::internal::GetEmptyString()) {
        root_parent_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serialised_passport = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_passport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required bytes ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unique_user_id;
        break;
      }

      // optional bytes unique_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unique_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unique_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_root_parent_id;
        break;
      }

      // optional bytes root_parent_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_parent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_root_parent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes serialised_passport = 1;
  if (has_serialised_passport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serialised_passport(), output);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // required bytes ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ip(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional bytes unique_user_id = 5;
  if (has_unique_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unique_user_id(), output);
  }

  // optional bytes root_parent_id = 6;
  if (has_root_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->root_parent_id(), output);
  }

}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serialised_passport = 1;
    if (has_serialised_passport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_passport());
    }

    // required uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required bytes ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bytes unique_user_id = 5;
    if (has_unique_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unique_user_id());
    }

    // optional bytes root_parent_id = 6;
    if (has_root_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->root_parent_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Account*>(&from));
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialised_passport()) {
      set_serialised_passport(from.serialised_passport());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_unique_user_id()) {
      set_unique_user_id(from.unique_user_id());
    }
    if (from.has_root_parent_id()) {
      set_root_parent_id(from.root_parent_id());
    }
  }
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(serialised_passport_, other->serialised_passport_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(unique_user_id_, other->unique_user_id_);
    std::swap(root_parent_id_, other->root_parent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Account::GetTypeName() const {
  return "maidsafe.detail.protobuf.Account";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace detail
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
