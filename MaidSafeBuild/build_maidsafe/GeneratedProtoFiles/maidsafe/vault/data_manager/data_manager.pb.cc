// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/data_manager/data_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/vault/data_manager/data_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto() {
  delete DataManagerValue::default_instance_;
  delete DataManagerKeyValuePair::default_instance_;
  delete DataOrProof::default_instance_;
  delete DataOrProof_Data::default_instance_;
  delete DataOrProof_Proof::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DataManagerValue::default_instance_ = new DataManagerValue();
  DataManagerKeyValuePair::default_instance_ = new DataManagerKeyValuePair();
  DataOrProof::default_instance_ = new DataOrProof();
  DataOrProof_Data::default_instance_ = new DataOrProof_Data();
  DataOrProof_Proof::default_instance_ = new DataOrProof_Proof();
  DataManagerValue::default_instance_->InitAsDefaultInstance();
  DataManagerKeyValuePair::default_instance_->InitAsDefaultInstance();
  DataOrProof::default_instance_->InitAsDefaultInstance();
  DataOrProof_Data::default_instance_->InitAsDefaultInstance();
  DataOrProof_Proof::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto {
  StaticDescriptorInitializer_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto() {
    protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DataManagerValue::kSizeFieldNumber;
const int DataManagerValue::kPmidNamesFieldNumber;
#endif  // !_MSC_VER

DataManagerValue::DataManagerValue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataManagerValue::InitAsDefaultInstance() {
}

DataManagerValue::DataManagerValue(const DataManagerValue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataManagerValue::SharedCtor() {
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataManagerValue::~DataManagerValue() {
  SharedDtor();
}

void DataManagerValue::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataManagerValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataManagerValue& DataManagerValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#endif
  return *default_instance_;
}

DataManagerValue* DataManagerValue::default_instance_ = NULL;

DataManagerValue* DataManagerValue::New() const {
  return new DataManagerValue;
}

void DataManagerValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = GOOGLE_ULONGLONG(0);
  }
  pmid_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataManagerValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pmid_names;
        break;
      }

      // repeated bytes pmid_names = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pmid_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_pmid_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pmid_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataManagerValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // repeated bytes pmid_names = 2;
  for (int i = 0; i < this->pmid_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->pmid_names(i), output);
  }

}

int DataManagerValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  // repeated bytes pmid_names = 2;
  total_size += 1 * this->pmid_names_size();
  for (int i = 0; i < this->pmid_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->pmid_names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataManagerValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataManagerValue*>(&from));
}

void DataManagerValue::MergeFrom(const DataManagerValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  pmid_names_.MergeFrom(from.pmid_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
}

void DataManagerValue::CopyFrom(const DataManagerValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataManagerValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DataManagerValue::Swap(DataManagerValue* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    pmid_names_.Swap(&other->pmid_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataManagerValue::GetTypeName() const {
  return "maidsafe.vault.protobuf.DataManagerValue";
}


// ===================================================================

#ifndef _MSC_VER
const int DataManagerKeyValuePair::kKeyFieldNumber;
const int DataManagerKeyValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

DataManagerKeyValuePair::DataManagerKeyValuePair()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataManagerKeyValuePair::InitAsDefaultInstance() {
}

DataManagerKeyValuePair::DataManagerKeyValuePair(const DataManagerKeyValuePair& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataManagerKeyValuePair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataManagerKeyValuePair::~DataManagerKeyValuePair() {
  SharedDtor();
}

void DataManagerKeyValuePair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataManagerKeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataManagerKeyValuePair& DataManagerKeyValuePair::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#endif
  return *default_instance_;
}

DataManagerKeyValuePair* DataManagerKeyValuePair::default_instance_ = NULL;

DataManagerKeyValuePair* DataManagerKeyValuePair::New() const {
  return new DataManagerKeyValuePair;
}

void DataManagerKeyValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyString()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataManagerKeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataManagerKeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

}

int DataManagerKeyValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataManagerKeyValuePair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataManagerKeyValuePair*>(&from));
}

void DataManagerKeyValuePair::MergeFrom(const DataManagerKeyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void DataManagerKeyValuePair::CopyFrom(const DataManagerKeyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataManagerKeyValuePair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DataManagerKeyValuePair::Swap(DataManagerKeyValuePair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataManagerKeyValuePair::GetTypeName() const {
  return "maidsafe.vault.protobuf.DataManagerKeyValuePair";
}


// ===================================================================

#ifndef _MSC_VER
const int DataOrProof_Data::kTypeFieldNumber;
const int DataOrProof_Data::kNameFieldNumber;
const int DataOrProof_Data::kContentFieldNumber;
#endif  // !_MSC_VER

DataOrProof_Data::DataOrProof_Data()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataOrProof_Data::InitAsDefaultInstance() {
}

DataOrProof_Data::DataOrProof_Data(const DataOrProof_Data& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataOrProof_Data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataOrProof_Data::~DataOrProof_Data() {
  SharedDtor();
}

void DataOrProof_Data::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyString()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataOrProof_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataOrProof_Data& DataOrProof_Data::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#endif
  return *default_instance_;
}

DataOrProof_Data* DataOrProof_Data::default_instance_ = NULL;

DataOrProof_Data* DataOrProof_Data::New() const {
  return new DataOrProof_Data;
}

void DataOrProof_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyString()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataOrProof_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataOrProof_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }

}

int DataOrProof_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataOrProof_Data::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataOrProof_Data*>(&from));
}

void DataOrProof_Data::MergeFrom(const DataOrProof_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void DataOrProof_Data::CopyFrom(const DataOrProof_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataOrProof_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DataOrProof_Data::Swap(DataOrProof_Data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataOrProof_Data::GetTypeName() const {
  return "maidsafe.vault.protobuf.DataOrProof.Data";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataOrProof_Proof::kTypeFieldNumber;
const int DataOrProof_Proof::kNameFieldNumber;
const int DataOrProof_Proof::kValueFieldNumber;
const int DataOrProof_Proof::kSizeFieldNumber;
#endif  // !_MSC_VER

DataOrProof_Proof::DataOrProof_Proof()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataOrProof_Proof::InitAsDefaultInstance() {
}

DataOrProof_Proof::DataOrProof_Proof(const DataOrProof_Proof& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataOrProof_Proof::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataOrProof_Proof::~DataOrProof_Proof() {
  SharedDtor();
}

void DataOrProof_Proof::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataOrProof_Proof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataOrProof_Proof& DataOrProof_Proof::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#endif
  return *default_instance_;
}

DataOrProof_Proof* DataOrProof_Proof::default_instance_ = NULL;

DataOrProof_Proof* DataOrProof_Proof::New() const {
  return new DataOrProof_Proof;
}

void DataOrProof_Proof::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataOrProof_Proof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint64 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataOrProof_Proof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(), output);
  }

  // required uint64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

}

int DataOrProof_Proof::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required uint64 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataOrProof_Proof::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataOrProof_Proof*>(&from));
}

void DataOrProof_Proof::MergeFrom(const DataOrProof_Proof& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
}

void DataOrProof_Proof::CopyFrom(const DataOrProof_Proof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataOrProof_Proof::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DataOrProof_Proof::Swap(DataOrProof_Proof* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataOrProof_Proof::GetTypeName() const {
  return "maidsafe.vault.protobuf.DataOrProof.Proof";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataOrProof::kNodeIdFieldNumber;
const int DataOrProof::kSerialisedDataFieldNumber;
const int DataOrProof::kSerialisedProofFieldNumber;
const int DataOrProof::kSignatureFieldNumber;
#endif  // !_MSC_VER

DataOrProof::DataOrProof()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataOrProof::InitAsDefaultInstance() {
}

DataOrProof::DataOrProof(const DataOrProof& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataOrProof::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  serialised_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  serialised_proof_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataOrProof::~DataOrProof() {
  SharedDtor();
}

void DataOrProof::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  if (serialised_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_;
  }
  if (serialised_proof_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_proof_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete signature_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataOrProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataOrProof& DataOrProof::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
#endif
  return *default_instance_;
}

DataOrProof* DataOrProof::default_instance_ = NULL;

DataOrProof* DataOrProof::New() const {
  return new DataOrProof;
}

void DataOrProof::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
        node_id_->clear();
      }
    }
    if (has_serialised_data()) {
      if (serialised_data_ != &::google::protobuf::internal::GetEmptyString()) {
        serialised_data_->clear();
      }
    }
    if (has_serialised_proof()) {
      if (serialised_proof_ != &::google::protobuf::internal::GetEmptyString()) {
        serialised_proof_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyString()) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataOrProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialised_data;
        break;
      }

      // optional bytes serialised_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serialised_proof;
        break;
      }

      // required bytes serialised_proof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_proof:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_proof()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }

      // required bytes signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataOrProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node_id(), output);
  }

  // optional bytes serialised_data = 2;
  if (has_serialised_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialised_data(), output);
  }

  // required bytes serialised_proof = 3;
  if (has_serialised_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->serialised_proof(), output);
  }

  // required bytes signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->signature(), output);
  }

}

int DataOrProof::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // optional bytes serialised_data = 2;
    if (has_serialised_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_data());
    }

    // required bytes serialised_proof = 3;
    if (has_serialised_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_proof());
    }

    // required bytes signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataOrProof::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataOrProof*>(&from));
}

void DataOrProof::MergeFrom(const DataOrProof& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_serialised_data()) {
      set_serialised_data(from.serialised_data());
    }
    if (from.has_serialised_proof()) {
      set_serialised_proof(from.serialised_proof());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
}

void DataOrProof::CopyFrom(const DataOrProof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataOrProof::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void DataOrProof::Swap(DataOrProof* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(serialised_data_, other->serialised_data_);
    std::swap(serialised_proof_, other->serialised_proof_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataOrProof::GetTypeName() const {
  return "maidsafe.vault.protobuf.DataOrProof";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
