// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/data_manager/data_manager.proto

#ifndef PROTOBUF_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
void protobuf_AssignDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
void protobuf_ShutdownFile_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();

class DataManagerValue;
class DataManagerKeyValuePair;
class DataOrProof;
class DataOrProof_Data;
class DataOrProof_Proof;

// ===================================================================

class DataManagerValue : public ::google::protobuf::MessageLite {
 public:
  DataManagerValue();
  virtual ~DataManagerValue();

  DataManagerValue(const DataManagerValue& from);

  inline DataManagerValue& operator=(const DataManagerValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataManagerValue& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataManagerValue* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataManagerValue* other);

  // implements Message ----------------------------------------------

  DataManagerValue* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataManagerValue& from);
  void MergeFrom(const DataManagerValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // repeated bytes pmid_names = 2;
  inline int pmid_names_size() const;
  inline void clear_pmid_names();
  static const int kPmidNamesFieldNumber = 2;
  inline const ::std::string& pmid_names(int index) const;
  inline ::std::string* mutable_pmid_names(int index);
  inline void set_pmid_names(int index, const ::std::string& value);
  inline void set_pmid_names(int index, const char* value);
  inline void set_pmid_names(int index, const void* value, size_t size);
  inline ::std::string* add_pmid_names();
  inline void add_pmid_names(const ::std::string& value);
  inline void add_pmid_names(const char* value);
  inline void add_pmid_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pmid_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pmid_names();

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.DataManagerValue)
 private:
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::uint64 size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pmid_names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DataManagerValue* default_instance_;
};
// -------------------------------------------------------------------

class DataManagerKeyValuePair : public ::google::protobuf::MessageLite {
 public:
  DataManagerKeyValuePair();
  virtual ~DataManagerKeyValuePair();

  DataManagerKeyValuePair(const DataManagerKeyValuePair& from);

  inline DataManagerKeyValuePair& operator=(const DataManagerKeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataManagerKeyValuePair& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataManagerKeyValuePair* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataManagerKeyValuePair* other);

  // implements Message ----------------------------------------------

  DataManagerKeyValuePair* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataManagerKeyValuePair& from);
  void MergeFrom(const DataManagerKeyValuePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.DataManagerKeyValuePair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DataManagerKeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class DataOrProof_Data : public ::google::protobuf::MessageLite {
 public:
  DataOrProof_Data();
  virtual ~DataOrProof_Data();

  DataOrProof_Data(const DataOrProof_Data& from);

  inline DataOrProof_Data& operator=(const DataOrProof_Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataOrProof_Data& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataOrProof_Data* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataOrProof_Data* other);

  // implements Message ----------------------------------------------

  DataOrProof_Data* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataOrProof_Data& from);
  void MergeFrom(const DataOrProof_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.DataOrProof.Data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_content();
  inline void clear_has_content();

  ::std::string* name_;
  ::std::string* content_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DataOrProof_Data* default_instance_;
};
// -------------------------------------------------------------------

class DataOrProof_Proof : public ::google::protobuf::MessageLite {
 public:
  DataOrProof_Proof();
  virtual ~DataOrProof_Proof();

  DataOrProof_Proof(const DataOrProof_Proof& from);

  inline DataOrProof_Proof& operator=(const DataOrProof_Proof& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataOrProof_Proof& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataOrProof_Proof* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataOrProof_Proof* other);

  // implements Message ----------------------------------------------

  DataOrProof_Proof* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataOrProof_Proof& from);
  void MergeFrom(const DataOrProof_Proof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required uint64 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.DataOrProof.Proof)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_size();
  inline void clear_has_size();

  ::std::string* name_;
  ::std::string* value_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DataOrProof_Proof* default_instance_;
};
// -------------------------------------------------------------------

class DataOrProof : public ::google::protobuf::MessageLite {
 public:
  DataOrProof();
  virtual ~DataOrProof();

  DataOrProof(const DataOrProof& from);

  inline DataOrProof& operator=(const DataOrProof& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataOrProof& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataOrProof* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataOrProof* other);

  // implements Message ----------------------------------------------

  DataOrProof* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataOrProof& from);
  void MergeFrom(const DataOrProof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef DataOrProof_Data Data;
  typedef DataOrProof_Proof Proof;

  // accessors -------------------------------------------------------

  // required bytes node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline const ::std::string& node_id() const;
  inline void set_node_id(const ::std::string& value);
  inline void set_node_id(const char* value);
  inline void set_node_id(const void* value, size_t size);
  inline ::std::string* mutable_node_id();
  inline ::std::string* release_node_id();
  inline void set_allocated_node_id(::std::string* node_id);

  // optional bytes serialised_data = 2;
  inline bool has_serialised_data() const;
  inline void clear_serialised_data();
  static const int kSerialisedDataFieldNumber = 2;
  inline const ::std::string& serialised_data() const;
  inline void set_serialised_data(const ::std::string& value);
  inline void set_serialised_data(const char* value);
  inline void set_serialised_data(const void* value, size_t size);
  inline ::std::string* mutable_serialised_data();
  inline ::std::string* release_serialised_data();
  inline void set_allocated_serialised_data(::std::string* serialised_data);

  // required bytes serialised_proof = 3;
  inline bool has_serialised_proof() const;
  inline void clear_serialised_proof();
  static const int kSerialisedProofFieldNumber = 3;
  inline const ::std::string& serialised_proof() const;
  inline void set_serialised_proof(const ::std::string& value);
  inline void set_serialised_proof(const char* value);
  inline void set_serialised_proof(const void* value, size_t size);
  inline ::std::string* mutable_serialised_proof();
  inline ::std::string* release_serialised_proof();
  inline void set_allocated_serialised_proof(::std::string* serialised_proof);

  // required bytes signature = 4;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 4;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.DataOrProof)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_serialised_data();
  inline void clear_has_serialised_data();
  inline void set_has_serialised_proof();
  inline void clear_has_serialised_proof();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::std::string* node_id_;
  ::std::string* serialised_data_;
  ::std::string* serialised_proof_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DataOrProof* default_instance_;
};
// ===================================================================


// ===================================================================

// DataManagerValue

// required uint64 size = 1;
inline bool DataManagerValue::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataManagerValue::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataManagerValue::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataManagerValue::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 DataManagerValue::size() const {
  return size_;
}
inline void DataManagerValue::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// repeated bytes pmid_names = 2;
inline int DataManagerValue::pmid_names_size() const {
  return pmid_names_.size();
}
inline void DataManagerValue::clear_pmid_names() {
  pmid_names_.Clear();
}
inline const ::std::string& DataManagerValue::pmid_names(int index) const {
  return pmid_names_.Get(index);
}
inline ::std::string* DataManagerValue::mutable_pmid_names(int index) {
  return pmid_names_.Mutable(index);
}
inline void DataManagerValue::set_pmid_names(int index, const ::std::string& value) {
  pmid_names_.Mutable(index)->assign(value);
}
inline void DataManagerValue::set_pmid_names(int index, const char* value) {
  pmid_names_.Mutable(index)->assign(value);
}
inline void DataManagerValue::set_pmid_names(int index, const void* value, size_t size) {
  pmid_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataManagerValue::add_pmid_names() {
  return pmid_names_.Add();
}
inline void DataManagerValue::add_pmid_names(const ::std::string& value) {
  pmid_names_.Add()->assign(value);
}
inline void DataManagerValue::add_pmid_names(const char* value) {
  pmid_names_.Add()->assign(value);
}
inline void DataManagerValue::add_pmid_names(const void* value, size_t size) {
  pmid_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataManagerValue::pmid_names() const {
  return pmid_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataManagerValue::mutable_pmid_names() {
  return &pmid_names_;
}

// -------------------------------------------------------------------

// DataManagerKeyValuePair

// required bytes key = 1;
inline bool DataManagerKeyValuePair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataManagerKeyValuePair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataManagerKeyValuePair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataManagerKeyValuePair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& DataManagerKeyValuePair::key() const {
  return *key_;
}
inline void DataManagerKeyValuePair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DataManagerKeyValuePair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DataManagerKeyValuePair::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataManagerKeyValuePair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* DataManagerKeyValuePair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataManagerKeyValuePair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes value = 2;
inline bool DataManagerKeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataManagerKeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataManagerKeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataManagerKeyValuePair::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& DataManagerKeyValuePair::value() const {
  return *value_;
}
inline void DataManagerKeyValuePair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void DataManagerKeyValuePair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void DataManagerKeyValuePair::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataManagerKeyValuePair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* DataManagerKeyValuePair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataManagerKeyValuePair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataOrProof_Data

// required uint32 type = 1;
inline bool DataOrProof_Data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataOrProof_Data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataOrProof_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataOrProof_Data::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 DataOrProof_Data::type() const {
  return type_;
}
inline void DataOrProof_Data::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required bytes name = 2;
inline bool DataOrProof_Data::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataOrProof_Data::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataOrProof_Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataOrProof_Data::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataOrProof_Data::name() const {
  return *name_;
}
inline void DataOrProof_Data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataOrProof_Data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataOrProof_Data::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataOrProof_Data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DataOrProof_Data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataOrProof_Data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes content = 3;
inline bool DataOrProof_Data::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataOrProof_Data::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataOrProof_Data::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataOrProof_Data::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyString()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DataOrProof_Data::content() const {
  return *content_;
}
inline void DataOrProof_Data::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DataOrProof_Data::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DataOrProof_Data::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataOrProof_Data::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* DataOrProof_Data::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataOrProof_Data::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyString()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// DataOrProof_Proof

// required uint32 type = 1;
inline bool DataOrProof_Proof::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataOrProof_Proof::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataOrProof_Proof::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataOrProof_Proof::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 DataOrProof_Proof::type() const {
  return type_;
}
inline void DataOrProof_Proof::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required bytes name = 2;
inline bool DataOrProof_Proof::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataOrProof_Proof::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataOrProof_Proof::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataOrProof_Proof::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataOrProof_Proof::name() const {
  return *name_;
}
inline void DataOrProof_Proof::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataOrProof_Proof::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataOrProof_Proof::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataOrProof_Proof::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DataOrProof_Proof::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataOrProof_Proof::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes value = 3;
inline bool DataOrProof_Proof::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataOrProof_Proof::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataOrProof_Proof::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataOrProof_Proof::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& DataOrProof_Proof::value() const {
  return *value_;
}
inline void DataOrProof_Proof::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void DataOrProof_Proof::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void DataOrProof_Proof::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataOrProof_Proof::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* DataOrProof_Proof::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataOrProof_Proof::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required uint64 size = 4;
inline bool DataOrProof_Proof::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataOrProof_Proof::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataOrProof_Proof::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataOrProof_Proof::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 DataOrProof_Proof::size() const {
  return size_;
}
inline void DataOrProof_Proof::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// DataOrProof

// required bytes node_id = 1;
inline bool DataOrProof::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataOrProof::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataOrProof::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataOrProof::clear_node_id() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    node_id_->clear();
  }
  clear_has_node_id();
}
inline const ::std::string& DataOrProof::node_id() const {
  return *node_id_;
}
inline void DataOrProof::set_node_id(const ::std::string& value) {
  set_has_node_id();
  if (node_id_ == &::google::protobuf::internal::GetEmptyString()) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(value);
}
inline void DataOrProof::set_node_id(const char* value) {
  set_has_node_id();
  if (node_id_ == &::google::protobuf::internal::GetEmptyString()) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(value);
}
inline void DataOrProof::set_node_id(const void* value, size_t size) {
  set_has_node_id();
  if (node_id_ == &::google::protobuf::internal::GetEmptyString()) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataOrProof::mutable_node_id() {
  set_has_node_id();
  if (node_id_ == &::google::protobuf::internal::GetEmptyString()) {
    node_id_ = new ::std::string;
  }
  return node_id_;
}
inline ::std::string* DataOrProof::release_node_id() {
  clear_has_node_id();
  if (node_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = node_id_;
    node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataOrProof::set_allocated_node_id(::std::string* node_id) {
  if (node_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete node_id_;
  }
  if (node_id) {
    set_has_node_id();
    node_id_ = node_id;
  } else {
    clear_has_node_id();
    node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bytes serialised_data = 2;
inline bool DataOrProof::has_serialised_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataOrProof::set_has_serialised_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataOrProof::clear_has_serialised_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataOrProof::clear_serialised_data() {
  if (serialised_data_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_->clear();
  }
  clear_has_serialised_data();
}
inline const ::std::string& DataOrProof::serialised_data() const {
  return *serialised_data_;
}
inline void DataOrProof::set_serialised_data(const ::std::string& value) {
  set_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_ = new ::std::string;
  }
  serialised_data_->assign(value);
}
inline void DataOrProof::set_serialised_data(const char* value) {
  set_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_ = new ::std::string;
  }
  serialised_data_->assign(value);
}
inline void DataOrProof::set_serialised_data(const void* value, size_t size) {
  set_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_ = new ::std::string;
  }
  serialised_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataOrProof::mutable_serialised_data() {
  set_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_ = new ::std::string;
  }
  return serialised_data_;
}
inline ::std::string* DataOrProof::release_serialised_data() {
  clear_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_data_;
    serialised_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataOrProof::set_allocated_serialised_data(::std::string* serialised_data) {
  if (serialised_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_;
  }
  if (serialised_data) {
    set_has_serialised_data();
    serialised_data_ = serialised_data;
  } else {
    clear_has_serialised_data();
    serialised_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes serialised_proof = 3;
inline bool DataOrProof::has_serialised_proof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataOrProof::set_has_serialised_proof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataOrProof::clear_has_serialised_proof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataOrProof::clear_serialised_proof() {
  if (serialised_proof_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_proof_->clear();
  }
  clear_has_serialised_proof();
}
inline const ::std::string& DataOrProof::serialised_proof() const {
  return *serialised_proof_;
}
inline void DataOrProof::set_serialised_proof(const ::std::string& value) {
  set_has_serialised_proof();
  if (serialised_proof_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_proof_ = new ::std::string;
  }
  serialised_proof_->assign(value);
}
inline void DataOrProof::set_serialised_proof(const char* value) {
  set_has_serialised_proof();
  if (serialised_proof_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_proof_ = new ::std::string;
  }
  serialised_proof_->assign(value);
}
inline void DataOrProof::set_serialised_proof(const void* value, size_t size) {
  set_has_serialised_proof();
  if (serialised_proof_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_proof_ = new ::std::string;
  }
  serialised_proof_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataOrProof::mutable_serialised_proof() {
  set_has_serialised_proof();
  if (serialised_proof_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_proof_ = new ::std::string;
  }
  return serialised_proof_;
}
inline ::std::string* DataOrProof::release_serialised_proof() {
  clear_has_serialised_proof();
  if (serialised_proof_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_proof_;
    serialised_proof_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataOrProof::set_allocated_serialised_proof(::std::string* serialised_proof) {
  if (serialised_proof_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_proof_;
  }
  if (serialised_proof) {
    set_has_serialised_proof();
    serialised_proof_ = serialised_proof;
  } else {
    clear_has_serialised_proof();
    serialised_proof_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes signature = 4;
inline bool DataOrProof::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataOrProof::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataOrProof::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataOrProof::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyString()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& DataOrProof::signature() const {
  return *signature_;
}
inline void DataOrProof::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyString()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void DataOrProof::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyString()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void DataOrProof::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyString()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataOrProof::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyString()) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* DataOrProof::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataOrProof::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyString()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fvault_2fdata_5fmanager_2fdata_5fmanager_2eproto__INCLUDED
