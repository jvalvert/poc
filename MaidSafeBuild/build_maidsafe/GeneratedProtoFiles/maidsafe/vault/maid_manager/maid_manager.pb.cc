// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/maid_manager/maid_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/vault/maid_manager/maid_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto() {
  delete MaidManagerKeyValuePair::default_instance_;
  delete MaidManagerValue::default_instance_;
  delete Size::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MaidManagerKeyValuePair::default_instance_ = new MaidManagerKeyValuePair();
  MaidManagerValue::default_instance_ = new MaidManagerValue();
  Size::default_instance_ = new Size();
  MaidManagerKeyValuePair::default_instance_->InitAsDefaultInstance();
  MaidManagerValue::default_instance_->InitAsDefaultInstance();
  Size::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto {
  StaticDescriptorInitializer_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto() {
    protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MaidManagerKeyValuePair::kKeyFieldNumber;
const int MaidManagerKeyValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

MaidManagerKeyValuePair::MaidManagerKeyValuePair()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MaidManagerKeyValuePair::InitAsDefaultInstance() {
}

MaidManagerKeyValuePair::MaidManagerKeyValuePair(const MaidManagerKeyValuePair& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MaidManagerKeyValuePair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaidManagerKeyValuePair::~MaidManagerKeyValuePair() {
  SharedDtor();
}

void MaidManagerKeyValuePair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MaidManagerKeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MaidManagerKeyValuePair& MaidManagerKeyValuePair::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

MaidManagerKeyValuePair* MaidManagerKeyValuePair::default_instance_ = NULL;

MaidManagerKeyValuePair* MaidManagerKeyValuePair::New() const {
  return new MaidManagerKeyValuePair;
}

void MaidManagerKeyValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyString()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MaidManagerKeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaidManagerKeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

}

int MaidManagerKeyValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaidManagerKeyValuePair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MaidManagerKeyValuePair*>(&from));
}

void MaidManagerKeyValuePair::MergeFrom(const MaidManagerKeyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void MaidManagerKeyValuePair::CopyFrom(const MaidManagerKeyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaidManagerKeyValuePair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MaidManagerKeyValuePair::Swap(MaidManagerKeyValuePair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MaidManagerKeyValuePair::GetTypeName() const {
  return "maidsafe.vault.protobuf.MaidManagerKeyValuePair";
}


// ===================================================================

#ifndef _MSC_VER
const int MaidManagerValue::kSpaceAvailableFieldNumber;
const int MaidManagerValue::kDataStoredFieldNumber;
#endif  // !_MSC_VER

MaidManagerValue::MaidManagerValue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MaidManagerValue::InitAsDefaultInstance() {
}

MaidManagerValue::MaidManagerValue(const MaidManagerValue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MaidManagerValue::SharedCtor() {
  _cached_size_ = 0;
  space_available_ = GOOGLE_LONGLONG(0);
  data_stored_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaidManagerValue::~MaidManagerValue() {
  SharedDtor();
}

void MaidManagerValue::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MaidManagerValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MaidManagerValue& MaidManagerValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

MaidManagerValue* MaidManagerValue::default_instance_ = NULL;

MaidManagerValue* MaidManagerValue::New() const {
  return new MaidManagerValue;
}

void MaidManagerValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    space_available_ = GOOGLE_LONGLONG(0);
    data_stored_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MaidManagerValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 space_available = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &space_available_)));
          set_has_space_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_stored;
        break;
      }

      // required int64 data_stored = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_stored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_stored_)));
          set_has_data_stored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaidManagerValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 space_available = 1;
  if (has_space_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->space_available(), output);
  }

  // required int64 data_stored = 2;
  if (has_data_stored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->data_stored(), output);
  }

}

int MaidManagerValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 space_available = 1;
    if (has_space_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->space_available());
    }

    // required int64 data_stored = 2;
    if (has_data_stored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_stored());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaidManagerValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MaidManagerValue*>(&from));
}

void MaidManagerValue::MergeFrom(const MaidManagerValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_space_available()) {
      set_space_available(from.space_available());
    }
    if (from.has_data_stored()) {
      set_data_stored(from.data_stored());
    }
  }
}

void MaidManagerValue::CopyFrom(const MaidManagerValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaidManagerValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MaidManagerValue::Swap(MaidManagerValue* other) {
  if (other != this) {
    std::swap(space_available_, other->space_available_);
    std::swap(data_stored_, other->data_stored_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MaidManagerValue::GetTypeName() const {
  return "maidsafe.vault.protobuf.MaidManagerValue";
}


// ===================================================================

#ifndef _MSC_VER
const int Size::kSizeFieldNumber;
#endif  // !_MSC_VER

Size::Size()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Size::InitAsDefaultInstance() {
}

Size::Size(const Size& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Size::SharedCtor() {
  _cached_size_ = 0;
  size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Size::~Size() {
  SharedDtor();
}

void Size::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Size::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Size& Size::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fmaid_5fmanager_2fmaid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

Size* Size::default_instance_ = NULL;

Size* Size::New() const {
  return new Size;
}

void Size::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Size::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Size::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->size(), output);
  }

}

int Size::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Size*>(&from));
}

void Size::MergeFrom(const Size& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
}

void Size::CopyFrom(const Size& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Size::Swap(Size* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Size::GetTypeName() const {
  return "maidsafe.vault.protobuf.Size";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
