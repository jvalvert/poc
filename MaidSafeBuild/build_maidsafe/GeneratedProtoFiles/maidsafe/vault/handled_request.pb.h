// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/handled_request.proto

#ifndef PROTOBUF_maidsafe_2fvault_2fhandled_5frequest_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fvault_2fhandled_5frequest_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fvault_2fhandled_5frequest_2eproto();
void protobuf_AssignDesc_maidsafe_2fvault_2fhandled_5frequest_2eproto();
void protobuf_ShutdownFile_maidsafe_2fvault_2fhandled_5frequest_2eproto();

class HandledRequest;
class HandledRequests;

// ===================================================================

class HandledRequest : public ::google::protobuf::MessageLite {
 public:
  HandledRequest();
  virtual ~HandledRequest();

  HandledRequest(const HandledRequest& from);

  inline HandledRequest& operator=(const HandledRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const HandledRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const HandledRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(HandledRequest* other);

  // implements Message ----------------------------------------------

  HandledRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const HandledRequest& from);
  void MergeFrom(const HandledRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes message_id = 1;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  inline const ::std::string& message_id() const;
  inline void set_message_id(const ::std::string& value);
  inline void set_message_id(const char* value);
  inline void set_message_id(const void* value, size_t size);
  inline ::std::string* mutable_message_id();
  inline ::std::string* release_message_id();
  inline void set_allocated_message_id(::std::string* message_id);

  // required int32 action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // required bytes data_name = 3;
  inline bool has_data_name() const;
  inline void clear_data_name();
  static const int kDataNameFieldNumber = 3;
  inline const ::std::string& data_name() const;
  inline void set_data_name(const ::std::string& value);
  inline void set_data_name(const char* value);
  inline void set_data_name(const void* value, size_t size);
  inline ::std::string* mutable_data_name();
  inline ::std::string* release_data_name();
  inline void set_allocated_data_name(::std::string* data_name);

  // required int32 data_type = 4;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);

  // required int32 size = 5;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required bytes reply = 6;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 6;
  inline const ::std::string& reply() const;
  inline void set_reply(const ::std::string& value);
  inline void set_reply(const char* value);
  inline void set_reply(const void* value, size_t size);
  inline ::std::string* mutable_reply();
  inline ::std::string* release_reply();
  inline void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.HandledRequest)
 private:
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_data_name();
  inline void clear_has_data_name();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_reply();
  inline void clear_has_reply();

  ::std::string* message_id_;
  ::std::string* data_name_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 data_type_;
  ::std::string* reply_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fhandled_5frequest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fhandled_5frequest_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fhandled_5frequest_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fhandled_5frequest_2eproto();

  void InitAsDefaultInstance();
  static HandledRequest* default_instance_;
};
// -------------------------------------------------------------------

class HandledRequests : public ::google::protobuf::MessageLite {
 public:
  HandledRequests();
  virtual ~HandledRequests();

  HandledRequests(const HandledRequests& from);

  inline HandledRequests& operator=(const HandledRequests& from) {
    CopyFrom(from);
    return *this;
  }

  static const HandledRequests& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const HandledRequests* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(HandledRequests* other);

  // implements Message ----------------------------------------------

  HandledRequests* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const HandledRequests& from);
  void MergeFrom(const HandledRequests& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .maidsafe.vault.protobuf.HandledRequest handled_requests = 2;
  inline int handled_requests_size() const;
  inline void clear_handled_requests();
  static const int kHandledRequestsFieldNumber = 2;
  inline const ::maidsafe::vault::protobuf::HandledRequest& handled_requests(int index) const;
  inline ::maidsafe::vault::protobuf::HandledRequest* mutable_handled_requests(int index);
  inline ::maidsafe::vault::protobuf::HandledRequest* add_handled_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::maidsafe::vault::protobuf::HandledRequest >&
      handled_requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::maidsafe::vault::protobuf::HandledRequest >*
      mutable_handled_requests();

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.HandledRequests)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::maidsafe::vault::protobuf::HandledRequest > handled_requests_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fhandled_5frequest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fhandled_5frequest_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fhandled_5frequest_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fhandled_5frequest_2eproto();

  void InitAsDefaultInstance();
  static HandledRequests* default_instance_;
};
// ===================================================================


// ===================================================================

// HandledRequest

// required bytes message_id = 1;
inline bool HandledRequest::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandledRequest::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandledRequest::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandledRequest::clear_message_id() {
  if (message_id_ != &::google::protobuf::internal::GetEmptyString()) {
    message_id_->clear();
  }
  clear_has_message_id();
}
inline const ::std::string& HandledRequest::message_id() const {
  return *message_id_;
}
inline void HandledRequest::set_message_id(const ::std::string& value) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::GetEmptyString()) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(value);
}
inline void HandledRequest::set_message_id(const char* value) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::GetEmptyString()) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(value);
}
inline void HandledRequest::set_message_id(const void* value, size_t size) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::GetEmptyString()) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HandledRequest::mutable_message_id() {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::GetEmptyString()) {
    message_id_ = new ::std::string;
  }
  return message_id_;
}
inline ::std::string* HandledRequest::release_message_id() {
  clear_has_message_id();
  if (message_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = message_id_;
    message_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void HandledRequest::set_allocated_message_id(::std::string* message_id) {
  if (message_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete message_id_;
  }
  if (message_id) {
    set_has_message_id();
    message_id_ = message_id;
  } else {
    clear_has_message_id();
    message_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required int32 action = 2;
inline bool HandledRequest::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandledRequest::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HandledRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HandledRequest::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 HandledRequest::action() const {
  return action_;
}
inline void HandledRequest::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// required bytes data_name = 3;
inline bool HandledRequest::has_data_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandledRequest::set_has_data_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandledRequest::clear_has_data_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandledRequest::clear_data_name() {
  if (data_name_ != &::google::protobuf::internal::GetEmptyString()) {
    data_name_->clear();
  }
  clear_has_data_name();
}
inline const ::std::string& HandledRequest::data_name() const {
  return *data_name_;
}
inline void HandledRequest::set_data_name(const ::std::string& value) {
  set_has_data_name();
  if (data_name_ == &::google::protobuf::internal::GetEmptyString()) {
    data_name_ = new ::std::string;
  }
  data_name_->assign(value);
}
inline void HandledRequest::set_data_name(const char* value) {
  set_has_data_name();
  if (data_name_ == &::google::protobuf::internal::GetEmptyString()) {
    data_name_ = new ::std::string;
  }
  data_name_->assign(value);
}
inline void HandledRequest::set_data_name(const void* value, size_t size) {
  set_has_data_name();
  if (data_name_ == &::google::protobuf::internal::GetEmptyString()) {
    data_name_ = new ::std::string;
  }
  data_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HandledRequest::mutable_data_name() {
  set_has_data_name();
  if (data_name_ == &::google::protobuf::internal::GetEmptyString()) {
    data_name_ = new ::std::string;
  }
  return data_name_;
}
inline ::std::string* HandledRequest::release_data_name() {
  clear_has_data_name();
  if (data_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = data_name_;
    data_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void HandledRequest::set_allocated_data_name(::std::string* data_name) {
  if (data_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete data_name_;
  }
  if (data_name) {
    set_has_data_name();
    data_name_ = data_name;
  } else {
    clear_has_data_name();
    data_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required int32 data_type = 4;
inline bool HandledRequest::has_data_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HandledRequest::set_has_data_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HandledRequest::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HandledRequest::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 HandledRequest::data_type() const {
  return data_type_;
}
inline void HandledRequest::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// required int32 size = 5;
inline bool HandledRequest::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HandledRequest::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HandledRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HandledRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 HandledRequest::size() const {
  return size_;
}
inline void HandledRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required bytes reply = 6;
inline bool HandledRequest::has_reply() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HandledRequest::set_has_reply() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HandledRequest::clear_has_reply() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HandledRequest::clear_reply() {
  if (reply_ != &::google::protobuf::internal::GetEmptyString()) {
    reply_->clear();
  }
  clear_has_reply();
}
inline const ::std::string& HandledRequest::reply() const {
  return *reply_;
}
inline void HandledRequest::set_reply(const ::std::string& value) {
  set_has_reply();
  if (reply_ == &::google::protobuf::internal::GetEmptyString()) {
    reply_ = new ::std::string;
  }
  reply_->assign(value);
}
inline void HandledRequest::set_reply(const char* value) {
  set_has_reply();
  if (reply_ == &::google::protobuf::internal::GetEmptyString()) {
    reply_ = new ::std::string;
  }
  reply_->assign(value);
}
inline void HandledRequest::set_reply(const void* value, size_t size) {
  set_has_reply();
  if (reply_ == &::google::protobuf::internal::GetEmptyString()) {
    reply_ = new ::std::string;
  }
  reply_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HandledRequest::mutable_reply() {
  set_has_reply();
  if (reply_ == &::google::protobuf::internal::GetEmptyString()) {
    reply_ = new ::std::string;
  }
  return reply_;
}
inline ::std::string* HandledRequest::release_reply() {
  clear_has_reply();
  if (reply_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = reply_;
    reply_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void HandledRequest::set_allocated_reply(::std::string* reply) {
  if (reply_ != &::google::protobuf::internal::GetEmptyString()) {
    delete reply_;
  }
  if (reply) {
    set_has_reply();
    reply_ = reply;
  } else {
    clear_has_reply();
    reply_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// HandledRequests

// required bytes name = 1;
inline bool HandledRequests::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandledRequests::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandledRequests::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandledRequests::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HandledRequests::name() const {
  return *name_;
}
inline void HandledRequests::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HandledRequests::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HandledRequests::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HandledRequests::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HandledRequests::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void HandledRequests::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .maidsafe.vault.protobuf.HandledRequest handled_requests = 2;
inline int HandledRequests::handled_requests_size() const {
  return handled_requests_.size();
}
inline void HandledRequests::clear_handled_requests() {
  handled_requests_.Clear();
}
inline const ::maidsafe::vault::protobuf::HandledRequest& HandledRequests::handled_requests(int index) const {
  return handled_requests_.Get(index);
}
inline ::maidsafe::vault::protobuf::HandledRequest* HandledRequests::mutable_handled_requests(int index) {
  return handled_requests_.Mutable(index);
}
inline ::maidsafe::vault::protobuf::HandledRequest* HandledRequests::add_handled_requests() {
  return handled_requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::maidsafe::vault::protobuf::HandledRequest >&
HandledRequests::handled_requests() const {
  return handled_requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::maidsafe::vault::protobuf::HandledRequest >*
HandledRequests::mutable_handled_requests() {
  return &handled_requests_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fvault_2fhandled_5frequest_2eproto__INCLUDED
