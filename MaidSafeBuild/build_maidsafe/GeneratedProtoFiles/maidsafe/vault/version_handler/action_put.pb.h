// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/version_handler/action_put.proto

#ifndef PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto();
void protobuf_AssignDesc_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto();
void protobuf_ShutdownFile_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto();

class ActionPut;

// ===================================================================

class ActionPut : public ::google::protobuf::MessageLite {
 public:
  ActionPut();
  virtual ~ActionPut();

  ActionPut(const ActionPut& from);

  inline ActionPut& operator=(const ActionPut& from) {
    CopyFrom(from);
    return *this;
  }

  static const ActionPut& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActionPut* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActionPut* other);

  // implements Message ----------------------------------------------

  ActionPut* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActionPut& from);
  void MergeFrom(const ActionPut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_new_version = 1;
  inline bool has_serialised_new_version() const;
  inline void clear_serialised_new_version();
  static const int kSerialisedNewVersionFieldNumber = 1;
  inline const ::std::string& serialised_new_version() const;
  inline void set_serialised_new_version(const ::std::string& value);
  inline void set_serialised_new_version(const char* value);
  inline void set_serialised_new_version(const void* value, size_t size);
  inline ::std::string* mutable_serialised_new_version();
  inline ::std::string* release_serialised_new_version();
  inline void set_allocated_serialised_new_version(::std::string* serialised_new_version);

  // required int32 message_id = 2;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);

  // optional bytes serialised_old_version = 3;
  inline bool has_serialised_old_version() const;
  inline void clear_serialised_old_version();
  static const int kSerialisedOldVersionFieldNumber = 3;
  inline const ::std::string& serialised_old_version() const;
  inline void set_serialised_old_version(const ::std::string& value);
  inline void set_serialised_old_version(const char* value);
  inline void set_serialised_old_version(const void* value, size_t size);
  inline ::std::string* mutable_serialised_old_version();
  inline ::std::string* release_serialised_old_version();
  inline void set_allocated_serialised_old_version(::std::string* serialised_old_version);

  // required bytes originator = 4;
  inline bool has_originator() const;
  inline void clear_originator();
  static const int kOriginatorFieldNumber = 4;
  inline const ::std::string& originator() const;
  inline void set_originator(const ::std::string& value);
  inline void set_originator(const char* value);
  inline void set_originator(const void* value, size_t size);
  inline ::std::string* mutable_originator();
  inline ::std::string* release_originator();
  inline void set_allocated_originator(::std::string* originator);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.ActionPut)
 private:
  inline void set_has_serialised_new_version();
  inline void clear_has_serialised_new_version();
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_serialised_old_version();
  inline void clear_has_serialised_old_version();
  inline void set_has_originator();
  inline void clear_has_originator();

  ::std::string* serialised_new_version_;
  ::std::string* serialised_old_version_;
  ::std::string* originator_;
  ::google::protobuf::int32 message_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto();

  void InitAsDefaultInstance();
  static ActionPut* default_instance_;
};
// ===================================================================


// ===================================================================

// ActionPut

// required bytes serialised_new_version = 1;
inline bool ActionPut::has_serialised_new_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionPut::set_has_serialised_new_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionPut::clear_has_serialised_new_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionPut::clear_serialised_new_version() {
  if (serialised_new_version_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_new_version_->clear();
  }
  clear_has_serialised_new_version();
}
inline const ::std::string& ActionPut::serialised_new_version() const {
  return *serialised_new_version_;
}
inline void ActionPut::set_serialised_new_version(const ::std::string& value) {
  set_has_serialised_new_version();
  if (serialised_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_new_version_ = new ::std::string;
  }
  serialised_new_version_->assign(value);
}
inline void ActionPut::set_serialised_new_version(const char* value) {
  set_has_serialised_new_version();
  if (serialised_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_new_version_ = new ::std::string;
  }
  serialised_new_version_->assign(value);
}
inline void ActionPut::set_serialised_new_version(const void* value, size_t size) {
  set_has_serialised_new_version();
  if (serialised_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_new_version_ = new ::std::string;
  }
  serialised_new_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionPut::mutable_serialised_new_version() {
  set_has_serialised_new_version();
  if (serialised_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_new_version_ = new ::std::string;
  }
  return serialised_new_version_;
}
inline ::std::string* ActionPut::release_serialised_new_version() {
  clear_has_serialised_new_version();
  if (serialised_new_version_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_new_version_;
    serialised_new_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ActionPut::set_allocated_serialised_new_version(::std::string* serialised_new_version) {
  if (serialised_new_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_new_version_;
  }
  if (serialised_new_version) {
    set_has_serialised_new_version();
    serialised_new_version_ = serialised_new_version;
  } else {
    clear_has_serialised_new_version();
    serialised_new_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required int32 message_id = 2;
inline bool ActionPut::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionPut::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionPut::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionPut::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 ActionPut::message_id() const {
  return message_id_;
}
inline void ActionPut::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// optional bytes serialised_old_version = 3;
inline bool ActionPut::has_serialised_old_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionPut::set_has_serialised_old_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionPut::clear_has_serialised_old_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionPut::clear_serialised_old_version() {
  if (serialised_old_version_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_old_version_->clear();
  }
  clear_has_serialised_old_version();
}
inline const ::std::string& ActionPut::serialised_old_version() const {
  return *serialised_old_version_;
}
inline void ActionPut::set_serialised_old_version(const ::std::string& value) {
  set_has_serialised_old_version();
  if (serialised_old_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_old_version_ = new ::std::string;
  }
  serialised_old_version_->assign(value);
}
inline void ActionPut::set_serialised_old_version(const char* value) {
  set_has_serialised_old_version();
  if (serialised_old_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_old_version_ = new ::std::string;
  }
  serialised_old_version_->assign(value);
}
inline void ActionPut::set_serialised_old_version(const void* value, size_t size) {
  set_has_serialised_old_version();
  if (serialised_old_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_old_version_ = new ::std::string;
  }
  serialised_old_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionPut::mutable_serialised_old_version() {
  set_has_serialised_old_version();
  if (serialised_old_version_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_old_version_ = new ::std::string;
  }
  return serialised_old_version_;
}
inline ::std::string* ActionPut::release_serialised_old_version() {
  clear_has_serialised_old_version();
  if (serialised_old_version_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_old_version_;
    serialised_old_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ActionPut::set_allocated_serialised_old_version(::std::string* serialised_old_version) {
  if (serialised_old_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_old_version_;
  }
  if (serialised_old_version) {
    set_has_serialised_old_version();
    serialised_old_version_ = serialised_old_version;
  } else {
    clear_has_serialised_old_version();
    serialised_old_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes originator = 4;
inline bool ActionPut::has_originator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionPut::set_has_originator() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionPut::clear_has_originator() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionPut::clear_originator() {
  if (originator_ != &::google::protobuf::internal::GetEmptyString()) {
    originator_->clear();
  }
  clear_has_originator();
}
inline const ::std::string& ActionPut::originator() const {
  return *originator_;
}
inline void ActionPut::set_originator(const ::std::string& value) {
  set_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyString()) {
    originator_ = new ::std::string;
  }
  originator_->assign(value);
}
inline void ActionPut::set_originator(const char* value) {
  set_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyString()) {
    originator_ = new ::std::string;
  }
  originator_->assign(value);
}
inline void ActionPut::set_originator(const void* value, size_t size) {
  set_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyString()) {
    originator_ = new ::std::string;
  }
  originator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionPut::mutable_originator() {
  set_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyString()) {
    originator_ = new ::std::string;
  }
  return originator_;
}
inline ::std::string* ActionPut::release_originator() {
  clear_has_originator();
  if (originator_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = originator_;
    originator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ActionPut::set_allocated_originator(::std::string* originator) {
  if (originator_ != &::google::protobuf::internal::GetEmptyString()) {
    delete originator_;
  }
  if (originator) {
    set_has_originator();
    originator_ = originator;
  } else {
    clear_has_originator();
    originator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2faction_5fput_2eproto__INCLUDED
