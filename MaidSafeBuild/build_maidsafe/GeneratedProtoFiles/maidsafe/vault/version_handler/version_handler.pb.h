// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/version_handler/version_handler.proto

#ifndef PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();
void protobuf_AssignDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();
void protobuf_ShutdownFile_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();

class VersionHandlerKeyValuePair;
class VersionHandlerValue;

// ===================================================================

class VersionHandlerKeyValuePair : public ::google::protobuf::MessageLite {
 public:
  VersionHandlerKeyValuePair();
  virtual ~VersionHandlerKeyValuePair();

  VersionHandlerKeyValuePair(const VersionHandlerKeyValuePair& from);

  inline VersionHandlerKeyValuePair& operator=(const VersionHandlerKeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }

  static const VersionHandlerKeyValuePair& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VersionHandlerKeyValuePair* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VersionHandlerKeyValuePair* other);

  // implements Message ----------------------------------------------

  VersionHandlerKeyValuePair* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VersionHandlerKeyValuePair& from);
  void MergeFrom(const VersionHandlerKeyValuePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.VersionHandlerKeyValuePair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();

  void InitAsDefaultInstance();
  static VersionHandlerKeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class VersionHandlerValue : public ::google::protobuf::MessageLite {
 public:
  VersionHandlerValue();
  virtual ~VersionHandlerValue();

  VersionHandlerValue(const VersionHandlerValue& from);

  inline VersionHandlerValue& operator=(const VersionHandlerValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const VersionHandlerValue& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VersionHandlerValue* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VersionHandlerValue* other);

  // implements Message ----------------------------------------------

  VersionHandlerValue* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VersionHandlerValue& from);
  void MergeFrom(const VersionHandlerValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_structured_data_versions = 1;
  inline bool has_serialised_structured_data_versions() const;
  inline void clear_serialised_structured_data_versions();
  static const int kSerialisedStructuredDataVersionsFieldNumber = 1;
  inline const ::std::string& serialised_structured_data_versions() const;
  inline void set_serialised_structured_data_versions(const ::std::string& value);
  inline void set_serialised_structured_data_versions(const char* value);
  inline void set_serialised_structured_data_versions(const void* value, size_t size);
  inline ::std::string* mutable_serialised_structured_data_versions();
  inline ::std::string* release_serialised_structured_data_versions();
  inline void set_allocated_serialised_structured_data_versions(::std::string* serialised_structured_data_versions);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.VersionHandlerValue)
 private:
  inline void set_has_serialised_structured_data_versions();
  inline void clear_has_serialised_structured_data_versions();

  ::std::string* serialised_structured_data_versions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto();

  void InitAsDefaultInstance();
  static VersionHandlerValue* default_instance_;
};
// ===================================================================


// ===================================================================

// VersionHandlerKeyValuePair

// required bytes key = 1;
inline bool VersionHandlerKeyValuePair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionHandlerKeyValuePair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionHandlerKeyValuePair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionHandlerKeyValuePair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& VersionHandlerKeyValuePair::key() const {
  return *key_;
}
inline void VersionHandlerKeyValuePair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void VersionHandlerKeyValuePair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void VersionHandlerKeyValuePair::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionHandlerKeyValuePair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* VersionHandlerKeyValuePair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VersionHandlerKeyValuePair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes value = 2;
inline bool VersionHandlerKeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionHandlerKeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionHandlerKeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionHandlerKeyValuePair::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& VersionHandlerKeyValuePair::value() const {
  return *value_;
}
inline void VersionHandlerKeyValuePair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void VersionHandlerKeyValuePair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void VersionHandlerKeyValuePair::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionHandlerKeyValuePair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* VersionHandlerKeyValuePair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VersionHandlerKeyValuePair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// VersionHandlerValue

// required bytes serialised_structured_data_versions = 1;
inline bool VersionHandlerValue::has_serialised_structured_data_versions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionHandlerValue::set_has_serialised_structured_data_versions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionHandlerValue::clear_has_serialised_structured_data_versions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionHandlerValue::clear_serialised_structured_data_versions() {
  if (serialised_structured_data_versions_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_versions_->clear();
  }
  clear_has_serialised_structured_data_versions();
}
inline const ::std::string& VersionHandlerValue::serialised_structured_data_versions() const {
  return *serialised_structured_data_versions_;
}
inline void VersionHandlerValue::set_serialised_structured_data_versions(const ::std::string& value) {
  set_has_serialised_structured_data_versions();
  if (serialised_structured_data_versions_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_versions_ = new ::std::string;
  }
  serialised_structured_data_versions_->assign(value);
}
inline void VersionHandlerValue::set_serialised_structured_data_versions(const char* value) {
  set_has_serialised_structured_data_versions();
  if (serialised_structured_data_versions_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_versions_ = new ::std::string;
  }
  serialised_structured_data_versions_->assign(value);
}
inline void VersionHandlerValue::set_serialised_structured_data_versions(const void* value, size_t size) {
  set_has_serialised_structured_data_versions();
  if (serialised_structured_data_versions_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_versions_ = new ::std::string;
  }
  serialised_structured_data_versions_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionHandlerValue::mutable_serialised_structured_data_versions() {
  set_has_serialised_structured_data_versions();
  if (serialised_structured_data_versions_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_structured_data_versions_ = new ::std::string;
  }
  return serialised_structured_data_versions_;
}
inline ::std::string* VersionHandlerValue::release_serialised_structured_data_versions() {
  clear_has_serialised_structured_data_versions();
  if (serialised_structured_data_versions_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_structured_data_versions_;
    serialised_structured_data_versions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VersionHandlerValue::set_allocated_serialised_structured_data_versions(::std::string* serialised_structured_data_versions) {
  if (serialised_structured_data_versions_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_structured_data_versions_;
  }
  if (serialised_structured_data_versions) {
    set_has_serialised_structured_data_versions();
    serialised_structured_data_versions_ = serialised_structured_data_versions;
  } else {
    clear_has_serialised_structured_data_versions();
    serialised_structured_data_versions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fhandler_2eproto__INCLUDED
