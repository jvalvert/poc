// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/version_handler/version_name.proto

#ifndef PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto();
void protobuf_AssignDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto();
void protobuf_ShutdownFile_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto();

class VersionName;

// ===================================================================

class VersionName : public ::google::protobuf::MessageLite {
 public:
  VersionName();
  virtual ~VersionName();

  VersionName(const VersionName& from);

  inline VersionName& operator=(const VersionName& from) {
    CopyFrom(from);
    return *this;
  }

  static const VersionName& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VersionName* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VersionName* other);

  // implements Message ----------------------------------------------

  VersionName* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VersionName& from);
  void MergeFrom(const VersionName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // required bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.VersionName)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::uint64 index_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto();

  void InitAsDefaultInstance();
  static VersionName* default_instance_;
};
// ===================================================================


// ===================================================================

// VersionName

// required uint64 index = 1;
inline bool VersionName::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionName::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionName::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionName::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 VersionName::index() const {
  return index_;
}
inline void VersionName::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
}

// required bytes id = 2;
inline bool VersionName::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionName::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionName::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionName::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& VersionName::id() const {
  return *id_;
}
inline void VersionName::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void VersionName::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void VersionName::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionName::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* VersionName::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VersionName::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fvault_2fversion_5fhandler_2fversion_5fname_2eproto__INCLUDED
