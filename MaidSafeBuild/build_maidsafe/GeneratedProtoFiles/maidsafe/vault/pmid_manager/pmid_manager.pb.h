// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/pmid_manager/pmid_manager.proto

#ifndef PROTOBUF_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
void protobuf_AssignDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();

class PmidManagerValue;
class PmidManagerKeyValuePair;
class PmidAccountResponse;
class PmidAccount;
class PmidAccountDetails;
class PutResult;
class StateChange;

// ===================================================================

class PmidManagerValue : public ::google::protobuf::MessageLite {
 public:
  PmidManagerValue();
  virtual ~PmidManagerValue();

  PmidManagerValue(const PmidManagerValue& from);

  inline PmidManagerValue& operator=(const PmidManagerValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const PmidManagerValue& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PmidManagerValue* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PmidManagerValue* other);

  // implements Message ----------------------------------------------

  PmidManagerValue* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PmidManagerValue& from);
  void MergeFrom(const PmidManagerValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 stored_total_size = 1;
  inline bool has_stored_total_size() const;
  inline void clear_stored_total_size();
  static const int kStoredTotalSizeFieldNumber = 1;
  inline ::google::protobuf::int64 stored_total_size() const;
  inline void set_stored_total_size(::google::protobuf::int64 value);

  // required int64 lost_total_size = 2;
  inline bool has_lost_total_size() const;
  inline void clear_lost_total_size();
  static const int kLostTotalSizeFieldNumber = 2;
  inline ::google::protobuf::int64 lost_total_size() const;
  inline void set_lost_total_size(::google::protobuf::int64 value);

  // required int64 offered_space = 3;
  inline bool has_offered_space() const;
  inline void clear_offered_space();
  static const int kOfferedSpaceFieldNumber = 3;
  inline ::google::protobuf::int64 offered_space() const;
  inline void set_offered_space(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.PmidManagerValue)
 private:
  inline void set_has_stored_total_size();
  inline void clear_has_stored_total_size();
  inline void set_has_lost_total_size();
  inline void clear_has_lost_total_size();
  inline void set_has_offered_space();
  inline void clear_has_offered_space();

  ::google::protobuf::int64 stored_total_size_;
  ::google::protobuf::int64 lost_total_size_;
  ::google::protobuf::int64 offered_space_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static PmidManagerValue* default_instance_;
};
// -------------------------------------------------------------------

class PmidManagerKeyValuePair : public ::google::protobuf::MessageLite {
 public:
  PmidManagerKeyValuePair();
  virtual ~PmidManagerKeyValuePair();

  PmidManagerKeyValuePair(const PmidManagerKeyValuePair& from);

  inline PmidManagerKeyValuePair& operator=(const PmidManagerKeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }

  static const PmidManagerKeyValuePair& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PmidManagerKeyValuePair* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PmidManagerKeyValuePair* other);

  // implements Message ----------------------------------------------

  PmidManagerKeyValuePair* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PmidManagerKeyValuePair& from);
  void MergeFrom(const PmidManagerKeyValuePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.PmidManagerKeyValuePair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static PmidManagerKeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class PmidAccountResponse : public ::google::protobuf::MessageLite {
 public:
  PmidAccountResponse();
  virtual ~PmidAccountResponse();

  PmidAccountResponse(const PmidAccountResponse& from);

  inline PmidAccountResponse& operator=(const PmidAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const PmidAccountResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PmidAccountResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PmidAccountResponse* other);

  // implements Message ----------------------------------------------

  PmidAccountResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PmidAccountResponse& from);
  void MergeFrom(const PmidAccountResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .maidsafe.vault.protobuf.PmidAccount pmid_account = 1;
  inline bool has_pmid_account() const;
  inline void clear_pmid_account();
  static const int kPmidAccountFieldNumber = 1;
  inline const ::maidsafe::vault::protobuf::PmidAccount& pmid_account() const;
  inline ::maidsafe::vault::protobuf::PmidAccount* mutable_pmid_account();
  inline ::maidsafe::vault::protobuf::PmidAccount* release_pmid_account();
  inline void set_allocated_pmid_account(::maidsafe::vault::protobuf::PmidAccount* pmid_account);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.PmidAccountResponse)
 private:
  inline void set_has_pmid_account();
  inline void clear_has_pmid_account();
  inline void set_has_status();
  inline void clear_has_status();

  ::maidsafe::vault::protobuf::PmidAccount* pmid_account_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static PmidAccountResponse* default_instance_;
};
// -------------------------------------------------------------------

class PmidAccount : public ::google::protobuf::MessageLite {
 public:
  PmidAccount();
  virtual ~PmidAccount();

  PmidAccount(const PmidAccount& from);

  inline PmidAccount& operator=(const PmidAccount& from) {
    CopyFrom(from);
    return *this;
  }

  static const PmidAccount& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PmidAccount* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PmidAccount* other);

  // implements Message ----------------------------------------------

  PmidAccount* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PmidAccount& from);
  void MergeFrom(const PmidAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes pmid_name = 1;
  inline bool has_pmid_name() const;
  inline void clear_pmid_name();
  static const int kPmidNameFieldNumber = 1;
  inline const ::std::string& pmid_name() const;
  inline void set_pmid_name(const ::std::string& value);
  inline void set_pmid_name(const char* value);
  inline void set_pmid_name(const void* value, size_t size);
  inline ::std::string* mutable_pmid_name();
  inline ::std::string* release_pmid_name();
  inline void set_allocated_pmid_name(::std::string* pmid_name);

  // required bytes serialised_account_details = 2;
  inline bool has_serialised_account_details() const;
  inline void clear_serialised_account_details();
  static const int kSerialisedAccountDetailsFieldNumber = 2;
  inline const ::std::string& serialised_account_details() const;
  inline void set_serialised_account_details(const ::std::string& value);
  inline void set_serialised_account_details(const char* value);
  inline void set_serialised_account_details(const void* value, size_t size);
  inline ::std::string* mutable_serialised_account_details();
  inline ::std::string* release_serialised_account_details();
  inline void set_allocated_serialised_account_details(::std::string* serialised_account_details);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.PmidAccount)
 private:
  inline void set_has_pmid_name();
  inline void clear_has_pmid_name();
  inline void set_has_serialised_account_details();
  inline void clear_has_serialised_account_details();

  ::std::string* pmid_name_;
  ::std::string* serialised_account_details_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static PmidAccount* default_instance_;
};
// -------------------------------------------------------------------

class PmidAccountDetails : public ::google::protobuf::MessageLite {
 public:
  PmidAccountDetails();
  virtual ~PmidAccountDetails();

  PmidAccountDetails(const PmidAccountDetails& from);

  inline PmidAccountDetails& operator=(const PmidAccountDetails& from) {
    CopyFrom(from);
    return *this;
  }

  static const PmidAccountDetails& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PmidAccountDetails* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PmidAccountDetails* other);

  // implements Message ----------------------------------------------

  PmidAccountDetails* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PmidAccountDetails& from);
  void MergeFrom(const PmidAccountDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_pmid_manager_metadata = 1;
  inline bool has_serialised_pmid_manager_metadata() const;
  inline void clear_serialised_pmid_manager_metadata();
  static const int kSerialisedPmidManagerMetadataFieldNumber = 1;
  inline const ::std::string& serialised_pmid_manager_metadata() const;
  inline void set_serialised_pmid_manager_metadata(const ::std::string& value);
  inline void set_serialised_pmid_manager_metadata(const char* value);
  inline void set_serialised_pmid_manager_metadata(const void* value, size_t size);
  inline ::std::string* mutable_serialised_pmid_manager_metadata();
  inline ::std::string* release_serialised_pmid_manager_metadata();
  inline void set_allocated_serialised_pmid_manager_metadata(::std::string* serialised_pmid_manager_metadata);

  // repeated bytes serialised_unresolved_entry = 2;
  inline int serialised_unresolved_entry_size() const;
  inline void clear_serialised_unresolved_entry();
  static const int kSerialisedUnresolvedEntryFieldNumber = 2;
  inline const ::std::string& serialised_unresolved_entry(int index) const;
  inline ::std::string* mutable_serialised_unresolved_entry(int index);
  inline void set_serialised_unresolved_entry(int index, const ::std::string& value);
  inline void set_serialised_unresolved_entry(int index, const char* value);
  inline void set_serialised_unresolved_entry(int index, const void* value, size_t size);
  inline ::std::string* add_serialised_unresolved_entry();
  inline void add_serialised_unresolved_entry(const ::std::string& value);
  inline void add_serialised_unresolved_entry(const char* value);
  inline void add_serialised_unresolved_entry(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& serialised_unresolved_entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serialised_unresolved_entry();

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.PmidAccountDetails)
 private:
  inline void set_has_serialised_pmid_manager_metadata();
  inline void clear_has_serialised_pmid_manager_metadata();

  ::std::string* serialised_pmid_manager_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serialised_unresolved_entry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static PmidAccountDetails* default_instance_;
};
// -------------------------------------------------------------------

class PutResult : public ::google::protobuf::MessageLite {
 public:
  PutResult();
  virtual ~PutResult();

  PutResult(const PutResult& from);

  inline PutResult& operator=(const PutResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const PutResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PutResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PutResult* other);

  // implements Message ----------------------------------------------

  PutResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PutResult& from);
  void MergeFrom(const PutResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // required bytes pmid_name = 2;
  inline bool has_pmid_name() const;
  inline void clear_pmid_name();
  static const int kPmidNameFieldNumber = 2;
  inline const ::std::string& pmid_name() const;
  inline void set_pmid_name(const ::std::string& value);
  inline void set_pmid_name(const char* value);
  inline void set_pmid_name(const void* value, size_t size);
  inline ::std::string* mutable_pmid_name();
  inline ::std::string* release_pmid_name();
  inline void set_allocated_pmid_name(::std::string* pmid_name);

  // optional int32 data_size = 3;
  inline bool has_data_size() const;
  inline void clear_data_size();
  static const int kDataSizeFieldNumber = 3;
  inline ::google::protobuf::int32 data_size() const;
  inline void set_data_size(::google::protobuf::int32 value);

  // optional bytes serialised_data = 4;
  inline bool has_serialised_data() const;
  inline void clear_serialised_data();
  static const int kSerialisedDataFieldNumber = 4;
  inline const ::std::string& serialised_data() const;
  inline void set_serialised_data(const ::std::string& value);
  inline void set_serialised_data(const char* value);
  inline void set_serialised_data(const void* value, size_t size);
  inline ::std::string* mutable_serialised_data();
  inline ::std::string* release_serialised_data();
  inline void set_allocated_serialised_data(::std::string* serialised_data);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.PutResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pmid_name();
  inline void clear_has_pmid_name();
  inline void set_has_data_size();
  inline void clear_has_data_size();
  inline void set_has_serialised_data();
  inline void clear_has_serialised_data();

  ::std::string* pmid_name_;
  bool result_;
  ::google::protobuf::int32 data_size_;
  ::std::string* serialised_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static PutResult* default_instance_;
};
// -------------------------------------------------------------------

class StateChange : public ::google::protobuf::MessageLite {
 public:
  StateChange();
  virtual ~StateChange();

  StateChange(const StateChange& from);

  inline StateChange& operator=(const StateChange& from) {
    CopyFrom(from);
    return *this;
  }

  static const StateChange& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StateChange* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StateChange* other);

  // implements Message ----------------------------------------------

  StateChange* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StateChange& from);
  void MergeFrom(const StateChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes pmid_name = 1;
  inline bool has_pmid_name() const;
  inline void clear_pmid_name();
  static const int kPmidNameFieldNumber = 1;
  inline const ::std::string& pmid_name() const;
  inline void set_pmid_name(const ::std::string& value);
  inline void set_pmid_name(const char* value);
  inline void set_pmid_name(const void* value, size_t size);
  inline ::std::string* mutable_pmid_name();
  inline ::std::string* release_pmid_name();
  inline void set_allocated_pmid_name(::std::string* pmid_name);

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.StateChange)
 private:
  inline void set_has_pmid_name();
  inline void clear_has_pmid_name();

  ::std::string* pmid_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static StateChange* default_instance_;
};
// ===================================================================


// ===================================================================

// PmidManagerValue

// required int64 stored_total_size = 1;
inline bool PmidManagerValue::has_stored_total_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmidManagerValue::set_has_stored_total_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmidManagerValue::clear_has_stored_total_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmidManagerValue::clear_stored_total_size() {
  stored_total_size_ = GOOGLE_LONGLONG(0);
  clear_has_stored_total_size();
}
inline ::google::protobuf::int64 PmidManagerValue::stored_total_size() const {
  return stored_total_size_;
}
inline void PmidManagerValue::set_stored_total_size(::google::protobuf::int64 value) {
  set_has_stored_total_size();
  stored_total_size_ = value;
}

// required int64 lost_total_size = 2;
inline bool PmidManagerValue::has_lost_total_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PmidManagerValue::set_has_lost_total_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PmidManagerValue::clear_has_lost_total_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PmidManagerValue::clear_lost_total_size() {
  lost_total_size_ = GOOGLE_LONGLONG(0);
  clear_has_lost_total_size();
}
inline ::google::protobuf::int64 PmidManagerValue::lost_total_size() const {
  return lost_total_size_;
}
inline void PmidManagerValue::set_lost_total_size(::google::protobuf::int64 value) {
  set_has_lost_total_size();
  lost_total_size_ = value;
}

// required int64 offered_space = 3;
inline bool PmidManagerValue::has_offered_space() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PmidManagerValue::set_has_offered_space() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PmidManagerValue::clear_has_offered_space() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PmidManagerValue::clear_offered_space() {
  offered_space_ = GOOGLE_LONGLONG(0);
  clear_has_offered_space();
}
inline ::google::protobuf::int64 PmidManagerValue::offered_space() const {
  return offered_space_;
}
inline void PmidManagerValue::set_offered_space(::google::protobuf::int64 value) {
  set_has_offered_space();
  offered_space_ = value;
}

// -------------------------------------------------------------------

// PmidManagerKeyValuePair

// required bytes key = 1;
inline bool PmidManagerKeyValuePair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmidManagerKeyValuePair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmidManagerKeyValuePair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmidManagerKeyValuePair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PmidManagerKeyValuePair::key() const {
  return *key_;
}
inline void PmidManagerKeyValuePair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PmidManagerKeyValuePair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PmidManagerKeyValuePair::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidManagerKeyValuePair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PmidManagerKeyValuePair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidManagerKeyValuePair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes value = 2;
inline bool PmidManagerKeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PmidManagerKeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PmidManagerKeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PmidManagerKeyValuePair::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PmidManagerKeyValuePair::value() const {
  return *value_;
}
inline void PmidManagerKeyValuePair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PmidManagerKeyValuePair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PmidManagerKeyValuePair::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidManagerKeyValuePair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PmidManagerKeyValuePair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidManagerKeyValuePair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// PmidAccountResponse

// required .maidsafe.vault.protobuf.PmidAccount pmid_account = 1;
inline bool PmidAccountResponse::has_pmid_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmidAccountResponse::set_has_pmid_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmidAccountResponse::clear_has_pmid_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmidAccountResponse::clear_pmid_account() {
  if (pmid_account_ != NULL) pmid_account_->::maidsafe::vault::protobuf::PmidAccount::Clear();
  clear_has_pmid_account();
}
inline const ::maidsafe::vault::protobuf::PmidAccount& PmidAccountResponse::pmid_account() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pmid_account_ != NULL ? *pmid_account_ : *default_instance().pmid_account_;
#else
  return pmid_account_ != NULL ? *pmid_account_ : *default_instance_->pmid_account_;
#endif
}
inline ::maidsafe::vault::protobuf::PmidAccount* PmidAccountResponse::mutable_pmid_account() {
  set_has_pmid_account();
  if (pmid_account_ == NULL) pmid_account_ = new ::maidsafe::vault::protobuf::PmidAccount;
  return pmid_account_;
}
inline ::maidsafe::vault::protobuf::PmidAccount* PmidAccountResponse::release_pmid_account() {
  clear_has_pmid_account();
  ::maidsafe::vault::protobuf::PmidAccount* temp = pmid_account_;
  pmid_account_ = NULL;
  return temp;
}
inline void PmidAccountResponse::set_allocated_pmid_account(::maidsafe::vault::protobuf::PmidAccount* pmid_account) {
  delete pmid_account_;
  pmid_account_ = pmid_account;
  if (pmid_account) {
    set_has_pmid_account();
  } else {
    clear_has_pmid_account();
  }
}

// required int32 status = 2;
inline bool PmidAccountResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PmidAccountResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PmidAccountResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PmidAccountResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PmidAccountResponse::status() const {
  return status_;
}
inline void PmidAccountResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// PmidAccount

// required bytes pmid_name = 1;
inline bool PmidAccount::has_pmid_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmidAccount::set_has_pmid_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmidAccount::clear_has_pmid_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmidAccount::clear_pmid_name() {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_->clear();
  }
  clear_has_pmid_name();
}
inline const ::std::string& PmidAccount::pmid_name() const {
  return *pmid_name_;
}
inline void PmidAccount::set_pmid_name(const ::std::string& value) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(value);
}
inline void PmidAccount::set_pmid_name(const char* value) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(value);
}
inline void PmidAccount::set_pmid_name(const void* value, size_t size) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidAccount::mutable_pmid_name() {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  return pmid_name_;
}
inline ::std::string* PmidAccount::release_pmid_name() {
  clear_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pmid_name_;
    pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidAccount::set_allocated_pmid_name(::std::string* pmid_name) {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_name_;
  }
  if (pmid_name) {
    set_has_pmid_name();
    pmid_name_ = pmid_name;
  } else {
    clear_has_pmid_name();
    pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes serialised_account_details = 2;
inline bool PmidAccount::has_serialised_account_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PmidAccount::set_has_serialised_account_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PmidAccount::clear_has_serialised_account_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PmidAccount::clear_serialised_account_details() {
  if (serialised_account_details_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_account_details_->clear();
  }
  clear_has_serialised_account_details();
}
inline const ::std::string& PmidAccount::serialised_account_details() const {
  return *serialised_account_details_;
}
inline void PmidAccount::set_serialised_account_details(const ::std::string& value) {
  set_has_serialised_account_details();
  if (serialised_account_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_account_details_ = new ::std::string;
  }
  serialised_account_details_->assign(value);
}
inline void PmidAccount::set_serialised_account_details(const char* value) {
  set_has_serialised_account_details();
  if (serialised_account_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_account_details_ = new ::std::string;
  }
  serialised_account_details_->assign(value);
}
inline void PmidAccount::set_serialised_account_details(const void* value, size_t size) {
  set_has_serialised_account_details();
  if (serialised_account_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_account_details_ = new ::std::string;
  }
  serialised_account_details_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidAccount::mutable_serialised_account_details() {
  set_has_serialised_account_details();
  if (serialised_account_details_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_account_details_ = new ::std::string;
  }
  return serialised_account_details_;
}
inline ::std::string* PmidAccount::release_serialised_account_details() {
  clear_has_serialised_account_details();
  if (serialised_account_details_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_account_details_;
    serialised_account_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidAccount::set_allocated_serialised_account_details(::std::string* serialised_account_details) {
  if (serialised_account_details_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_account_details_;
  }
  if (serialised_account_details) {
    set_has_serialised_account_details();
    serialised_account_details_ = serialised_account_details;
  } else {
    clear_has_serialised_account_details();
    serialised_account_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// PmidAccountDetails

// required bytes serialised_pmid_manager_metadata = 1;
inline bool PmidAccountDetails::has_serialised_pmid_manager_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmidAccountDetails::set_has_serialised_pmid_manager_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmidAccountDetails::clear_has_serialised_pmid_manager_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmidAccountDetails::clear_serialised_pmid_manager_metadata() {
  if (serialised_pmid_manager_metadata_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_pmid_manager_metadata_->clear();
  }
  clear_has_serialised_pmid_manager_metadata();
}
inline const ::std::string& PmidAccountDetails::serialised_pmid_manager_metadata() const {
  return *serialised_pmid_manager_metadata_;
}
inline void PmidAccountDetails::set_serialised_pmid_manager_metadata(const ::std::string& value) {
  set_has_serialised_pmid_manager_metadata();
  if (serialised_pmid_manager_metadata_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_pmid_manager_metadata_ = new ::std::string;
  }
  serialised_pmid_manager_metadata_->assign(value);
}
inline void PmidAccountDetails::set_serialised_pmid_manager_metadata(const char* value) {
  set_has_serialised_pmid_manager_metadata();
  if (serialised_pmid_manager_metadata_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_pmid_manager_metadata_ = new ::std::string;
  }
  serialised_pmid_manager_metadata_->assign(value);
}
inline void PmidAccountDetails::set_serialised_pmid_manager_metadata(const void* value, size_t size) {
  set_has_serialised_pmid_manager_metadata();
  if (serialised_pmid_manager_metadata_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_pmid_manager_metadata_ = new ::std::string;
  }
  serialised_pmid_manager_metadata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidAccountDetails::mutable_serialised_pmid_manager_metadata() {
  set_has_serialised_pmid_manager_metadata();
  if (serialised_pmid_manager_metadata_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_pmid_manager_metadata_ = new ::std::string;
  }
  return serialised_pmid_manager_metadata_;
}
inline ::std::string* PmidAccountDetails::release_serialised_pmid_manager_metadata() {
  clear_has_serialised_pmid_manager_metadata();
  if (serialised_pmid_manager_metadata_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_pmid_manager_metadata_;
    serialised_pmid_manager_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PmidAccountDetails::set_allocated_serialised_pmid_manager_metadata(::std::string* serialised_pmid_manager_metadata) {
  if (serialised_pmid_manager_metadata_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_pmid_manager_metadata_;
  }
  if (serialised_pmid_manager_metadata) {
    set_has_serialised_pmid_manager_metadata();
    serialised_pmid_manager_metadata_ = serialised_pmid_manager_metadata;
  } else {
    clear_has_serialised_pmid_manager_metadata();
    serialised_pmid_manager_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated bytes serialised_unresolved_entry = 2;
inline int PmidAccountDetails::serialised_unresolved_entry_size() const {
  return serialised_unresolved_entry_.size();
}
inline void PmidAccountDetails::clear_serialised_unresolved_entry() {
  serialised_unresolved_entry_.Clear();
}
inline const ::std::string& PmidAccountDetails::serialised_unresolved_entry(int index) const {
  return serialised_unresolved_entry_.Get(index);
}
inline ::std::string* PmidAccountDetails::mutable_serialised_unresolved_entry(int index) {
  return serialised_unresolved_entry_.Mutable(index);
}
inline void PmidAccountDetails::set_serialised_unresolved_entry(int index, const ::std::string& value) {
  serialised_unresolved_entry_.Mutable(index)->assign(value);
}
inline void PmidAccountDetails::set_serialised_unresolved_entry(int index, const char* value) {
  serialised_unresolved_entry_.Mutable(index)->assign(value);
}
inline void PmidAccountDetails::set_serialised_unresolved_entry(int index, const void* value, size_t size) {
  serialised_unresolved_entry_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PmidAccountDetails::add_serialised_unresolved_entry() {
  return serialised_unresolved_entry_.Add();
}
inline void PmidAccountDetails::add_serialised_unresolved_entry(const ::std::string& value) {
  serialised_unresolved_entry_.Add()->assign(value);
}
inline void PmidAccountDetails::add_serialised_unresolved_entry(const char* value) {
  serialised_unresolved_entry_.Add()->assign(value);
}
inline void PmidAccountDetails::add_serialised_unresolved_entry(const void* value, size_t size) {
  serialised_unresolved_entry_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PmidAccountDetails::serialised_unresolved_entry() const {
  return serialised_unresolved_entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PmidAccountDetails::mutable_serialised_unresolved_entry() {
  return &serialised_unresolved_entry_;
}

// -------------------------------------------------------------------

// PutResult

// required bool result = 1;
inline bool PutResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool PutResult::result() const {
  return result_;
}
inline void PutResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// required bytes pmid_name = 2;
inline bool PutResult::has_pmid_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutResult::set_has_pmid_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutResult::clear_has_pmid_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutResult::clear_pmid_name() {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_->clear();
  }
  clear_has_pmid_name();
}
inline const ::std::string& PutResult::pmid_name() const {
  return *pmid_name_;
}
inline void PutResult::set_pmid_name(const ::std::string& value) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(value);
}
inline void PutResult::set_pmid_name(const char* value) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(value);
}
inline void PutResult::set_pmid_name(const void* value, size_t size) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PutResult::mutable_pmid_name() {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  return pmid_name_;
}
inline ::std::string* PutResult::release_pmid_name() {
  clear_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pmid_name_;
    pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PutResult::set_allocated_pmid_name(::std::string* pmid_name) {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_name_;
  }
  if (pmid_name) {
    set_has_pmid_name();
    pmid_name_ = pmid_name;
  } else {
    clear_has_pmid_name();
    pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 data_size = 3;
inline bool PutResult::has_data_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutResult::set_has_data_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutResult::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutResult::clear_data_size() {
  data_size_ = 0;
  clear_has_data_size();
}
inline ::google::protobuf::int32 PutResult::data_size() const {
  return data_size_;
}
inline void PutResult::set_data_size(::google::protobuf::int32 value) {
  set_has_data_size();
  data_size_ = value;
}

// optional bytes serialised_data = 4;
inline bool PutResult::has_serialised_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PutResult::set_has_serialised_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PutResult::clear_has_serialised_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PutResult::clear_serialised_data() {
  if (serialised_data_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_->clear();
  }
  clear_has_serialised_data();
}
inline const ::std::string& PutResult::serialised_data() const {
  return *serialised_data_;
}
inline void PutResult::set_serialised_data(const ::std::string& value) {
  set_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_ = new ::std::string;
  }
  serialised_data_->assign(value);
}
inline void PutResult::set_serialised_data(const char* value) {
  set_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_ = new ::std::string;
  }
  serialised_data_->assign(value);
}
inline void PutResult::set_serialised_data(const void* value, size_t size) {
  set_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_ = new ::std::string;
  }
  serialised_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PutResult::mutable_serialised_data() {
  set_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_data_ = new ::std::string;
  }
  return serialised_data_;
}
inline ::std::string* PutResult::release_serialised_data() {
  clear_has_serialised_data();
  if (serialised_data_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_data_;
    serialised_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PutResult::set_allocated_serialised_data(::std::string* serialised_data) {
  if (serialised_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_;
  }
  if (serialised_data) {
    set_has_serialised_data();
    serialised_data_ = serialised_data;
  } else {
    clear_has_serialised_data();
    serialised_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// StateChange

// required bytes pmid_name = 1;
inline bool StateChange::has_pmid_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateChange::set_has_pmid_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateChange::clear_has_pmid_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateChange::clear_pmid_name() {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_->clear();
  }
  clear_has_pmid_name();
}
inline const ::std::string& StateChange::pmid_name() const {
  return *pmid_name_;
}
inline void StateChange::set_pmid_name(const ::std::string& value) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(value);
}
inline void StateChange::set_pmid_name(const char* value) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(value);
}
inline void StateChange::set_pmid_name(const void* value, size_t size) {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  pmid_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateChange::mutable_pmid_name() {
  set_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pmid_name_ = new ::std::string;
  }
  return pmid_name_;
}
inline ::std::string* StateChange::release_pmid_name() {
  clear_has_pmid_name();
  if (pmid_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pmid_name_;
    pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void StateChange::set_allocated_pmid_name(::std::string* pmid_name) {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_name_;
  }
  if (pmid_name) {
    set_has_pmid_name();
    pmid_name_ = pmid_name;
  } else {
    clear_has_pmid_name();
    pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto__INCLUDED
