// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/pmid_manager/pmid_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/vault/pmid_manager/pmid_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

void protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto() {
  delete PmidManagerValue::default_instance_;
  delete PmidManagerKeyValuePair::default_instance_;
  delete PmidAccountResponse::default_instance_;
  delete PmidAccount::default_instance_;
  delete PmidAccountDetails::default_instance_;
  delete PutResult::default_instance_;
  delete StateChange::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PmidManagerValue::default_instance_ = new PmidManagerValue();
  PmidManagerKeyValuePair::default_instance_ = new PmidManagerKeyValuePair();
  PmidAccountResponse::default_instance_ = new PmidAccountResponse();
  PmidAccount::default_instance_ = new PmidAccount();
  PmidAccountDetails::default_instance_ = new PmidAccountDetails();
  PutResult::default_instance_ = new PutResult();
  StateChange::default_instance_ = new StateChange();
  PmidManagerValue::default_instance_->InitAsDefaultInstance();
  PmidManagerKeyValuePair::default_instance_->InitAsDefaultInstance();
  PmidAccountResponse::default_instance_->InitAsDefaultInstance();
  PmidAccount::default_instance_->InitAsDefaultInstance();
  PmidAccountDetails::default_instance_->InitAsDefaultInstance();
  PutResult::default_instance_->InitAsDefaultInstance();
  StateChange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_once_);
void protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_once_,
                 &protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto {
  StaticDescriptorInitializer_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto() {
    protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PmidManagerValue::kStoredTotalSizeFieldNumber;
const int PmidManagerValue::kLostTotalSizeFieldNumber;
const int PmidManagerValue::kOfferedSpaceFieldNumber;
#endif  // !_MSC_VER

PmidManagerValue::PmidManagerValue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PmidManagerValue::InitAsDefaultInstance() {
}

PmidManagerValue::PmidManagerValue(const PmidManagerValue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PmidManagerValue::SharedCtor() {
  _cached_size_ = 0;
  stored_total_size_ = GOOGLE_LONGLONG(0);
  lost_total_size_ = GOOGLE_LONGLONG(0);
  offered_space_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PmidManagerValue::~PmidManagerValue() {
  SharedDtor();
}

void PmidManagerValue::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PmidManagerValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PmidManagerValue& PmidManagerValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

PmidManagerValue* PmidManagerValue::default_instance_ = NULL;

PmidManagerValue* PmidManagerValue::New() const {
  return new PmidManagerValue;
}

void PmidManagerValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stored_total_size_ = GOOGLE_LONGLONG(0);
    lost_total_size_ = GOOGLE_LONGLONG(0);
    offered_space_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PmidManagerValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 stored_total_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stored_total_size_)));
          set_has_stored_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lost_total_size;
        break;
      }

      // required int64 lost_total_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lost_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lost_total_size_)));
          set_has_lost_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offered_space;
        break;
      }

      // required int64 offered_space = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offered_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offered_space_)));
          set_has_offered_space();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PmidManagerValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 stored_total_size = 1;
  if (has_stored_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stored_total_size(), output);
  }

  // required int64 lost_total_size = 2;
  if (has_lost_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lost_total_size(), output);
  }

  // required int64 offered_space = 3;
  if (has_offered_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offered_space(), output);
  }

}

int PmidManagerValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 stored_total_size = 1;
    if (has_stored_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stored_total_size());
    }

    // required int64 lost_total_size = 2;
    if (has_lost_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lost_total_size());
    }

    // required int64 offered_space = 3;
    if (has_offered_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offered_space());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PmidManagerValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PmidManagerValue*>(&from));
}

void PmidManagerValue::MergeFrom(const PmidManagerValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stored_total_size()) {
      set_stored_total_size(from.stored_total_size());
    }
    if (from.has_lost_total_size()) {
      set_lost_total_size(from.lost_total_size());
    }
    if (from.has_offered_space()) {
      set_offered_space(from.offered_space());
    }
  }
}

void PmidManagerValue::CopyFrom(const PmidManagerValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmidManagerValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PmidManagerValue::Swap(PmidManagerValue* other) {
  if (other != this) {
    std::swap(stored_total_size_, other->stored_total_size_);
    std::swap(lost_total_size_, other->lost_total_size_);
    std::swap(offered_space_, other->offered_space_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PmidManagerValue::GetTypeName() const {
  return "maidsafe.vault.protobuf.PmidManagerValue";
}


// ===================================================================

#ifndef _MSC_VER
const int PmidManagerKeyValuePair::kKeyFieldNumber;
const int PmidManagerKeyValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

PmidManagerKeyValuePair::PmidManagerKeyValuePair()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PmidManagerKeyValuePair::InitAsDefaultInstance() {
}

PmidManagerKeyValuePair::PmidManagerKeyValuePair(const PmidManagerKeyValuePair& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PmidManagerKeyValuePair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PmidManagerKeyValuePair::~PmidManagerKeyValuePair() {
  SharedDtor();
}

void PmidManagerKeyValuePair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PmidManagerKeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PmidManagerKeyValuePair& PmidManagerKeyValuePair::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

PmidManagerKeyValuePair* PmidManagerKeyValuePair::default_instance_ = NULL;

PmidManagerKeyValuePair* PmidManagerKeyValuePair::New() const {
  return new PmidManagerKeyValuePair;
}

void PmidManagerKeyValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyString()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PmidManagerKeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PmidManagerKeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

}

int PmidManagerKeyValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PmidManagerKeyValuePair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PmidManagerKeyValuePair*>(&from));
}

void PmidManagerKeyValuePair::MergeFrom(const PmidManagerKeyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void PmidManagerKeyValuePair::CopyFrom(const PmidManagerKeyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmidManagerKeyValuePair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PmidManagerKeyValuePair::Swap(PmidManagerKeyValuePair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PmidManagerKeyValuePair::GetTypeName() const {
  return "maidsafe.vault.protobuf.PmidManagerKeyValuePair";
}


// ===================================================================

#ifndef _MSC_VER
const int PmidAccountResponse::kPmidAccountFieldNumber;
const int PmidAccountResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

PmidAccountResponse::PmidAccountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PmidAccountResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pmid_account_ = const_cast< ::maidsafe::vault::protobuf::PmidAccount*>(
      ::maidsafe::vault::protobuf::PmidAccount::internal_default_instance());
#else
  pmid_account_ = const_cast< ::maidsafe::vault::protobuf::PmidAccount*>(&::maidsafe::vault::protobuf::PmidAccount::default_instance());
#endif
}

PmidAccountResponse::PmidAccountResponse(const PmidAccountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PmidAccountResponse::SharedCtor() {
  _cached_size_ = 0;
  pmid_account_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PmidAccountResponse::~PmidAccountResponse() {
  SharedDtor();
}

void PmidAccountResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pmid_account_;
  }
}

void PmidAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PmidAccountResponse& PmidAccountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

PmidAccountResponse* PmidAccountResponse::default_instance_ = NULL;

PmidAccountResponse* PmidAccountResponse::New() const {
  return new PmidAccountResponse;
}

void PmidAccountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pmid_account()) {
      if (pmid_account_ != NULL) pmid_account_->::maidsafe::vault::protobuf::PmidAccount::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PmidAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.vault.protobuf.PmidAccount pmid_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pmid_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PmidAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.vault.protobuf.PmidAccount pmid_account = 1;
  if (has_pmid_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->pmid_account(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

}

int PmidAccountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.vault.protobuf.PmidAccount pmid_account = 1;
    if (has_pmid_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pmid_account());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PmidAccountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PmidAccountResponse*>(&from));
}

void PmidAccountResponse::MergeFrom(const PmidAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pmid_account()) {
      mutable_pmid_account()->::maidsafe::vault::protobuf::PmidAccount::MergeFrom(from.pmid_account());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void PmidAccountResponse::CopyFrom(const PmidAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmidAccountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pmid_account()) {
    if (!this->pmid_account().IsInitialized()) return false;
  }
  return true;
}

void PmidAccountResponse::Swap(PmidAccountResponse* other) {
  if (other != this) {
    std::swap(pmid_account_, other->pmid_account_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PmidAccountResponse::GetTypeName() const {
  return "maidsafe.vault.protobuf.PmidAccountResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PmidAccount::kPmidNameFieldNumber;
const int PmidAccount::kSerialisedAccountDetailsFieldNumber;
#endif  // !_MSC_VER

PmidAccount::PmidAccount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PmidAccount::InitAsDefaultInstance() {
}

PmidAccount::PmidAccount(const PmidAccount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PmidAccount::SharedCtor() {
  _cached_size_ = 0;
  pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  serialised_account_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PmidAccount::~PmidAccount() {
  SharedDtor();
}

void PmidAccount::SharedDtor() {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_name_;
  }
  if (serialised_account_details_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_account_details_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PmidAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PmidAccount& PmidAccount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

PmidAccount* PmidAccount::default_instance_ = NULL;

PmidAccount* PmidAccount::New() const {
  return new PmidAccount;
}

void PmidAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pmid_name()) {
      if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
        pmid_name_->clear();
      }
    }
    if (has_serialised_account_details()) {
      if (serialised_account_details_ != &::google::protobuf::internal::GetEmptyString()) {
        serialised_account_details_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PmidAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes pmid_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pmid_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialised_account_details;
        break;
      }

      // required bytes serialised_account_details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_account_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_account_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PmidAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes pmid_name = 1;
  if (has_pmid_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->pmid_name(), output);
  }

  // required bytes serialised_account_details = 2;
  if (has_serialised_account_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialised_account_details(), output);
  }

}

int PmidAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes pmid_name = 1;
    if (has_pmid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pmid_name());
    }

    // required bytes serialised_account_details = 2;
    if (has_serialised_account_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_account_details());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PmidAccount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PmidAccount*>(&from));
}

void PmidAccount::MergeFrom(const PmidAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pmid_name()) {
      set_pmid_name(from.pmid_name());
    }
    if (from.has_serialised_account_details()) {
      set_serialised_account_details(from.serialised_account_details());
    }
  }
}

void PmidAccount::CopyFrom(const PmidAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmidAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PmidAccount::Swap(PmidAccount* other) {
  if (other != this) {
    std::swap(pmid_name_, other->pmid_name_);
    std::swap(serialised_account_details_, other->serialised_account_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PmidAccount::GetTypeName() const {
  return "maidsafe.vault.protobuf.PmidAccount";
}


// ===================================================================

#ifndef _MSC_VER
const int PmidAccountDetails::kSerialisedPmidManagerMetadataFieldNumber;
const int PmidAccountDetails::kSerialisedUnresolvedEntryFieldNumber;
#endif  // !_MSC_VER

PmidAccountDetails::PmidAccountDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PmidAccountDetails::InitAsDefaultInstance() {
}

PmidAccountDetails::PmidAccountDetails(const PmidAccountDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PmidAccountDetails::SharedCtor() {
  _cached_size_ = 0;
  serialised_pmid_manager_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PmidAccountDetails::~PmidAccountDetails() {
  SharedDtor();
}

void PmidAccountDetails::SharedDtor() {
  if (serialised_pmid_manager_metadata_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_pmid_manager_metadata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PmidAccountDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PmidAccountDetails& PmidAccountDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

PmidAccountDetails* PmidAccountDetails::default_instance_ = NULL;

PmidAccountDetails* PmidAccountDetails::New() const {
  return new PmidAccountDetails;
}

void PmidAccountDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serialised_pmid_manager_metadata()) {
      if (serialised_pmid_manager_metadata_ != &::google::protobuf::internal::GetEmptyString()) {
        serialised_pmid_manager_metadata_->clear();
      }
    }
  }
  serialised_unresolved_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PmidAccountDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serialised_pmid_manager_metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_pmid_manager_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialised_unresolved_entry;
        break;
      }

      // repeated bytes serialised_unresolved_entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_unresolved_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_serialised_unresolved_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialised_unresolved_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PmidAccountDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes serialised_pmid_manager_metadata = 1;
  if (has_serialised_pmid_manager_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serialised_pmid_manager_metadata(), output);
  }

  // repeated bytes serialised_unresolved_entry = 2;
  for (int i = 0; i < this->serialised_unresolved_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialised_unresolved_entry(i), output);
  }

}

int PmidAccountDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serialised_pmid_manager_metadata = 1;
    if (has_serialised_pmid_manager_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_pmid_manager_metadata());
    }

  }
  // repeated bytes serialised_unresolved_entry = 2;
  total_size += 1 * this->serialised_unresolved_entry_size();
  for (int i = 0; i < this->serialised_unresolved_entry_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->serialised_unresolved_entry(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PmidAccountDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PmidAccountDetails*>(&from));
}

void PmidAccountDetails::MergeFrom(const PmidAccountDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  serialised_unresolved_entry_.MergeFrom(from.serialised_unresolved_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialised_pmid_manager_metadata()) {
      set_serialised_pmid_manager_metadata(from.serialised_pmid_manager_metadata());
    }
  }
}

void PmidAccountDetails::CopyFrom(const PmidAccountDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmidAccountDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PmidAccountDetails::Swap(PmidAccountDetails* other) {
  if (other != this) {
    std::swap(serialised_pmid_manager_metadata_, other->serialised_pmid_manager_metadata_);
    serialised_unresolved_entry_.Swap(&other->serialised_unresolved_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PmidAccountDetails::GetTypeName() const {
  return "maidsafe.vault.protobuf.PmidAccountDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int PutResult::kResultFieldNumber;
const int PutResult::kPmidNameFieldNumber;
const int PutResult::kDataSizeFieldNumber;
const int PutResult::kSerialisedDataFieldNumber;
#endif  // !_MSC_VER

PutResult::PutResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PutResult::InitAsDefaultInstance() {
}

PutResult::PutResult(const PutResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PutResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  data_size_ = 0;
  serialised_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutResult::~PutResult() {
  SharedDtor();
}

void PutResult::SharedDtor() {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_name_;
  }
  if (serialised_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PutResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PutResult& PutResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

PutResult* PutResult::default_instance_ = NULL;

PutResult* PutResult::New() const {
  return new PutResult;
}

void PutResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_pmid_name()) {
      if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
        pmid_name_->clear();
      }
    }
    data_size_ = 0;
    if (has_serialised_data()) {
      if (serialised_data_ != &::google::protobuf::internal::GetEmptyString()) {
        serialised_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PutResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pmid_name;
        break;
      }

      // required bytes pmid_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pmid_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pmid_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_size;
        break;
      }

      // optional int32 data_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_serialised_data;
        break;
      }

      // optional bytes serialised_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required bytes pmid_name = 2;
  if (has_pmid_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->pmid_name(), output);
  }

  // optional int32 data_size = 3;
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->data_size(), output);
  }

  // optional bytes serialised_data = 4;
  if (has_serialised_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->serialised_data(), output);
  }

}

int PutResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required bytes pmid_name = 2;
    if (has_pmid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pmid_name());
    }

    // optional int32 data_size = 3;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_size());
    }

    // optional bytes serialised_data = 4;
    if (has_serialised_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PutResult*>(&from));
}

void PutResult::MergeFrom(const PutResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pmid_name()) {
      set_pmid_name(from.pmid_name());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
    if (from.has_serialised_data()) {
      set_serialised_data(from.serialised_data());
    }
  }
}

void PutResult::CopyFrom(const PutResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PutResult::Swap(PutResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_name_, other->pmid_name_);
    std::swap(data_size_, other->data_size_);
    std::swap(serialised_data_, other->serialised_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PutResult::GetTypeName() const {
  return "maidsafe.vault.protobuf.PutResult";
}


// ===================================================================

#ifndef _MSC_VER
const int StateChange::kPmidNameFieldNumber;
#endif  // !_MSC_VER

StateChange::StateChange()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StateChange::InitAsDefaultInstance() {
}

StateChange::StateChange(const StateChange& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StateChange::SharedCtor() {
  _cached_size_ = 0;
  pmid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateChange::~StateChange() {
  SharedDtor();
}

void StateChange::SharedDtor() {
  if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pmid_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StateChange& StateChange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fvault_2fpmid_5fmanager_2fpmid_5fmanager_2eproto();
#endif
  return *default_instance_;
}

StateChange* StateChange::default_instance_ = NULL;

StateChange* StateChange::New() const {
  return new StateChange;
}

void StateChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pmid_name()) {
      if (pmid_name_ != &::google::protobuf::internal::GetEmptyString()) {
        pmid_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes pmid_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pmid_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes pmid_name = 1;
  if (has_pmid_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->pmid_name(), output);
  }

}

int StateChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes pmid_name = 1;
    if (has_pmid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pmid_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateChange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StateChange*>(&from));
}

void StateChange::MergeFrom(const StateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pmid_name()) {
      set_pmid_name(from.pmid_name());
    }
  }
}

void StateChange::CopyFrom(const StateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StateChange::Swap(StateChange* other) {
  if (other != this) {
    std::swap(pmid_name_, other->pmid_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StateChange::GetTypeName() const {
  return "maidsafe.vault.protobuf.StateChange";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
