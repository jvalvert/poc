// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/vault/unresolved_account_transfer_action.proto

#ifndef PROTOBUF_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace vault {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto();
void protobuf_AssignDesc_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto();
void protobuf_ShutdownFile_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto();

class UnresolvedAccountTransferAction;

// ===================================================================

class UnresolvedAccountTransferAction : public ::google::protobuf::MessageLite {
 public:
  UnresolvedAccountTransferAction();
  virtual ~UnresolvedAccountTransferAction();

  UnresolvedAccountTransferAction(const UnresolvedAccountTransferAction& from);

  inline UnresolvedAccountTransferAction& operator=(const UnresolvedAccountTransferAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const UnresolvedAccountTransferAction& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UnresolvedAccountTransferAction* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UnresolvedAccountTransferAction* other);

  // implements Message ----------------------------------------------

  UnresolvedAccountTransferAction* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UnresolvedAccountTransferAction& from);
  void MergeFrom(const UnresolvedAccountTransferAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialised_key = 1;
  inline bool has_serialised_key() const;
  inline void clear_serialised_key();
  static const int kSerialisedKeyFieldNumber = 1;
  inline const ::std::string& serialised_key() const;
  inline void set_serialised_key(const ::std::string& value);
  inline void set_serialised_key(const char* value);
  inline void set_serialised_key(const void* value, size_t size);
  inline ::std::string* mutable_serialised_key();
  inline ::std::string* release_serialised_key();
  inline void set_allocated_serialised_key(::std::string* serialised_key);

  // required int32 message_id = 2;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);

  // repeated bytes action_list = 3;
  inline int action_list_size() const;
  inline void clear_action_list();
  static const int kActionListFieldNumber = 3;
  inline const ::std::string& action_list(int index) const;
  inline ::std::string* mutable_action_list(int index);
  inline void set_action_list(int index, const ::std::string& value);
  inline void set_action_list(int index, const char* value);
  inline void set_action_list(int index, const void* value, size_t size);
  inline ::std::string* add_action_list();
  inline void add_action_list(const ::std::string& value);
  inline void add_action_list(const char* value);
  inline void add_action_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& action_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_action_list();

  // @@protoc_insertion_point(class_scope:maidsafe.vault.protobuf.UnresolvedAccountTransferAction)
 private:
  inline void set_has_serialised_key();
  inline void clear_has_serialised_key();
  inline void set_has_message_id();
  inline void clear_has_message_id();

  ::std::string* serialised_key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> action_list_;
  ::google::protobuf::int32 message_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto();
  #endif
  friend void protobuf_AssignDesc_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto();

  void InitAsDefaultInstance();
  static UnresolvedAccountTransferAction* default_instance_;
};
// ===================================================================


// ===================================================================

// UnresolvedAccountTransferAction

// required bytes serialised_key = 1;
inline bool UnresolvedAccountTransferAction::has_serialised_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnresolvedAccountTransferAction::set_has_serialised_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnresolvedAccountTransferAction::clear_has_serialised_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnresolvedAccountTransferAction::clear_serialised_key() {
  if (serialised_key_ != &::google::protobuf::internal::GetEmptyString()) {
    serialised_key_->clear();
  }
  clear_has_serialised_key();
}
inline const ::std::string& UnresolvedAccountTransferAction::serialised_key() const {
  return *serialised_key_;
}
inline void UnresolvedAccountTransferAction::set_serialised_key(const ::std::string& value) {
  set_has_serialised_key();
  if (serialised_key_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_key_ = new ::std::string;
  }
  serialised_key_->assign(value);
}
inline void UnresolvedAccountTransferAction::set_serialised_key(const char* value) {
  set_has_serialised_key();
  if (serialised_key_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_key_ = new ::std::string;
  }
  serialised_key_->assign(value);
}
inline void UnresolvedAccountTransferAction::set_serialised_key(const void* value, size_t size) {
  set_has_serialised_key();
  if (serialised_key_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_key_ = new ::std::string;
  }
  serialised_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnresolvedAccountTransferAction::mutable_serialised_key() {
  set_has_serialised_key();
  if (serialised_key_ == &::google::protobuf::internal::GetEmptyString()) {
    serialised_key_ = new ::std::string;
  }
  return serialised_key_;
}
inline ::std::string* UnresolvedAccountTransferAction::release_serialised_key() {
  clear_has_serialised_key();
  if (serialised_key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serialised_key_;
    serialised_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void UnresolvedAccountTransferAction::set_allocated_serialised_key(::std::string* serialised_key) {
  if (serialised_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serialised_key_;
  }
  if (serialised_key) {
    set_has_serialised_key();
    serialised_key_ = serialised_key;
  } else {
    clear_has_serialised_key();
    serialised_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required int32 message_id = 2;
inline bool UnresolvedAccountTransferAction::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnresolvedAccountTransferAction::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnresolvedAccountTransferAction::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnresolvedAccountTransferAction::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 UnresolvedAccountTransferAction::message_id() const {
  return message_id_;
}
inline void UnresolvedAccountTransferAction::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// repeated bytes action_list = 3;
inline int UnresolvedAccountTransferAction::action_list_size() const {
  return action_list_.size();
}
inline void UnresolvedAccountTransferAction::clear_action_list() {
  action_list_.Clear();
}
inline const ::std::string& UnresolvedAccountTransferAction::action_list(int index) const {
  return action_list_.Get(index);
}
inline ::std::string* UnresolvedAccountTransferAction::mutable_action_list(int index) {
  return action_list_.Mutable(index);
}
inline void UnresolvedAccountTransferAction::set_action_list(int index, const ::std::string& value) {
  action_list_.Mutable(index)->assign(value);
}
inline void UnresolvedAccountTransferAction::set_action_list(int index, const char* value) {
  action_list_.Mutable(index)->assign(value);
}
inline void UnresolvedAccountTransferAction::set_action_list(int index, const void* value, size_t size) {
  action_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnresolvedAccountTransferAction::add_action_list() {
  return action_list_.Add();
}
inline void UnresolvedAccountTransferAction::add_action_list(const ::std::string& value) {
  action_list_.Add()->assign(value);
}
inline void UnresolvedAccountTransferAction::add_action_list(const char* value) {
  action_list_.Add()->assign(value);
}
inline void UnresolvedAccountTransferAction::add_action_list(const void* value, size_t size) {
  action_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnresolvedAccountTransferAction::action_list() const {
  return action_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnresolvedAccountTransferAction::mutable_action_list() {
  return &action_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace vault
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_maidsafe_2fvault_2funresolved_5faccount_5ftransfer_5faction_2eproto__INCLUDED
